//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray, NSString;

@interface CRLBezierPath : NSObject
{
    long long sfr_elementCount;	// 8 = 0x8
    long long sfr_elementMax;	// 16 = 0x10
    struct PATHSEGMENT *sfr_head;	// 24 = 0x18
    double *sfr_elementLength;	// 32 = 0x20
    double sfr_totalLength;	// 40 = 0x28
    long long sfr_lastSubpathIndex;	// 48 = 0x30
    void *sfr_extraSegments;	// 56 = 0x38
    double sfr_lineWidth;	// 64 = 0x40
    struct CGRect sfr_bounds;	// 72 = 0x48
    struct CGRect sfr_controlPointBounds;	// 104 = 0x68
    double sfr_miterLimit;	// 136 = 0x88
    double sfr_flatness;	// 144 = 0x90
    double *sfr_dashedLinePattern;	// 152 = 0x98
    unsigned long long sfr_dashedLineCount;	// 160 = 0xa0
    double sfr_dashedLinePhase;	// 168 = 0xa8
    struct CGPath *sfr_path;	// 176 = 0xb0
    long long sfr_extraSegmentCount;	// 184 = 0xb8
    long long sfr_extraSegmentMax;	// 192 = 0xc0
    struct {
        unsigned int sfr_flags:8;
        unsigned int sfr_pathState:2;
        unsigned int sfr_calculatedLengths:1;
        unsigned int sfr_unused:21;
    } sfr_bpFlags;	// 200 = 0xc8
}

+ (void)subdivideBezierWithFlatness:(double)arg1 startPoint:(struct CGPoint)arg2 controlPoint1:(struct CGPoint)arg3 controlPoint2:(struct CGPoint)arg4 endPoint:(struct CGPoint)arg5 addLineBlock:(CDUnknownBlockType)arg6;	// IMP=0x002000000010be06
+ (double)defaultLineWidth;	// IMP=0x0010000000109fdb
+ (void)setDefaultLineWidth:(double)arg1;	// IMP=0x0010000000109fcd
+ (unsigned long long)defaultLineJoinStyle;	// IMP=0x0010000000109fc0
+ (void)setDefaultLineJoinStyle:(unsigned long long)arg1;	// IMP=0x0010000000109fb3
+ (unsigned long long)defaultLineCapStyle;	// IMP=0x0010000000109fa6
+ (void)setDefaultLineCapStyle:(unsigned long long)arg1;	// IMP=0x0010000000109f99
+ (long long)defaultWindingRule;	// IMP=0x0010000000109f8c
+ (void)setDefaultWindingRule:(long long)arg1;	// IMP=0x0010000000109f7f
+ (double)defaultFlatness;	// IMP=0x0010000000109f71
+ (void)setDefaultFlatness:(double)arg1;	// IMP=0x0010000000109f63
+ (double)defaultMiterLimit;	// IMP=0x0010000000109f55
+ (void)setDefaultMiterLimit:(double)arg1;	// IMP=0x0010000000109f47
+ (void)strokeLineFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;	// IMP=0x0010000000109e7c
+ (void)clipRect:(struct CGRect)arg1;	// IMP=0x0010000000109e56
+ (void)strokeRect:(struct CGRect)arg1;	// IMP=0x0010000000109c6a
+ (void)fillRect:(struct CGRect)arg1;	// IMP=0x0010000000109c44
+ (id)bezierPathWithCGPath:(struct CGPath *)arg1;	// IMP=0x00100000001099ce
+ (id)bezierPathWithOvalInRect:(struct CGRect)arg1;	// IMP=0x0010000000109985
+ (id)bezierPathWithRect:(struct CGRect)arg1;	// IMP=0x001000000010993c
+ (id)bezierPathWithDefaultsForErrorCases;	// IMP=0x001000000010990f
+ (id)bezierPathWithStart:(struct CGPoint)arg1 end:(struct CGPoint)arg2;	// IMP=0x00100000001098a2
+ (id)bezierPath;	// IMP=0x0010000000109890
+ (void)initialize;	// IMP=0x0010000000109850
+ (id)tracedPathForInstantAlphaBinaryBitmap:(id)arg1 pointSpacing:(double)arg2;	// IMP=0x00100000000483b0
+ (id)tracedPathForImage:(struct CGImage *)arg1 alphaThreshold:(double)arg2 pointSpacing:(double)arg3;	// IMP=0x00100000000479ea
+ (double)lineWidth;	// IMP=0x00100000001123fd
+ (void)setLineWidth:(double)arg1;	// IMP=0x00100000001123eb
+ (unsigned long long)lineJoinStyle;	// IMP=0x00100000001123d9
+ (void)setLineJoinStyle:(unsigned long long)arg1;	// IMP=0x00100000001123c7
+ (unsigned long long)lineCapStyle;	// IMP=0x00100000001123b5
+ (void)setLineCapStyle:(unsigned long long)arg1;	// IMP=0x00100000001123a3
+ (long long)windingRule;	// IMP=0x0010000000112391
+ (void)setWindingRule:(long long)arg1;	// IMP=0x001000000011237f
+ (double)flatness;	// IMP=0x001000000011236d
+ (void)setFlatness:(double)arg1;	// IMP=0x001000000011235b
+ (double)miterLimit;	// IMP=0x0010000000112349
+ (void)setMiterLimit:(double)arg1;	// IMP=0x0010000000112337
+ (id)appendBezierPaths:(id)arg1;	// IMP=0x0010000000126b29
+ (struct CGPoint)p_findPointWithGreatestSlopeFromStartPoint:(struct CGPoint)arg1 toPointA:(struct CGPoint)arg2 orPointB:(struct CGPoint)arg3;	// IMP=0x001000000011f009
+ (id)bezierPathWithConvexHullOfPoints:(struct CGPoint *)arg1 count:(unsigned long long)arg2;	// IMP=0x001000000011ec9f
+ (id)smoothBezierPath:(id)arg1 withThreshold:(double)arg2;	// IMP=0x001000000011e77b
+ (id)exteriorOfBezierPath:(id)arg1;	// IMP=0x001000000011e53e
+ (id)excludeBezierPaths:(id)arg1;	// IMP=0x001000000011e50d
+ (id)subtractBezierPaths:(id)arg1;	// IMP=0x001000000011e453
+ (id)intersectBezierPaths:(id)arg1;	// IMP=0x001000000011e399
+ (id)uniteBezierPaths:(id)arg1;	// IMP=0x001000000011e2e2
+ (CDStruct_46b2202e)lineEndPositioningOnPath:(id)arg1 atHead:(_Bool)arg2 headPoint:(struct CGPoint)arg3 tailPoint:(struct CGPoint)arg4 headLineEnd:(id)arg5 tailLineEnd:(id)arg6 stroke:(id)arg7;	// IMP=0x00100000002783b7
+ (id)createClippedPath:(id)arg1 headPositioning:(CDStruct_46b2202e)arg2 tailPositioning:(CDStruct_46b2202e)arg3 stroke:(id)arg4;	// IMP=0x0010000000278102
+ (CDStruct_46b2202e)p_makeDefaultPositioning;	// IMP=0x00100000002780ce
+ (double)minimumLengthForSideToHaveFullContinuityWithCornerRadius1:(double)arg1 cornerRadius2:(double)arg2;	// IMP=0x0010000000433de8
+ (id)bezierPathWithRoundedRect:(struct CGRect)arg1 upperRightRadius:(double)arg2 lowerRightRadius:(double)arg3 lowerLeftRadius:(double)arg4 upperLeftRadius:(double)arg5 useLegacyCorners:(_Bool)arg6 keepNoOpElements:(_Bool)arg7;	// IMP=0x001000000043393f
+ (id)bezierPathWithLegacyRoundedRect:(struct CGRect)arg1 cornerRadius:(double)arg2;	// IMP=0x001000000043391a
+ (id)bezierPathWithContinuousCornerRoundedRect:(struct CGRect)arg1 cornerRadius:(double)arg2;	// IMP=0x00100000004338f8
+ (id)pathForObjectEraserWithPoint:(struct CGPoint)arg1;	// IMP=0x00100000009b9f00
- (id)initWithCString:(const char *)arg1;	// IMP=0x00100000001113ac
- (const char *)cString;	// IMP=0x0010000000110f0d
- (_Bool)containsPoint:(struct CGPoint)arg1;	// IMP=0x0010000000110e89
- (void)appendBezierPathWithArcFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 radius:(double)arg3;	// IMP=0x0010000000110a73
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4;	// IMP=0x0010000000110a5c
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(_Bool)arg5;	// IMP=0x00100000001104e9
- (void)_appendArcSegmentWithCenter:(struct CGPoint)arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4;	// IMP=0x00100000001103c0
- (void)appendBezierPathWithOvalInRect:(struct CGRect)arg1;	// IMP=0x00100000001101eb
- (void)appendBezierPathWithPoints:(struct CGPoint *)arg1 count:(long long)arg2;	// IMP=0x0010000000110140
- (void)appendBezierPathWithRect:(struct CGRect)arg1;	// IMP=0x001000000011002f
- (id)copyWithPointsInRange:(struct _NSRange)arg1 countingSubpaths:(unsigned long long *)arg2;	// IMP=0x001000000010ff2a
- (id)copyWithPointsInRange:(struct _NSRange)arg1;	// IMP=0x001000000010ff04
- (void)p_appendPointsInRange:(struct _NSRange)arg1 fromBezierPath:(id)arg2 countingSubpaths:(unsigned long long *)arg3;	// IMP=0x001000000010fa36
- (void)appendPointsInRange:(struct _NSRange)arg1 fromBezierPath:(id)arg2;	// IMP=0x001000000010fa10
- (void)appendBezierPath:(id)arg1;	// IMP=0x001000000010f9fc
- (void)appendBezierPath:(id)arg1 skippingInitialMoveIfPossible:(_Bool)arg2;	// IMP=0x001000000010f81c
- (void)_appendToPath:(id)arg1 skippingInitialMoveIfPossible:(_Bool)arg2;	// IMP=0x001000000010f6c2
- (void)setAssociatedPoints:(struct CGPoint *)arg1 atIndex:(long long)arg2;	// IMP=0x001000000010f3fa
- (long long)elementAtIndex:(long long)arg1 allPoints:(struct CGPoint *)arg2;	// IMP=0x001000000010f12c
- (void)iteratePathElementsWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000010efdf
- (long long)elementAtIndex:(long long)arg1 associatedPoints:(struct CGPoint *)arg2;	// IMP=0x001000000010e9ae
- (long long)elementAtIndex:(long long)arg1;	// IMP=0x001000000010e99a
- (long long)elementCount;	// IMP=0x001000000010e990
- (double)lengthToElement:(long long)arg1;	// IMP=0x001000000010e5a4
- (double)lengthOfElement:(long long)arg1;	// IMP=0x001000000010e31e
- (double)length;	// IMP=0x001000000010e2f0
- (void)calculateLengths;	// IMP=0x001000000010e249
- (double)calculateLengthOfElement:(long long)arg1;	// IMP=0x001000000010df57
@property(readonly, nonatomic) _Bool containsClosePathElement;
- (_Bool)isClockwise;	// IMP=0x001000000010da05
- (_Bool)isFlat;	// IMP=0x001000000010d9f4
@property(readonly, nonatomic) struct CGRect bounds;
- (struct CGRect)controlPointBounds;	// IMP=0x001000000010d678
- (struct CGPoint)currentPoint;	// IMP=0x001000000010d4d8
- (_Bool)isEmpty;	// IMP=0x001000000010d4ca
- (_Bool)isCircular;	// IMP=0x001000000010d2dc
- (_Bool)isRectangular;	// IMP=0x001000000010cf60
- (_Bool)isDiamond;	// IMP=0x001000000010cd15
- (_Bool)isTriangular;	// IMP=0x001000000010cbba
- (struct CGPath *)CGPath;	// IMP=0x001000000010cb7c
- (void)transformUsingAffineTransform:(struct CGAffineTransform)arg1;	// IMP=0x001000000010c913
- (void)convertCloseElementsToLineElements;	// IMP=0x001000000010c8a8
- (id)p_bezierPathByRemovingRedundantElementAndSubregionsSmallerThanThreshold:(double)arg1;	// IMP=0x001000000010c3bf
- (id)bezierPathByRemovingRedundantElements;	// IMP=0x001000000010c3aa
- (id)bezierPathByRemovingSmallSubpathsForInteriorWrapsForInset:(double)arg1;	// IMP=0x001000000010c394
- (id)bezierPathByReversingPath;	// IMP=0x001000000010c1bf
- (id)_copyFlattenedPath;	// IMP=0x001000000010c18a
- (id)bezierPathByFlatteningPathWithFlatness:(double)arg1;	// IMP=0x001000000010c116
- (id)bezierPathByFlatteningPath;	// IMP=0x001000000010c0fc
- (void)flattenIntoPath:(id)arg1 flatness:(double)arg2;	// IMP=0x001000000010bfc8
- (void)flattenIntoPath:(id)arg1;	// IMP=0x001000000010bfae
- (void)p_subdivideBezierWithFlatness:(double)arg1 startPoint:(struct CGPoint)arg2 controlPoint1:(struct CGPoint)arg3 controlPoint2:(struct CGPoint)arg4 endPoint:(struct CGPoint)arg5;	// IMP=0x001000000010bd68
- (void)addClip;	// IMP=0x001000000010bc44
- (void)fill;	// IMP=0x001000000010bb20
- (void)stroke;	// IMP=0x001000000010b984
- (void)_doPath;	// IMP=0x001000000010b7d7
- (struct CGPoint)_checkPointForValidity:(struct CGPoint)arg1;	// IMP=0x001000000010b5f5
- (_Bool)_isValid:(double)arg1;	// IMP=0x001000000010b5c3
- (void)getLineDash:(double *)arg1 count:(long long *)arg2 phase:(double *)arg3;	// IMP=0x001000000010b56b
- (void)setLineDash:(const double *)arg1 count:(long long)arg2 phase:(double)arg3;	// IMP=0x001000000010b488
@property(nonatomic) double flatness;
@property(nonatomic) double miterLimit;
@property(nonatomic) long long windingRule;
@property(nonatomic) unsigned long long lineJoinStyle;
@property(nonatomic) unsigned long long lineCapStyle;
@property(nonatomic) double lineWidth;
- (void)relativeCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x001000000010b2df
- (void)relativeCurveToPoint:(struct CGPoint)arg1 controlPoint:(struct CGPoint)arg2;	// IMP=0x001000000010b243
- (void)relativeLineToPoint:(struct CGPoint)arg1;	// IMP=0x001000000010b1ee
- (void)relativeMoveToPoint:(struct CGPoint)arg1;	// IMP=0x001000000010b199
- (void)removeAllPoints;	// IMP=0x001000000010b138
- (void)closePath;	// IMP=0x001000000010b126
- (void)curveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x001000000010af45
- (void)curveToPoint:(struct CGPoint)arg1 controlPoint:(struct CGPoint)arg2;	// IMP=0x001000000010ad20
- (void)lineToPoint:(struct CGPoint)arg1;	// IMP=0x001000000010ab72
- (void)moveToPoint:(struct CGPoint)arg1;	// IMP=0x001000000010ab60
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x001000000010a40b
- (void)copyPathAttributesTo:(id)arg1;	// IMP=0x001000000010a312
- (unsigned long long)hash;	// IMP=0x001000000010a300
- (_Bool)isEqual:(id)arg1;	// IMP=0x001000000010a166
- (void)dealloc;	// IMP=0x001000000010a0d3
- (id)init;	// IMP=0x0010000000109fe9
- (void)_deviceClosePath;	// IMP=0x001000000011212f
- (void)_deviceCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3 elementLength:(double)arg4;	// IMP=0x0010000000111e4b
- (void)_deviceLineToPoint:(struct CGPoint)arg1;	// IMP=0x0010000000111e13
- (void)_deviceMoveToPoint:(struct CGPoint)arg1;	// IMP=0x0010000000111d86
- (void)_addPathSegment:(long long)arg1 point:(struct CGPoint)arg2;	// IMP=0x001000000011196f
- (id)description;	// IMP=0x001000000011240f
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect)arg1 startRadialVector:(struct CGPoint)arg2 endRadialVector:(struct CGPoint)arg3 angleSign:(unsigned long long)arg4 startNewPath:(_Bool)arg5;	// IMP=0x001000000012781c
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect)arg1 startAngle:(double)arg2 swingAngle:(double)arg3 angleType:(unsigned long long)arg4 startNewPath:(_Bool)arg5;	// IMP=0x0010000000126c29
- (void)alignBoundsToOrigin;	// IMP=0x0010000000126a6c
- (id)p_aliasedPathInContext:(struct CGContext *)arg1 viewScale:(float)arg2 effectiveStrokeWidth:(float)arg3;	// IMP=0x0010000000125e29
- (id)aliasedPathWithViewScale:(float)arg1 effectiveStrokeWidth:(float)arg2;	// IMP=0x0010000000125e15
- (id)aliasedPathInContext:(struct CGContext *)arg1 effectiveStrokeWidth:(float)arg2;	// IMP=0x0010000000125df8
- (void)clearStroke:(struct CGContext *)arg1;	// IMP=0x0010000000125ce0
- (void)addPathToContext:(struct CGContext *)arg1;	// IMP=0x0010000000125bd9
- (double)p_yValueFromXValue:(double)arg1 elementIndex:(long long *)arg2 parametricValue:(double *)arg3;	// IMP=0x0010000000124fd6
- (double)yValueFromXValue:(double)arg1;	// IMP=0x0010000000124fc0
- (double)distanceToPoint:(struct CGPoint)arg1 elementIndex:(unsigned long long *)arg2 tValue:(double *)arg3 threshold:(double)arg4 findClosestMatch:(_Bool)arg5;	// IMP=0x00100000001247a0
- (struct CGRect)boundsIncludingStrokeWidth:(double)arg1 joinStyle:(unsigned long long)arg2 capStyle:(unsigned long long)arg3 miterLimit:(double)arg4 needsToExtendJoins:(_Bool)arg5;	// IMP=0x001000000012409e
- (_Bool)intersectsRect:(struct CGRect)arg1 hasFill:(_Bool)arg2;	// IMP=0x0010000000123cf2
- (void)iterateOverPathWithPointDistancePerIteration:(double)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x0010000000123b39
- (struct CGPoint)pointAlongPathAtPercentage:(double)arg1 withFlattenedPath:(id)arg2 andLength:(double *)arg3 atStartIndex:(unsigned long long *)arg4;	// IMP=0x0010000000122a05
- (struct CGPoint)pointAlongPathAtPercentage:(double)arg1;	// IMP=0x0010000000122973
- (_Bool)isVisuallyEqualToPath:(id)arg1 withThreshold:(double)arg2;	// IMP=0x0010000000122616
- (id)p_elementCountForSubpaths;	// IMP=0x00100000001224f5
- (id)pathSplitAtSubpathBoundariesWithSoftElementLimit:(unsigned long long)arg1 hardElementLimit:(unsigned long long)arg2;	// IMP=0x00100000001219e0
- (id)arrayOfSubpathsWithEffectivelyEmptySubpathsRemoved:(_Bool)arg1;	// IMP=0x00100000001216e4
- (id)pathByWobblingByUpTo:(double)arg1 subdivisions:(unsigned long long)arg2;	// IMP=0x00100000001212b9
- (id)pathByCreatingHoleInPathAtPoint:(struct CGPoint)arg1 withDiameter:(CDUnknownBlockType)arg2 andThreshold:(double)arg3 updatingPatternOffsetsBySubpath:(id)arg4;	// IMP=0x001000000011f960
- (id)p_pathBySplittingAtPointGuaranteedToBeOnPath:(struct CGPoint)arg1 controlPointDistanceEqual:(_Bool)arg2 elementIndex:(long long)arg3 parametricValue:(double)arg4;	// IMP=0x001000000011f3fe
- (id)pathBySplittingAtPointOnPath:(struct CGPoint)arg1 controlPointDistanceEqual:(_Bool)arg2;	// IMP=0x001000000011f37b
- (id)bezierPathByOffsettingPath:(double)arg1 joinStyle:(unsigned long long)arg2;	// IMP=0x001000000011e7a4
- (id)excludeBezierPath:(id)arg1;	// IMP=0x001000000011e484
- (id)subtractBezierPath:(id)arg1;	// IMP=0x001000000011e3ca
- (id)intersectBezierPath:(id)arg1;	// IMP=0x001000000011e310
- (id)uniteWithBezierPath:(id)arg1;	// IMP=0x001000000011e259
- (id)pathByNormalizingClosedPathToRemoveSelfIntersections;	// IMP=0x001000000011e23d
- (id)p_strokedPathByUsingBrushStroke;	// IMP=0x001000000011e09d
- (id)p_strokedPathByUsingCG;	// IMP=0x001000000011dfb2
- (id)strokedCopy;	// IMP=0x001000000011dc3b
@property(readonly, nonatomic) NSArray *visuallyDistinctSubregions;
- (_Bool)hasAtLeastTwoVisuallyDistinctSubregions;	// IMP=0x001000000011dc03
@property(readonly, nonatomic) NSString *inferredLocalizedAccessibilityDescriptionPlaceholder;
@property(readonly, nonatomic) NSString *inferredAccessibilityDescription;
@property(readonly, nonatomic) struct CGRect boundsIncludingStroke;
@property(readonly, nonatomic) double flattenedArea;
@property(readonly, nonatomic) unsigned long long totalSubpathCountIncludingEffectivelyEmptySubpaths;
@property(readonly, nonatomic) _Bool containsElementsOtherThanMoveAndClose;
@property(readonly, nonatomic) _Bool isEffectivelyClosed;
@property(readonly, nonatomic) _Bool isLineSegment;
@property(readonly, nonatomic) _Bool isOpen;
@property(readonly, nonatomic) _Bool isCompound;
- (_Bool)p_equalWidthAndHeightForSize:(struct CGSize)arg1;	// IMP=0x0010000000278aae
- (id)labelForSize:(struct CGSize)arg1;	// IMP=0x0010000000278882
- (struct CGRect)boundsIncludingCRLStroke:(id)arg1;	// IMP=0x0010000000277e2d
- (void)takeAttributesFromStroke:(id)arg1;	// IMP=0x0010000000277d59
- (id)chisel;	// IMP=0x00100000003ce4ef
- (void)recursiveSubdivideOntoPath:(id)arg1 withScaling:(CDStruct_c3b9c2ee)arg2 inElementRange:(struct _NSRange)arg3 into:(id)arg4;	// IMP=0x00100000003cd89f
- (void)recursiveSubdivideOntoPath:(id)arg1 withScaling:(CDStruct_c3b9c2ee)arg2 into:(id)arg3;	// IMP=0x00100000003cd808
- (void)recursiveSubdivideOntoPath:(id)arg1 into:(id)arg2;	// IMP=0x00100000003cd77d
- (double)curvatureAt:(double)arg1 fromElement:(long long)arg2;	// IMP=0x00100000003cc0f5
- (double)curvatureAt:(double)arg1;	// IMP=0x00100000003cc078
- (struct CGPoint)myGradientAt:(double)arg1 fromElement:(long long)arg2;	// IMP=0x00100000003cc006
- (struct CGPoint)myGradientAt:(double)arg1;	// IMP=0x00100000003cbf6c
- (struct CGPoint)rawGradientAt:(double)arg1 fromElement:(long long)arg2;	// IMP=0x00100000003cbc4b
- (double)elementPercentageFromElement:(long long)arg1 forOverallPercentage:(double)arg2;	// IMP=0x00100000003cbb9a
- (struct CGPoint)transformedTotalCoordinate:(struct CGPoint)arg1 betweenElement:(long long)arg2 andElement:(long long)arg3 getElement:(long long *)arg4 getPercentage:(double *)arg5;	// IMP=0x00100000003cba77
- (struct CGPoint)gradientAt:(double)arg1;	// IMP=0x00100000003cba2b
- (struct CGPoint)gradientAt:(double)arg1 fromElement:(long long)arg2;	// IMP=0x00100000003cba14
- (struct CGPoint)pointAt:(double)arg1;	// IMP=0x00100000003cb7b8
- (struct CGPoint)pointAt:(double)arg1 fromElement:(long long)arg2;	// IMP=0x00100000003cb5f1
- (long long)elementPercentage:(double *)arg1 forOverallPercentage:(double)arg2 startingElementIndex:(long long)arg3 lengthToStartingElement:(double)arg4;	// IMP=0x00100000003cb100
- (long long)elementPercentage:(double *)arg1 forOverallPercentage:(double)arg2;	// IMP=0x00100000003cb0e9
- (struct CGPoint)nearestAngleOnPathToLine:(struct CGPoint [2])arg1;	// IMP=0x00100000003caac1
- (struct CGPoint)nearestPointOnPathToLine:(struct CGPoint [2])arg1;	// IMP=0x00100000003ca839
- (id)copyFromSegment:(int)arg1 t:(double)arg2 toSegment:(int)arg3 t:(double)arg4;	// IMP=0x00100000003ca75c
- (void)appendBezierPath:(id)arg1 fromSegment:(long long)arg2 t:(double)arg3 toSegment:(long long)arg4 t:(double)arg5 withoutMove:(_Bool)arg6;	// IMP=0x00100000003ca1b4
- (void)appendBezierPath:(id)arg1 fromSegment:(long long)arg2 toSegment:(long long)arg3;	// IMP=0x00100000003ca078
- (void)addIntersectionsWithLine:(struct CGPoint [2])arg1 to:(id)arg2;	// IMP=0x00100000003c9f36
- (void)addIntersectionsWithPath:(id)arg1 to:(id)arg2;	// IMP=0x00100000003c9f1b
- (void)addIntersectionsWithPath:(id)arg1 to:(id)arg2 allIntersections:(_Bool)arg3 reversed:(_Bool)arg4;	// IMP=0x00100000003c921b
- (void)getStartPoint:(struct CGPoint *)arg1 andEndPoint:(struct CGPoint *)arg2;	// IMP=0x00100000003c9178

@end

