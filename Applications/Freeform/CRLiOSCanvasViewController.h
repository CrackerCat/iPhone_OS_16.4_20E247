//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <UIKit/UIViewController.h>

@class CALayer, CRLCanvasLayer, CRLCanvasRepEnterExitNotifier, CRLCanvasView, CRLCanvasZoomTracker, CRLEditorController, CRLInteractiveCanvasController, CRLOnce, CRLWPImmediatePressGestureRecognizer, CRLWPLongPressGestureRecognizer, CRLWPTapAndTouchGestureRecognizer, CRLWPTapGestureRecognizer, CRLiOSAllTouchesDoneGestureRecognizer, CRLiOSCanvasContextMenuInteractionDelegate, CRLiOSCanvasDragInteractionDelegate, CRLiOSCanvasDropInteractionDelegate, CRLiOSCanvasPointerInteractionDelegate, CRLiOSCanvasZoomPinchGestureRecognizer, CRLiOSContextMenuController, CRLiOSEditMenuTapGestureRecognizer, CRLiOSFreehandDrawingGestureRecognizer, CRLiOSKnobDragGestureRecognizer, CRLiOSMultiSelectGestureRecognizer, CRLiOSPencilDownGestureRecognizer, CRLiOSPreventScrollGestureRecognizer, CRLiOSQuickSelectViewController, CRLiOSRectangularMarqueeGestureRecognizer, CRLiOSRepDragGestureRecognizer, CRLiOSRepNudgeGestureRecognizer, CRLiOSRepRotateGestureRecognizer, CRLiOSRepRotateKnobGestureRecognizer, CRLiOSScribbleInteractionDelegate, CRLiOSWindowIgnoreUserInteractionSafeWrapper, MISSING_TYPE, NSArray, NSMutableArray, NSObject, NSString, NSTimer, NSUndoManager, UIDragInteraction, UIEditMenuInteraction, UIGestureRecognizer, UIIndirectScribbleInteraction, UIPinchGestureRecognizer, UIPointerInteraction, UIResponder, UIScribbleInteraction, UITapGestureRecognizer, _TtC8Freeform20CRLiOSPencilMediator, _TtC8Freeform21CRLEditingCoordinator, _TtC8Freeform28CRLiOSMiniFormatterPresenter, _TtC8Freeform34CRLiOSPencilHoverGestureRecognizer;
@protocol CRLCanvasImageHUDController, CRLUIKitInteractionHost, CRLUserDialogPresenter, CRLiOSCanvasViewControllerDelegate, CRLiOSPencilMediating, NSObject, UITextInput;

@interface CRLiOSCanvasViewController : UIViewController
{
    MISSING_TYPE *mICC;	// 8 = 0x8
    id <CRLiOSCanvasViewControllerDelegate> mDelegate;	// 16 = 0x10
    CRLCanvasLayer *mCanvasLayer;	// 24 = 0x18
    _Bool mContextMenuMightBeDisplayed;	// 32 = 0x20
    CRLiOSContextMenuController *mContextMenuController;	// 40 = 0x28
    id <NSObject> mSceneWillEnterForegroundObserver;	// 48 = 0x30
    UITapGestureRecognizer *mSingleTapGestureRecognizer;	// 56 = 0x38
    UITapGestureRecognizer *mDoubleTapGestureRecognizer;	// 64 = 0x40
    CRLiOSEditMenuTapGestureRecognizer *mEditMenuTapGestureRecognizer;	// 72 = 0x48
    CRLiOSKnobDragGestureRecognizer *mKnobDragGestureRecognizer;	// 80 = 0x50
    CRLiOSMultiSelectGestureRecognizer *mMultiSelectGestureRecognizer;	// 88 = 0x58
    CRLiOSRepDragGestureRecognizer *mRepDragGestureRecognizer;	// 96 = 0x60
    CRLiOSRepRotateGestureRecognizer *mRepRotateGestureRecognizer;	// 104 = 0x68
    CRLiOSCanvasZoomPinchGestureRecognizer *mZoomGestureRecognizer;	// 112 = 0x70
    CRLiOSRepNudgeGestureRecognizer *mNudgeGestureRecognizer;	// 120 = 0x78
    CRLiOSAllTouchesDoneGestureRecognizer *mAllTouchesDoneGestureRecognizer;	// 128 = 0x80
    CRLiOSAllTouchesDoneGestureRecognizer *mAllIndirectPointerTouchesDoneGestureRecognizer;	// 136 = 0x88
    CRLiOSPreventScrollGestureRecognizer *mPreventScrollGestureRecognizer;	// 144 = 0x90
    CRLiOSFreehandDrawingGestureRecognizer *mFreehandDrawingGestureRecognizer;	// 152 = 0x98
    _TtC8Freeform34CRLiOSPencilHoverGestureRecognizer *mPencilHoverGestureRecognizer;	// 160 = 0xa0
    CRLiOSPencilDownGestureRecognizer *mPencilDownGestureRecognizer;	// 168 = 0xa8
    CRLiOSRectangularMarqueeGestureRecognizer *mRectangularMarqueeGestureRecognizer;	// 176 = 0xb0
    _Atomic int mPreventStandardPencilBehaviorsCounter;	// 184 = 0xb8
    _Bool mHasBeenTornDown;	// 188 = 0xbc
    _Bool mCurrentlyScrolling;	// 189 = 0xbd
    id <CRLCanvasImageHUDController> mImageHUDController;	// 192 = 0xc0
    CRLOnce *mImageHUDOnce;	// 200 = 0xc8
    CRLCanvasZoomTracker *mCanvasZoomTracker;	// 208 = 0xd0
    struct CGPoint mLastZoomHUDLocation;	// 216 = 0xd8
    struct CGPoint mLastTapPoint;	// 232 = 0xe8
    _Bool mIsCurrentlyTrackingIndirectPointerTouch;	// 248 = 0xf8
    _Bool mIsCurrentlyTrackingTouch;	// 249 = 0xf9
    long long mCanvasZoomMethod;	// 256 = 0x100
    CRLiOSCanvasDropInteractionDelegate *mDropInteractionDelegate;	// 264 = 0x108
    CRLiOSCanvasDragInteractionDelegate *mDragInteractionDelegate;	// 272 = 0x110
    CRLiOSCanvasContextMenuInteractionDelegate *mContextMenuInteractionDelegate;	// 280 = 0x118
    UIPointerInteraction *mPointerInteraction;	// 288 = 0x120
    CRLiOSCanvasPointerInteractionDelegate *mPointerInteractionDelegate;	// 296 = 0x128
    CRLCanvasRepEnterExitNotifier *mEnterExitNotifier;	// 304 = 0x130
    CRLiOSQuickSelectViewController *mQuickSelectViewController;	// 312 = 0x138
    long long mEnclosingScrollViewPanGestureMinimumTouchCountBeforeQuickSelect;	// 320 = 0x140
    _Bool mEditMenuTapGestureRecognizerEnabledBeforeQuickSelect;	// 328 = 0x148
    _TtC8Freeform20CRLiOSPencilMediator *mPencilMediator;	// 336 = 0x150
    id <CRLUserDialogPresenter> mUserDialogPresenter;	// 344 = 0x158
    CRLiOSRepRotateKnobGestureRecognizer *mRepRotateKnobGestureRecognizer;	// 352 = 0x160
    UIEditMenuInteraction *mEditMenuInteraction;	// 360 = 0x168
    CRLiOSWindowIgnoreUserInteractionSafeWrapper *mZoomTrackerIgnoreInteractionEventsSafeWrapper;	// 368 = 0x170
    NSMutableArray *mDisabledGesturesWhileInEyeDropperMode;	// 376 = 0x178
    UIDragInteraction *mDragInteraction;	// 384 = 0x180
    CRLiOSScribbleInteractionDelegate *mScribbleInteractionDelegate;	// 392 = 0x188
    UIScribbleInteraction *mDirectScribbleInteraction;	// 400 = 0x190
    UIIndirectScribbleInteraction *mScribbleInteraction;	// 408 = 0x198
    NSTimer *mPreventInsertScribbleElementTimer;	// 416 = 0x1a0
    NSMutableArray *_gestureRecognizers;	// 424 = 0x1a8
    CRLWPTapAndTouchGestureRecognizer *_doubleTapAndTouchGestureRecognizer;	// 432 = 0x1b0
    CRLWPTapAndTouchGestureRecognizer *_tapAndTouchGestureRecognizer;	// 440 = 0x1b8
    CRLWPLongPressGestureRecognizer *_longPressGestureRecognizer;	// 448 = 0x1c0
    CRLWPImmediatePressGestureRecognizer *_immediatePressGestureRecognizer;	// 456 = 0x1c8
    UIGestureRecognizer *_alternateContextMenuGestureRecognizer;	// 464 = 0x1d0
    CRLWPTapGestureRecognizer *_immediateDoubleTapGestureRecognizer;	// 472 = 0x1d8
    CRLWPTapGestureRecognizer *_immediateSingleTapGestureRecognizer;	// 480 = 0x1e0
    CRLWPTapGestureRecognizer *_secondarySingleTapGestureRecognizer;	// 488 = 0x1e8
    _TtC8Freeform28CRLiOSMiniFormatterPresenter *_miniFormatterPresenter;	// 496 = 0x1f0
    struct CGRect mTargetRectForContextMenuController;	// 504 = 0x1f8
}

- (void).cxx_destruct;	// IMP=0x0020000000340c10
@property(retain, nonatomic) _TtC8Freeform28CRLiOSMiniFormatterPresenter *miniFormatterPresenter; // @synthesize miniFormatterPresenter=_miniFormatterPresenter;
@property(retain, nonatomic) CRLWPTapGestureRecognizer *secondarySingleTapGestureRecognizer; // @synthesize secondarySingleTapGestureRecognizer=_secondarySingleTapGestureRecognizer;
@property(retain, nonatomic) CRLWPTapGestureRecognizer *immediateSingleTapGestureRecognizer; // @synthesize immediateSingleTapGestureRecognizer=_immediateSingleTapGestureRecognizer;
@property(retain, nonatomic) CRLWPTapGestureRecognizer *immediateDoubleTapGestureRecognizer; // @synthesize immediateDoubleTapGestureRecognizer=_immediateDoubleTapGestureRecognizer;
@property(retain, nonatomic) UIGestureRecognizer *alternateContextMenuGestureRecognizer; // @synthesize alternateContextMenuGestureRecognizer=_alternateContextMenuGestureRecognizer;
@property(retain, nonatomic) CRLWPImmediatePressGestureRecognizer *immediatePressGestureRecognizer; // @synthesize immediatePressGestureRecognizer=_immediatePressGestureRecognizer;
@property(retain, nonatomic) CRLWPLongPressGestureRecognizer *longPressGestureRecognizer; // @synthesize longPressGestureRecognizer=_longPressGestureRecognizer;
@property(retain, nonatomic) CRLWPTapAndTouchGestureRecognizer *tapAndTouchGestureRecognizer; // @synthesize tapAndTouchGestureRecognizer=_tapAndTouchGestureRecognizer;
@property(retain, nonatomic) CRLWPTapAndTouchGestureRecognizer *doubleTapAndTouchGestureRecognizer; // @synthesize doubleTapAndTouchGestureRecognizer=_doubleTapAndTouchGestureRecognizer;
@property(retain, nonatomic) NSMutableArray *gestureRecognizers; // @synthesize gestureRecognizers=_gestureRecognizers;
@property(retain, nonatomic) NSTimer *preventInsertScribbleElementTimer; // @synthesize preventInsertScribbleElementTimer=mPreventInsertScribbleElementTimer;
@property(retain, nonatomic) UIIndirectScribbleInteraction *scribbleInteraction; // @synthesize scribbleInteraction=mScribbleInteraction;
@property(retain, nonatomic) UIScribbleInteraction *directScribbleInteraction; // @synthesize directScribbleInteraction=mDirectScribbleInteraction;
@property(retain, nonatomic) CRLiOSScribbleInteractionDelegate *scribbleInteractionDelegate; // @synthesize scribbleInteractionDelegate=mScribbleInteractionDelegate;
@property(readonly, nonatomic) UIDragInteraction *dragInteraction; // @synthesize dragInteraction=mDragInteraction;
@property(retain, nonatomic) NSMutableArray *disabledGesturesWhileInEyeDropperMode; // @synthesize disabledGesturesWhileInEyeDropperMode=mDisabledGesturesWhileInEyeDropperMode;
@property(retain, nonatomic) CRLiOSWindowIgnoreUserInteractionSafeWrapper *zoomTrackerIgnoreInteractionEventsSafeWrapper; // @synthesize zoomTrackerIgnoreInteractionEventsSafeWrapper=mZoomTrackerIgnoreInteractionEventsSafeWrapper;
@property(nonatomic) _Bool currentlyTrackingIndirectPointerTouch; // @synthesize currentlyTrackingIndirectPointerTouch=mIsCurrentlyTrackingIndirectPointerTouch;
@property(readonly, nonatomic) struct CGRect targetRectForContextMenuController; // @synthesize targetRectForContextMenuController=mTargetRectForContextMenuController;
@property(nonatomic) struct CGPoint lastTapPoint; // @synthesize lastTapPoint=mLastTapPoint;
@property(nonatomic) _Bool contextMenuMightBeDisplayed; // @synthesize contextMenuMightBeDisplayed=mContextMenuMightBeDisplayed;
@property(retain, nonatomic) UIEditMenuInteraction *editMenuInteraction; // @synthesize editMenuInteraction=mEditMenuInteraction;
@property(retain, nonatomic) CRLiOSRectangularMarqueeGestureRecognizer *rectangularMarqueeGestureRecognizer; // @synthesize rectangularMarqueeGestureRecognizer=mRectangularMarqueeGestureRecognizer;
@property(retain, nonatomic) CRLiOSPencilDownGestureRecognizer *pencilDownGestureRecognizer; // @synthesize pencilDownGestureRecognizer=mPencilDownGestureRecognizer;
@property(retain, nonatomic) CRLiOSFreehandDrawingGestureRecognizer *freehandDrawingGestureRecognizer; // @synthesize freehandDrawingGestureRecognizer=mFreehandDrawingGestureRecognizer;
@property(readonly, nonatomic) UIGestureRecognizer *preventScrollGestureRecognizer; // @synthesize preventScrollGestureRecognizer=mPreventScrollGestureRecognizer;
@property(retain, nonatomic) CRLiOSAllTouchesDoneGestureRecognizer *allTouchesDoneGestureRecognizer; // @synthesize allTouchesDoneGestureRecognizer=mAllTouchesDoneGestureRecognizer;
@property(retain, nonatomic) UIPinchGestureRecognizer *zoomGestureRecognizer; // @synthesize zoomGestureRecognizer=mZoomGestureRecognizer;
@property(retain, nonatomic) CRLiOSRepNudgeGestureRecognizer *nudgeGestureRecognizer; // @synthesize nudgeGestureRecognizer=mNudgeGestureRecognizer;
@property(retain, nonatomic) CRLiOSRepRotateKnobGestureRecognizer *repRotateKnobGestureRecognizer; // @synthesize repRotateKnobGestureRecognizer=mRepRotateKnobGestureRecognizer;
@property(retain, nonatomic) CRLiOSRepRotateGestureRecognizer *repRotateGestureRecognizer; // @synthesize repRotateGestureRecognizer=mRepRotateGestureRecognizer;
@property(retain, nonatomic) CRLiOSRepDragGestureRecognizer *repDragGestureRecognizer; // @synthesize repDragGestureRecognizer=mRepDragGestureRecognizer;
@property(retain, nonatomic) CRLiOSKnobDragGestureRecognizer *knobDragGestureRecognizer; // @synthesize knobDragGestureRecognizer=mKnobDragGestureRecognizer;
@property(retain, nonatomic) CRLiOSMultiSelectGestureRecognizer *multiSelectGestureRecognizer; // @synthesize multiSelectGestureRecognizer=mMultiSelectGestureRecognizer;
@property(retain, nonatomic) CRLiOSEditMenuTapGestureRecognizer *editMenuTapGestureRecognizer; // @synthesize editMenuTapGestureRecognizer=mEditMenuTapGestureRecognizer;
@property(retain, nonatomic) UITapGestureRecognizer *doubleTapGestureRecognizer; // @synthesize doubleTapGestureRecognizer=mDoubleTapGestureRecognizer;
@property(retain, nonatomic) UITapGestureRecognizer *singleTapGestureRecognizer; // @synthesize singleTapGestureRecognizer=mSingleTapGestureRecognizer;
@property(nonatomic) __weak id <CRLUserDialogPresenter> userDialogPresenter; // @synthesize userDialogPresenter=mUserDialogPresenter;
@property(nonatomic) __weak id <CRLiOSCanvasViewControllerDelegate> delegate; // @synthesize delegate=mDelegate;
@property(nonatomic) __weak CRLInteractiveCanvasController *interactiveCanvasController; // @synthesize interactiveCanvasController=mICC;
- (_Bool)p_isAccessibilityTextResponderAction:(SEL)arg1;	// IMP=0x001000000034064c
- (void)dismissDocumentChromePresentedViewController;	// IMP=0x0010000000340546
@property(readonly, nonatomic) _Bool documentChromeHasPresentedViewController;
- (void)openAlertControllerForPhoneLink:(id)arg1;	// IMP=0x00100000003404af
- (_Bool)allowOpenLinkOnSingleTapForRepWhenEditingDisabled:(id)arg1;	// IMP=0x00100000003404a7
@property(readonly, nonatomic) _Bool allowUndoRedoOperations;
@property(readonly, nonatomic) _Bool allowsCanvasScrollingFromKeyboard;
- (_Bool)becomeFirstResponderIfAppropriate;	// IMP=0x001000000034006e
- (_Bool)shouldPreventBecomingFirstResponderOnViewLoad;	// IMP=0x0010000000340066
- (_Bool)shouldIgnoreKeyboardInput;	// IMP=0x001000000033ff00
- (_Bool)shouldPreserveEditorSelectionInSplitViewMode;	// IMP=0x001000000033fef8
- (_Bool)preserveEditorSelection;	// IMP=0x001000000033fcf2
- (void)textInputResponderDidChange;	// IMP=0x001000000033fcec
@property(readonly, nonatomic) id <CRLCanvasImageHUDController> imageHUDController;
- (Class)recordingInspectorPaneClass;	// IMP=0x001000000033fc44
- (Class)taggedPlaceholderInfoPaneClass;	// IMP=0x001000000033fc3c
- (Class)webVideoInspectorPaneClass;	// IMP=0x001000000033fc34
- (Class)audioInspectorPaneClass;	// IMP=0x001000000033fc2c
- (Class)movieInspectorPaneClass;	// IMP=0x001000000033fc24
- (id)insertTextBoxForScribbleAtUnscaledCanvasPoint:(struct CGPoint)arg1;	// IMP=0x001000000033f561
- (id)insertedScribbleElementAtPoint:(struct CGPoint)arg1;	// IMP=0x001000000033f3cc
- (_Bool)canInsertScribbleElementAtPoint:(struct CGPoint)arg1;	// IMP=0x001000000033f37d
- (struct CGRect)rectForInsertingScribbleElements;	// IMP=0x001000000033f317
- (void)p_schedulePreventInsertScribbleElementTimer;	// IMP=0x001000000033f175
- (void)scribbleInteractionDidFinishWriting;	// IMP=0x001000000033ee3f
- (void)scribbleInteractionWillBeginWritingScribbleElementWillBeInserted:(_Bool)arg1;	// IMP=0x001000000033eda5
- (id)_scribbleCapableElementsForReps:(id)arg1 forRect:(struct CGRect)arg2;	// IMP=0x001000000033ea29
- (id)scribbleCapableElementWithIdentifier:(id)arg1;	// IMP=0x001000000033e5dd
- (_Bool)shouldIncludeObjectInScribbleCapableElements:(id)arg1;	// IMP=0x001000000033e4fd
- (id)p_allRepsForHitTestingOrdered;	// IMP=0x001000000033e357
- (id)scribbleCapableElementsForRect:(struct CGRect)arg1;	// IMP=0x001000000033e104
@property(readonly, nonatomic) _Bool wantsSystemInputAssistantForScribble;
- (id)containedScribbleElementForContainerScribbleElement:(id)arg1;	// IMP=0x001000000033e044
- (_Bool)shouldBeginScribblingAtPoint:(struct CGPoint)arg1;	// IMP=0x001000000033ddbc
- (_Bool)p_scribblePreventedRegardlessOfPoint;	// IMP=0x001000000033dd5a
@property(readonly, nonatomic) UIResponder<UITextInput> *currentEditingTextInputResponder;
@property(readonly, nonatomic) _Bool isHandlingScribbleWriting;
- (void)endPreventingDefaultPencilBehaviors;	// IMP=0x001000000033d957
- (void)beginPreventingDefaultPencilBehaviors;	// IMP=0x001000000033d946
@property(readonly, nonatomic) _Bool shouldPreventDefaultPencilBehaviors;
@property(readonly, nonatomic) _Bool shouldSelectAndScrollWithApplePencil;
@property(readonly, nonatomic) NSObject<CRLiOSPencilMediating> *pencilMediator;
- (_Bool)p_shouldShowMiniFormatterForSelectionPath:(id)arg1;	// IMP=0x001000000033d50e
- (void)updateToolbarButtons;	// IMP=0x001000000033d474
- (void)didSetDocumentToMode:(id)arg1 fromMode:(id)arg2 animated:(_Bool)arg3;	// IMP=0x001000000033d070
- (void)willSetDocumentToMode:(id)arg1 fromMode:(id)arg2 animated:(_Bool)arg3;	// IMP=0x001000000033d05e
- (void)presentMediaCompatibilityAlertWithReasons:(long long)arg1 forMediaType:(long long)arg2 forSingleMediaObject:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x001000000033cfdb
- (void)continueAsynchronousWorkOnMainThreadUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000033cfb3
- (void)endModalOperationWithToken:(id)arg1;	// IMP=0x001000000033cbb2
- (id)beginModalOperationWithPresentedLocalizedMessage:(id)arg1 progress:(id)arg2 cancelHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000033c760
- (id)beginModalOperationWithLocalizedMessage:(id)arg1 progress:(id)arg2 cancelHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000033c30e
- (void)presentErrors:(id)arg1 withLocalizedDescription:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000033c062
- (void)presentError:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x001000000033bdbc
- (id)p_willPresentError:(id)arg1;	// IMP=0x001000000033bc03
- (void)canvasZoomTrackerDidFinish:(id)arg1;	// IMP=0x001000000033bbc9
- (void)canvasZoomTrackerDidEndFinalZoomAnimation:(id)arg1;	// IMP=0x001000000033bb6f
- (void)canvasZoomTrackerWillBeginFinalZoomAnimation:(id)arg1;	// IMP=0x001000000033baff
@property(readonly, nonatomic) struct CGRect rectToIncludeWhenGrowingCanvasToFitContent;
- (void)canvasZoomTrackerDidEndViewScaleFeedback:(id)arg1;	// IMP=0x001000000033ba4a
- (void)canvasZoomTracker:(id)arg1 willUpdateViewScaleFeedbackWithScale:(double)arg2;	// IMP=0x001000000033b80e
- (void)canvasZoomTracker:(id)arg1 willBeginViewScaleFeedbackWithZoomMethod:(long long)arg2;	// IMP=0x001000000033b5ad
- (void)p_zoomWithGesture:(id)arg1;	// IMP=0x001000000033b14c
- (void)p_handleAlternateContextMenuAction:(id)arg1;	// IMP=0x001000000033abda
- (void)p_handleSingleTapGesture:(id)arg1;	// IMP=0x001000000033aaa8
- (void)p_handlePencilDown:(id)arg1;	// IMP=0x001000000033a862
@property(readonly, nonatomic) _Bool documentModeWantsToSuppressMediaReplacementKnobs;
@property(readonly, nonatomic) _Bool inMediaBrowsingMode;
- (void)addInspectorPanZoomModeGRsToArray:(id)arg1;	// IMP=0x001000000033a703
@property(readonly, nonatomic) _Bool inInspectorTextEditingMode;
@property(readonly, nonatomic) _Bool inInspectorPanZoomMode;
- (_Bool)allowGestureInRestrictedGestureMode:(id)arg1;	// IMP=0x001000000033a55f
- (_Bool)inRestrictedGestureMode;	// IMP=0x001000000033a4ce
- (void)didDismissQuickSelectViewController:(id)arg1;	// IMP=0x001000000033a347
@property(readonly, nonatomic) CRLEditorController *editorController;
@property(readonly, nonatomic) struct CGRect visibleScaledRectForCanvasUI;
- (id)i_quickSelectViewController;	// IMP=0x001000000033a284
- (void)p_leaveQuickSelectMode;	// IMP=0x0010000000339e80
- (_Bool)p_editorAllowsQuickSelect;	// IMP=0x0010000000339d52
- (_Bool)p_currentModeIsFind;	// IMP=0x0010000000339adf
- (_Bool)p_currentModeAllowsQuickSelect;	// IMP=0x0010000000339867
@property(readonly, nonatomic) _Bool isCurrentlyInQuickSelectMode;
@property(readonly, nonatomic) _Bool allowedToEnterQuickSelectMode;
- (struct CGRect)visibleCanvasRectForQuickSelectViewController:(id)arg1;	// IMP=0x0010000000339604
- (_Bool)shouldExitQuickSelectModeForQuickSelectViewController:(id)arg1;	// IMP=0x00100000003395ef
- (void)unhideQuickSelectHUDIfNecessary;	// IMP=0x00100000003395d2
- (void)temporarilyHideQuickSelectHUDIfNecessary;	// IMP=0x00100000003395b5
- (void)leaveQuickSelectModeIfNeeded;	// IMP=0x001000000033957e
- (void)enterQuickSelectMode;	// IMP=0x0010000000338ea5
- (_Bool)shouldOptOutOfUIScrollViewContentOffsetAnimation;	// IMP=0x0010000000338e9d
- (void)forceStopScrolling;	// IMP=0x0010000000338be6
- (void)unlock:(id)arg1;	// IMP=0x0010000000338ad2
- (void)cut:(id)arg1;	// IMP=0x0010000000338a44
- (void)validateCommand:(id)arg1;	// IMP=0x00000000003388b2
- (_Bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x00100000003386e8
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x001000000033860a
- (_Bool)canBecomeFirstResponder;	// IMP=0x00100000003385f6
- (_Bool)crl_representsPhysicalKeyboard;	// IMP=0x00100000003385ee
- (_Bool)contextMenuPositionShouldUpdateForContextMenuController:(id)arg1;	// IMP=0x0010000000338350
- (void)contextMenuDidHideForContextMenuController:(id)arg1;	// IMP=0x0010000000338106
@property(readonly, nonatomic) _TtC8Freeform21CRLEditingCoordinator *editingCoordinator;
- (id)itemsToAddToEditMenuForRep:(id)arg1;	// IMP=0x00100000003380ae
- (void)hideEditMenu;	// IMP=0x0010000000338026
- (void)showEditUIForSelectionPath:(id)arg1;	// IMP=0x0010000000337f80
- (void)showDefaultEditUIForCurrentSelection;	// IMP=0x0010000000337e02
- (void)toggleDefaultEditUIForCurrentSelection;	// IMP=0x0010000000337cbc
- (void)toggleEditMenuForCurrentSelection;	// IMP=0x0010000000337c00
- (void)showEditMenuForTapOnRep:(id)arg1;	// IMP=0x0010000000337b6d
- (void)p_buildMenuItems:(id)arg1 forSelectionPath:(id)arg2;	// IMP=0x0010000000337521
- (void)p_buildMenuTitles:(id)arg1 forSelectionPath:(id)arg2;	// IMP=0x0010000000336f7d
- (struct CGRect)p_targetRectForMenuControllerPositionForSelectionPath:(id)arg1;	// IMP=0x0010000000336c1c
- (void)showEditMenuForSelectionPath:(id)arg1;	// IMP=0x001000000033663d
- (struct CGRect)targetRectForEditMenu:(id)arg1;	// IMP=0x0010000000335c05
- (_Bool)canEditRepWithDragOperation:(id)arg1;	// IMP=0x0010000000335bfd
- (_Bool)shouldAllowDynamicInsertForDragInfo:(id)arg1;	// IMP=0x0010000000335bf5
- (_Bool)shouldAllowDragOperationForDragInfo:(id)arg1;	// IMP=0x0010000000335b30
- (_Bool)canInsertBoardItemsFromDragOperationForDragInfo:(id)arg1;	// IMP=0x00100000003359ee
- (void)p_setDragLiftDelay:(double)arg1;	// IMP=0x00100000003358dd
@property(readonly, nonatomic) _Bool allowsSystemDragSession;
- (void)dragSessionWillBegin;	// IMP=0x001000000033575a
- (id)modelContainerForLocalDragContext;	// IMP=0x001000000033570a
- (id)newDragAndDropController;	// IMP=0x00100000003356a3
- (id)pointerInteractionDelegate;	// IMP=0x0010000000335615
- (id)contextMenuInteractionDelegate;	// IMP=0x0010000000335587
@property(readonly, nonatomic) CRLiOSCanvasDragInteractionDelegate *dragInteractionDelegate;
@property(readonly, nonatomic) CRLiOSCanvasDropInteractionDelegate *dropInteractionDelegate;
@property(readonly, nonatomic) _Bool canReceiveSystemDrops;
@property(readonly, nonatomic) _Bool canOriginateSystemDrags;
- (id)viewForGestureRecognizer:(id)arg1;	// IMP=0x001000000033539a
- (_Bool)allowTouchOutsideCanvasViewAtPoint:(struct CGPoint)arg1 forGesture:(id)arg2;	// IMP=0x00100000003352ce
- (void)viewWillTransitionToSize:(struct CGSize)arg1 withTransitionCoordinator:(id)arg2;	// IMP=0x0010000000334e73
- (void)didStopCountingTouches:(id)arg1;	// IMP=0x0010000000334a42
- (_Bool)p_shouldIgnoreKeyboardInputForTouchType:(long long)arg1 atSomeTouchPoint:(struct CGPoint)arg2;	// IMP=0x0010000000334729
- (void)didStartCountingTouches:(id)arg1 touchType:(long long)arg2 atSomeTouchPoint:(struct CGPoint)arg3;	// IMP=0x00100000003342b5
- (id)p_reasonStringForIgnoringKeyboardInputWithAllTouchesDoneGestureRecognizer:(id)arg1;	// IMP=0x0010000000334246
- (void)p_allTouchesDone:(id)arg1;	// IMP=0x0010000000334180
- (_Bool)i_isCurrentlyTrackingTouch;	// IMP=0x0010000000334170
- (_Bool)shouldIgnoreTextGesture:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x0010000000333fb1
- (id)appSpecificGestureRecognizersAllowedDuringFreehandDrawing;	// IMP=0x0010000000333f98
- (_Bool)shouldSelectAndShowEditMenuOnFirstTapForRep:(id)arg1;	// IMP=0x0010000000333f90
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;	// IMP=0x0010000000333d18
- (void)p_handleTapForEditMenu:(id)arg1;	// IMP=0x00100000003337be
- (_Bool)handleDoubleTapAtPoint:(struct CGPoint)arg1 withRecognizer:(id)arg2;	// IMP=0x00100000003333e3
- (void)handleDoubleTap:(id)arg1;	// IMP=0x00100000003332cb
- (_Bool)handleSingleTapAtPoint:(struct CGPoint)arg1 withRecognizer:(id)arg2;	// IMP=0x0010000000332d05
- (void)i_updateZoomGestureRecognizer;	// IMP=0x0010000000332c85
- (void)resetGesturesForContextSwitch;	// IMP=0x0010000000332a10
- (void)setUpCommonGestureAllowedTouchTypes;	// IMP=0x00100000003327f4
- (id)gesturesThatImmediateMarqueeShouldRequireToFail;	// IMP=0x0010000000332791
- (_Bool)disallowRectangularMarqueeOperationAtUnscaledPoint:(struct CGPoint)arg1;	// IMP=0x0010000000332713
@property(readonly, nonatomic) NSArray *gesturesToAdjustIfStylusShouldSelectAndScroll;
- (void)p_pencilShouldSelectAndScrollPreferenceDidChange;	// IMP=0x00100000003325fc
- (void)p_handleHoverGesture:(id)arg1;	// IMP=0x00100000003321f7
- (_Bool)i_allowCanvasInteraction:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x0010000000332128
@property(readonly, nonatomic) NSArray *passthroughViewsToAllowCanvasInteractionDuringPopoverPresentation;
- (_Bool)touchHitsCanvasViewAtPoint:(struct CGPoint)arg1;	// IMP=0x0010000000331fe1
- (void)p_setUpWPGestureRecognizers;	// IMP=0x0010000000331827
- (void)modifyGesturesUsedForStylusAndIndirectPointerAddingTouchType:(long long)arg1;	// IMP=0x0010000000331612
- (id)gesturesSupportingStylusAndIndirectPointer;	// IMP=0x0010000000331507
- (void)setUpGestureRecognizers;	// IMP=0x0010000000330ab3
- (_Bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;	// IMP=0x00100000003309c1
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;	// IMP=0x0010000000330383
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x001000000033037b
@property(readonly, nonatomic) NSArray *commonGestureRecognizers;
- (_Bool)canvasSubview:(id)arg1 shouldHandleEventAtBoundsPoint:(struct CGPoint)arg2;	// IMP=0x0010000000330039
- (id)hitKnobWithTouch:(id)arg1 returningRep:(id *)arg2;	// IMP=0x001000000032fd33
- (id)hitRepWithTouch:(id)arg1;	// IMP=0x001000000032fa64
- (void)p_keyWindowDidChange:(id)arg1;	// IMP=0x001000000032f867
- (void)p_applicationDidBecomeActive:(id)arg1;	// IMP=0x001000000032f6df
- (void)p_willEnterForeground:(id)arg1;	// IMP=0x001000000032f557
- (void)p_accessibilityInvertColorsDidChange:(id)arg1;	// IMP=0x001000000032f51a
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x001000000032f41a
- (void)selectionPathDidChangeFromSelectionPath:(id)arg1 toSelectionPath:(id)arg2;	// IMP=0x001000000032f414
- (void)removeCommonObservers;	// IMP=0x001000000032f2e7
- (void)addCommonObservers;	// IMP=0x001000000032f1ce
- (void)willUpdateLayerTree;	// IMP=0x001000000032f188
@property(readonly, nonatomic) _Bool isInFocusedContainer;
@property(readonly, nonatomic) id <CRLUIKitInteractionHost> asUIKitHost;
@property(readonly, nonatomic) CRLiOSCanvasViewController *asiOSCVC;
@property(readonly, nonatomic) CALayer *layer;
@property(readonly, nonatomic) CRLCanvasView *canvasView;
@property(readonly, nonatomic) CRLCanvasLayer *canvasLayer;
- (void)setView:(id)arg1;	// IMP=0x001000000032eeff
- (void)viewWillDisappear:(_Bool)arg1;	// IMP=0x001000000032ee75
- (void)viewWillAppear:(_Bool)arg1;	// IMP=0x001000000032edb3
- (void)viewDidLoad;	// IMP=0x001000000032e302
- (void)teardown;	// IMP=0x001000000032e1ad
- (void)dealloc;	// IMP=0x001000000032dfb2
- (void)forwardInvocation:(id)arg1;	// IMP=0x001000000032df40
- (_Bool)respondsToSelector:(SEL)arg1;	// IMP=0x001000000032df2c
- (_Bool)respondsToSelector:(SEL)arg1 withSender:(id)arg2;	// IMP=0x001000000032de72
- (id)methodSignatureForSelector:(SEL)arg1;	// IMP=0x001000000032dd49
- (void)p_setupWillEnterForegroundObserver;	// IMP=0x001000000032db27
- (void)viewDidAppear:(_Bool)arg1;	// IMP=0x001000000032dac8
- (id)backgroundColorForMagnifier;	// IMP=0x001000000032d9f0
- (_Bool)shouldHideCanvasLayerInMagnifier;	// IMP=0x001000000032d9e8
- (id)initWithInteractiveCanvasController:(id)arg1;	// IMP=0x001000000032d974
- (id)initWithCoder:(id)arg1;	// IMP=0x001000000032d930
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;	// IMP=0x001000000032d89c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) _Bool isViewLoaded;
@property(readonly) Class superclass;
@property(readonly, nonatomic) NSUndoManager *undoManager;

@end

