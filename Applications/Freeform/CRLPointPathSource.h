//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@interface CRLPointPathSource
{
    unsigned long long mType;	// 8 = 0x8
    struct CGPoint mPoint;	// 16 = 0x10
    struct CGSize mNaturalSize;	// 32 = 0x20
}

+ (id)pathSourceWithType:(unsigned long long)arg1 point:(struct CGPoint)arg2 naturalSize:(struct CGSize)arg3;	// IMP=0x002000000035431b
+ (id)plusWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x0010000000354301
+ (id)starWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x00100000003542e7
+ (id)doubleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x00100000003542cd
+ (id)leftSingleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x00100000003542b6
+ (id)rightSingleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x001000000035429c
- (void)setNaturalSize:(struct CGSize)arg1;	// IMP=0x0020000000357170
- (struct CGSize)naturalSize;	// IMP=0x0010000000357158
@property(nonatomic) struct CGPoint point; // @synthesize point=mPoint;
@property(nonatomic) unsigned long long type; // @synthesize type=mType;
- (id)crlaxCommandForAccessibilityIncrementDecrement:(_Bool)arg1 forKnobTag:(unsigned long long)arg2 usingLayout:(id)arg3 andCanvasController:(id)arg4;	// IMP=0x0010000000356f70
- (_Bool)crlaxOffersMoveActionsForKnobTag:(unsigned long long)arg1;	// IMP=0x0010000000356f49
- (_Bool)crlaxIsAdjustableForKnobTag:(unsigned long long)arg1;	// IMP=0x0010000000356f2f
- (id)crlaxUserInputLabelForKnobTag:(unsigned long long)arg1;	// IMP=0x0010000000356e81
- (id)crlaxValueForKnobTag:(unsigned long long)arg1;	// IMP=0x0010000000356def
- (id)crlaxLabelComponentForKnobTag:(unsigned long long)arg1;	// IMP=0x0010000000356c85
- (id)inferredAccessibilityDescription;	// IMP=0x0010000000356b54
- (id)inferredAccessibilityDescriptionNoShapeNames;	// IMP=0x0010000000356ae0
- (_Bool)p_isFlippedDoubleArrow;	// IMP=0x0010000000356abc
- (_Bool)p_isRightFacingArrow;	// IMP=0x0010000000356a95
- (struct CGPoint)p_getControlKnobPointForPlus;	// IMP=0x0010000000356a54
- (void)p_setControlKnobPointForPlus:(struct CGPoint)arg1;	// IMP=0x00100000003569b6
- (struct CGPoint)p_getControlKnobPointForStarInnerRadius;	// IMP=0x00100000003568c2
- (void)p_setControlKnobPointForStarInnerRadius:(struct CGPoint)arg1;	// IMP=0x00100000003567e1
- (struct CGPoint)p_getControlKnobPointForStarPoints;	// IMP=0x00100000003566e4
- (void)p_setControlKnobPointForStarPoints:(struct CGPoint)arg1;	// IMP=0x0010000000356547
- (struct CGPoint)p_getControlKnobPointForArrow;	// IMP=0x00100000003564a7
- (void)p_setControlKnobPointForArrow:(struct CGPoint)arg1;	// IMP=0x00100000003563ee
- (const struct CGPath *)p_newPlusPath;	// IMP=0x0010000000356239
- (const struct CGPath *)p_newStarPath;	// IMP=0x0010000000356029
- (const struct CGPath *)p_newArrowPath;	// IMP=0x0010000000355b7d
- (id)name;	// IMP=0x0010000000355a4c
- (_Bool)isCircular;	// IMP=0x0010000000355a44
- (_Bool)isRectangular;	// IMP=0x0010000000355a3c
- (id)bezierPathWithoutFlips;	// IMP=0x00100000003559a4
- (const struct CGPath *)newFeedbackPathForKnob:(unsigned long long)arg1;	// IMP=0x001000000035585d
- (id)getFeedbackStringForKnob:(unsigned long long)arg1;	// IMP=0x0010000000355723
- (void)setControlKnobPosition:(unsigned long long)arg1 toPoint:(struct CGPoint)arg2;	// IMP=0x001000000035568d
- (struct CGPoint)getControlKnobPosition:(unsigned long long)arg1;	// IMP=0x0010000000355618
@property(readonly) unsigned long long numberOfControlKnobs;
- (void)scaleToNaturalSize:(struct CGSize)arg1;	// IMP=0x001000000035556c
@property(readonly, nonatomic) double minArrowHead;
@property(readonly, nonatomic) double maxArrowHead;
@property(readonly, nonatomic) double arrowHead;
@property(readonly, nonatomic) double minArrowIndent;
@property(readonly, nonatomic) double maxArrowIndent;
@property(readonly, nonatomic) double arrowIndent;
- (_Bool)p_isArrowType;	// IMP=0x0010000000354d21
@property(readonly, nonatomic) double minStarRadius;
@property(readonly, nonatomic) double maxStarRadius;
@property(readonly, nonatomic) double starRadius;
@property(readonly, nonatomic) unsigned long long minStarPoints;
@property(readonly, nonatomic) unsigned long long maxStarPoints;
@property(readonly, nonatomic) unsigned long long starPoints;
@property(readonly, nonatomic) struct CGPoint maxPointValue;
@property(readonly, nonatomic) struct CGPoint minPointValue;
- (id)description;	// IMP=0x0010000000354679
- (unsigned long long)hash;	// IMP=0x0010000000354636
- (_Bool)isEqual:(id)arg1;	// IMP=0x00100000003544d9
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x0010000000354442
- (id)init;	// IMP=0x0010000000354415
- (id)initWithType:(unsigned long long)arg1 point:(struct CGPoint)arg2 naturalSize:(struct CGSize)arg3;	// IMP=0x0010000000354375

// Remaining properties
@property(readonly, nonatomic) struct CGPoint fixedPointForControlKnobChange;

@end

