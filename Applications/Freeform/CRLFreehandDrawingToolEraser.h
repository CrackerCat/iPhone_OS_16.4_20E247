//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CRLBezierHitTester, CRLBezierPath, CRLFreehandDrawingPathCreator, CRLImage, MISSING_TYPE, NSArray, NSHashTable, NSMapTable, NSMutableArray, NSString;

@interface CRLFreehandDrawingToolEraser
{
    MISSING_TYPE *_currentUnscaledEraserPoint;	// 8 = 0x8
    CRLFreehandDrawingPathCreator *_strokePathCreator;	// 24 = 0x18
    CRLFreehandDrawingPathCreator *_fillPathCreator;	// 32 = 0x20
    CRLBezierHitTester *_strokeHitTester;	// 40 = 0x28
    CRLBezierHitTester *_fillHitTester;	// 48 = 0x30
    NSMutableArray *_allHitTesterPathsZOrdered;	// 56 = 0x38
    NSMapTable *_shapeLayoutsForHitTesterPaths;	// 64 = 0x40
    NSMapTable *_currentPathsForHitTesterPaths;	// 72 = 0x48
    NSMapTable *_patternOffsetsBySubpathForHitTesterPaths;	// 80 = 0x50
    NSHashTable *_hitTesterPathsNeedingFinalizationAtEnd;	// 88 = 0x58
    double _widthOfThickestStrokePossiblyBeingErased;	// 96 = 0x60
    CRLBezierPath *_unscaledStrokeEraserPathToCommit;	// 104 = 0x68
    struct CGImage *_committedFillMaskImageForErasingPositionedInVisibleCanvasRect;	// 112 = 0x70
    struct CGContext *_committedFillEraserPathCtx;	// 120 = 0x78
    CRLBezierPath *_unscaledFillEraserPathToCommit;	// 128 = 0x80
    CRLImage *_fillMaskImageForErasing;	// 136 = 0x88
    struct CGContext *_fillEraserPathCtx;	// 144 = 0x90
    struct CGRect _lastDirtyRectForUncommittedFillMask;	// 152 = 0x98
    _Bool _wholeObjectEraser;	// 184 = 0xb8
    double _scaledWidthForSlicingEraser;	// 192 = 0xc0
}

- (void).cxx_destruct;	// IMP=0x00200000004c2b13
@property(nonatomic, getter=isWholeObjectEraser) _Bool wholeObjectEraser; // @synthesize wholeObjectEraser=_wholeObjectEraser;
@property(nonatomic) double scaledWidthForSlicingEraser; // @synthesize scaledWidthForSlicingEraser=_scaledWidthForSlicingEraser;
- (long long)p_breakApartFilledShapeIfPossible:(id)arg1 withDesiredGeometry:(id)arg2 bezierPath:(id)arg3 previousZOrderOffset:(long long)arg4;	// IMP=0x00100000004c2a29
- (long long)p_breakApartOpenShapeIfPossible:(id)arg1 withDesiredGeometry:(id)arg2 bezierPath:(id)arg3 strokePatternOffsetArray:(id)arg4 previousZOrderOffset:(long long)arg5;	// IMP=0x00100000004c2942
- (long long)p_breakApartShape:(id)arg1 withGeometry:(id)arg2 subpaths:(id)arg3 strokePatternOffsetArray:(id)arg4 previousZOrderOffset:(long long)arg5;	// IMP=0x00100000004c1ebf
- (void)p_updatePathsFromPathCreatorsHidingShapesForWholeObjectAndDirtyingRectsForSlicing;	// IMP=0x00100000004c0c26
- (void)p_updateFillMaskImage;	// IMP=0x00100000004c08c4
- (struct CGSize)p_maskImageSize;	// IMP=0x00100000004c07cd
- (struct CGRect)p_drawPath:(id)arg1 inContext:(struct CGContext *)arg2 drawingCommittedImageBehind:(_Bool)arg3 additionalAlreadyOutsetUnscaledDirtyRect:(struct CGRect)arg4;	// IMP=0x00100000004c03e0
- (void)p_sliceAndDynamicallyUpdateStrokePathsForSlicingEraser;	// IMP=0x00100000004bee16
- (id)p_copyOfPathCreatorPathCommittingAllAvailablePoints:(id)arg1 optionallyAdditionallyCommittingIntoAdditionalPath:(id)arg2;	// IMP=0x00100000004beafa
- (double)p_unscaledEraserDiameter;	// IMP=0x00100000004bea8c
@property(readonly, nonatomic) double currentScaledEraserDiameter;
- (id)maskImageForErasing;	// IMP=0x00100000004bea16
- (struct CGRect)unscaledRectForMaskImageForErasing;	// IMP=0x00100000004be807
@property(readonly, nonatomic) NSArray *decoratorOverlayRenderables;
- (unsigned long long)type;	// IMP=0x00100000004be3ce
- (_Bool)finalizeAndReset;	// IMP=0x00100000004bce01
- (void)doWorkBeforeCanvasLayout;	// IMP=0x00100000004bcd31
- (void)performActionWithInputPoint:(id)arg1 isInitalPoint:(_Bool)arg2 isFinalPoint:(_Bool)arg3;	// IMP=0x00100000004bbc66
- (id)initWithInteractiveCanvasController:(id)arg1 scaledWidthForSlicingEraser:(double)arg2 wholeObject:(_Bool)arg3;	// IMP=0x00100000004bb8cc

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

