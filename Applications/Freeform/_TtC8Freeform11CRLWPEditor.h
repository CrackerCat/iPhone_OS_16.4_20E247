//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CRLCanvasAutoscroll, CRLEditorController, CRLFidgetResolver, CRLInteractiveCanvasController, CRLWPEditorHelper, CRLWPRep, CRLWPSelection, CRLWPTextKnobTracker, MISSING_TYPE, NSArray, NSDictionary, NSMutableDictionary, NSSet, NSString, UIInputViewController, _TtC8Freeform11CRLWPLayout, _TtC8Freeform12CRLWPStorage, _TtC8Freeform14CRLWPShapeItem, _TtC8Freeform19CRLWPCharacterStyle, _TtC8Freeform21CRLEditingCoordinator;
@protocol CRLCanvasLayoutManipulatingTracker, CRLSearchReference, CRLWPTextMagnifier, CRLWPTextSource, _TtP8Freeform16CRLTextSelecting_, _TtP8Freeform20CRLKeyInputReceiving_, _TtP8Freeform21CRLTextInputReceiving_;

@interface _TtC8Freeform11CRLWPEditor : NSObject
{
    MISSING_TYPE *insertionStyle;	// 8 = 0x8
    MISSING_TYPE *markedTextHelper;	// 16 = 0x10
    MISSING_TYPE *dictationAndAutocorrectionCoordinator;	// 24 = 0x18
    MISSING_TYPE *autocorrectionKeys;	// 32 = 0x20
    MISSING_TYPE *disableSmartQuotes;	// 40 = 0x28
    MISSING_TYPE *enclosingShape;	// 48 = 0x30
    MISSING_TYPE *icc;	// 56 = 0x38
    MISSING_TYPE *editingCoordinator;	// 64 = 0x40
    MISSING_TYPE *wantsVisibleKeyboard;	// 72 = 0x48
    MISSING_TYPE *endTextInputWhenKeyboardHides;	// 73 = 0x49
    MISSING_TYPE *_textSelectionDelegate;	// 80 = 0x50
    MISSING_TYPE *editorController;	// 88 = 0x58
    MISSING_TYPE *$__lazy_storage_$_textEditingInputAccessoryStateManager;	// 96 = 0x60
    MISSING_TYPE *selectionBeingSetFromGestures;	// 104 = 0x68
    MISSING_TYPE *editorHelper;	// 112 = 0x70
    MISSING_TYPE *lastCursor;	// 120 = 0x78
    MISSING_TYPE *$__lazy_storage_$_editMenu;	// 128 = 0x80
    MISSING_TYPE *baseWritingDirectionForInsertion;	// 136 = 0x88
    MISSING_TYPE *autoscroll;	// 152 = 0x98
    MISSING_TYPE *lastKeyDownTime;	// 160 = 0xa0
    MISSING_TYPE *isUserTypingAhead;	// 168 = 0xa8
    MISSING_TYPE *suppressBreaks;	// 169 = 0xa9
    MISSING_TYPE *suppressTabs;	// 170 = 0xaa
    MISSING_TYPE *editableTextSelectionForceGestureInProgress;	// 171 = 0xab
    MISSING_TYPE *initialPressTextSelectionGranularity;	// 172 = 0xac
    MISSING_TYPE *selectionSetFromSingleTap;	// 173 = 0xad
    MISSING_TYPE *listDragAnimator;	// 176 = 0xb0
    MISSING_TYPE *isBecomingActive;	// 184 = 0xb8
    MISSING_TYPE *shouldPreventQuickSelect;	// 185 = 0xb9
    MISSING_TYPE *gestureBeganWhenEditingBegan;	// 186 = 0xba
    MISSING_TYPE *readyToEnd;	// 187 = 0xbb
    MISSING_TYPE *shouldQueueBeginScribbleMode;	// 188 = 0xbc
    MISSING_TYPE *suppressEditMenuForIndirectGesture;	// 189 = 0xbd
    MISSING_TYPE *mostRecentGestureKind;	// 192 = 0xc0
    MISSING_TYPE *fidgetResolver;	// 200 = 0xc8
    MISSING_TYPE *shouldShowEditMenuForInsertionPoint;	// 208 = 0xd0
    MISSING_TYPE *coalescingText;	// 209 = 0xd1
    MISSING_TYPE *dictationInterpretations;	// 216 = 0xd8
    MISSING_TYPE *ignoreFutureImmediatePresses;	// 224 = 0xe0
    MISSING_TYPE *tapInfo;	// 232 = 0xe8
    MISSING_TYPE *shouldUseModernTextGestures;	// 240 = 0xf0
    MISSING_TYPE *magnifier;	// 248 = 0xf8
    MISSING_TYPE *knobTrackingDragPoint;	// 256 = 0x100
    MISSING_TYPE *firstTapUnscaledPoint;	// 272 = 0x110
    MISSING_TYPE *knobTracking;	// 288 = 0x120
    MISSING_TYPE *knobTracker;	// 296 = 0x128
    MISSING_TYPE *knobTag;	// 304 = 0x130
    MISSING_TYPE *knobTrackingTapCount;	// 312 = 0x138
    MISSING_TYPE *wantsParagraphMode;	// 320 = 0x140
    MISSING_TYPE *originalSelectionRange;	// 328 = 0x148
    MISSING_TYPE *knobToTouchOffset;	// 344 = 0x158
    MISSING_TYPE *twoFingerPanGestureInProgress;	// 360 = 0x168
    MISSING_TYPE *canIgnoreEvent;	// 361 = 0x169
    MISSING_TYPE *disallowEditingOfTextString;	// 362 = 0x16a
    MISSING_TYPE *isDragAndDropBeginning;	// 363 = 0x16b
    MISSING_TYPE *dragRep;	// 368 = 0x170
}

+ (_Bool)canEditTextIn:(id)arg1 using:(id)arg2;	// IMP=0x0040000000794b40
- (void).cxx_destruct;	// IMP=0x00200000007a1f10
- (id)init;	// IMP=0x00100000007a1eb0
@property(nonatomic, retain) CRLWPRep *dragRep; // @synthesize dragRep;
@property(nonatomic) _Bool isDragAndDropBeginning; // @synthesize isDragAndDropBeginning;
@property(nonatomic) _Bool disallowEditingOfTextString; // @synthesize disallowEditingOfTextString;
@property(nonatomic) _Bool canIgnoreEvent; // @synthesize canIgnoreEvent;
@property(nonatomic) _Bool twoFingerPanGestureInProgress; // @synthesize twoFingerPanGestureInProgress;
@property(nonatomic, readonly) NSSet *editingReps;
- (_Bool)wantsParagraphModeWithSelection:(id)arg1;	// IMP=0x00100000007a1c30
@property(nonatomic) struct CGPoint knobToTouchOffset; // @synthesize knobToTouchOffset;
@property(nonatomic) struct _NSRange originalSelectionRange; // @synthesize originalSelectionRange;
@property(nonatomic, readonly) _Bool editMenuIsVisible;
@property(nonatomic) _Bool wantsParagraphMode; // @synthesize wantsParagraphMode;
@property(nonatomic) long long knobTrackingTapCount; // @synthesize knobTrackingTapCount;
@property(nonatomic) unsigned long long knobTag; // @synthesize knobTag;
@property(nonatomic, retain) CRLWPTextKnobTracker *knobTracker; // @synthesize knobTracker;
@property(nonatomic) _Bool knobTracking; // @synthesize knobTracking;
@property(nonatomic) struct CGPoint firstTapUnscaledPoint; // @synthesize firstTapUnscaledPoint;
@property(nonatomic) struct CGPoint knobTrackingDragPoint; // @synthesize knobTrackingDragPoint;
@property(nonatomic, retain) id <CRLWPTextMagnifier> magnifier; // @synthesize magnifier;
@property(nonatomic) _Bool shouldUseModernTextGestures; // @synthesize shouldUseModernTextGestures;
@property(nonatomic, retain) NSDictionary *tapInfo; // @synthesize tapInfo;
- (_Bool)isSelectionPlaceHolderTextWithSelection:(id)arg1;	// IMP=0x00100000007a18c0
@property(nonatomic) _Bool ignoreFutureImmediatePresses; // @synthesize ignoreFutureImmediatePresses;
@property(nonatomic, retain) NSMutableDictionary *dictationInterpretations; // @synthesize dictationInterpretations;
@property(nonatomic) _Bool coalescingText; // @synthesize coalescingText;
@property(nonatomic) _Bool shouldShowEditMenuForInsertionPoint; // @synthesize shouldShowEditMenuForInsertionPoint;
@property(nonatomic, retain) CRLFidgetResolver *fidgetResolver; // @synthesize fidgetResolver;
@property(nonatomic, retain) NSString *mostRecentGestureKind; // @synthesize mostRecentGestureKind;
@property(nonatomic) _Bool suppressEditMenuForIndirectGesture; // @synthesize suppressEditMenuForIndirectGesture;
@property(nonatomic) _Bool shouldQueueBeginScribbleMode; // @synthesize shouldQueueBeginScribbleMode;
@property(nonatomic) _Bool readyToEnd; // @synthesize readyToEnd;
@property(nonatomic) _Bool gestureBeganWhenEditingBegan; // @synthesize gestureBeganWhenEditingBegan;
@property(nonatomic) _Bool shouldPreventQuickSelect; // @synthesize shouldPreventQuickSelect;
- (void)didBecomeTextInputEditor;	// IMP=0x00100000007a16a0
- (void)didResignTextInputEditor;	// IMP=0x00100000007a14e0
- (void)willResignTextInputEditor;	// IMP=0x00100000007a13f0
@property(nonatomic) _Bool isBecomingActive; // @synthesize isBecomingActive;
@property(nonatomic, retain) NSObject *listDragAnimator; // @synthesize listDragAnimator;
@property(nonatomic) _Bool selectionSetFromSingleTap; // @synthesize selectionSetFromSingleTap;
@property(nonatomic) _Bool initialPressTextSelectionGranularity; // @synthesize initialPressTextSelectionGranularity;
@property(nonatomic) _Bool editableTextSelectionForceGestureInProgress; // @synthesize editableTextSelectionForceGestureInProgress;
@property(nonatomic) _Bool suppressTabs; // @synthesize suppressTabs;
@property(nonatomic) _Bool suppressBreaks; // @synthesize suppressBreaks;
- (_Bool)wantsCaret;	// IMP=0x00100000007a1100
- (_Bool)shouldShowSelectionAndCaret;	// IMP=0x00100000007a10f0
@property(nonatomic) _Bool isUserTypingAhead; // @synthesize isUserTypingAhead;
@property(nonatomic) double lastKeyDownTime; // @synthesize lastKeyDownTime;
@property(nonatomic, retain) CRLCanvasAutoscroll *autoscroll; // @synthesize autoscroll;
- (void)setBaseWritingDirection:(long long)arg1 forParagraphsWithRange:(id)arg2;	// IMP=0x00100000007a0fe0
- (long long)baseWritingDirectionFor:(id)arg1;	// IMP=0x00100000007a0560
- (_Bool)canSetWritingDirection:(long long)arg1;	// IMP=0x00100000007a00b0
- (void)toggleListEntry:(id)arg1;	// IMP=0x001000000079fce0
- (void)removeHyperlink:(id)arg1;	// IMP=0x001000000079fac0
- (id)autocorrectionRangesToDisplayInRange:(struct _NSRange)arg1;	// IMP=0x001000000079f8a0
- (id)dictationAndAutocorrectionsFor:(long long)arg1 effectiveRange:(struct _NSRange *)arg2;	// IMP=0x001000000079f0a0
- (void)acceptAutoCorrectionBefore:(id)arg1;	// IMP=0x001000000079f090
- (void)hideEditMenu;	// IMP=0x001000000079f060
- (struct CGRect)targetRectForEditMenu;	// IMP=0x001000000079eee0
- (void)showEditMenu;	// IMP=0x001000000079edb0
- (void)alignJustify:(id)arg1;	// IMP=0x001000000079e6a0
- (void)alignMiddle:(id)arg1;	// IMP=0x001000000079e680
- (void)alignBottom:(id)arg1;	// IMP=0x001000000079e660
- (void)alignTop:(id)arg1;	// IMP=0x001000000079e640
- (void)alignJustified:(id)arg1;	// IMP=0x001000000079e430
- (void)alignCenter:(id)arg1;	// IMP=0x001000000079e210
- (void)alignRight:(id)arg1;	// IMP=0x001000000079e1e0
- (void)alignLeft:(id)arg1;	// IMP=0x001000000079e1b0
- (void)toggleStrikethrough:(id)arg1;	// IMP=0x001000000079e0b0
- (void)toggleUnderline:(id)arg1;	// IMP=0x001000000079e090
- (void)toggleItalics:(id)arg1;	// IMP=0x001000000079e070
- (void)toggleBoldface:(id)arg1;	// IMP=0x001000000079e050
- (void)decreaseFontSizeByOne:(id)arg1;	// IMP=0x001000000079dc30
- (void)increaseFontSizeByOne:(id)arg1;	// IMP=0x001000000079dc10
- (_Bool)wantsToInterceptDeleteEvents;	// IMP=0x001000000079d360
- (void)deleteForward:(id)arg1;	// IMP=0x001000000079d340
- (void)deleteBackward:(id)arg1;	// IMP=0x001000000079d110
- (void)pasteStyle:(id)arg1;	// IMP=0x001000000079c8f0
- (void)copyStyle:(id)arg1;	// IMP=0x001000000079c490
- (void)translate:(id)arg1;	// IMP=0x001000000079c110
- (void)lookUpTextAtRange:(struct _NSRange)arg1;	// IMP=0x001000000079b830
- (void)lookUp:(id)arg1;	// IMP=0x001000000079b050
- (void)replaceAction:(id)arg1;	// IMP=0x001000000079afb0
- (void)toggleBaseWritingDirection:(id)arg1;	// IMP=0x001000000079add0
- (void)selectAllMenuAction:(id)arg1;	// IMP=0x001000000079ad30
- (void)selectMenuAction:(id)arg1;	// IMP=0x001000000079ab40
- (void)addContextualMenuElementsToArray:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x0010000000799d90
- (id)cursorAtPoint:(struct CGPoint)arg1 withCursorPlatformObject:(id)arg2;	// IMP=0x0010000000799d10
- (void)moveLeftAndModifySelection:(id)arg1;	// IMP=0x0010000000799870
- (void)moveRightAndModifySelection:(id)arg1;	// IMP=0x0010000000799830
- (void)moveUpAndModifySelection:(id)arg1;	// IMP=0x00100000007997f0
- (void)moveDownAndModifySelection:(id)arg1;	// IMP=0x00100000007996e0
@property(nonatomic, readonly) CRLWPEditorHelper *editorHelper; // @synthesize editorHelper;
@property(nonatomic, readonly) _Bool canMutateTextStorage;
- (void)makeTextWritingDirectionNatural:(id)arg1;	// IMP=0x0010000000799320
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;	// IMP=0x0010000000799300
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;	// IMP=0x00100000007992e0
- (void)makeBaseWritingDirectionNatural:(id)arg1;	// IMP=0x00100000007992c0
- (void)makeBaseWritingDirectionRightToLeft:(id)arg1;	// IMP=0x0010000000799220
- (void)makeBaseWritingDirectionLeftToRight:(id)arg1;	// IMP=0x0010000000799200
- (long long)canPerformEditorAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x0010000000799180
- (void)cutTo:(id)arg1 nativeOnly:(_Bool)arg2 sender:(id)arg3;	// IMP=0x0010000000798390
- (void)cut:(id)arg1;	// IMP=0x0010000000797f90
- (void)pasteWithItemSource:(id)arg1 selection:(id)arg2 sender:(id)arg3 selectRange:(long long)arg4 dragBlock:(CDUnknownBlockType)arg5;	// IMP=0x0010000000796f20
- (void)pasteFromItemSource:(id)arg1 forceMatchStyle:(_Bool)arg2;	// IMP=0x0010000000796ed0
- (void)pasteAsPlainText:(id)arg1;	// IMP=0x0010000000796d60
- (void)paste:(id)arg1;	// IMP=0x0010000000796bb0
- (_Bool)canPasteWithItemSource:(id)arg1 selection:(id)arg2 sender:(id)arg3;	// IMP=0x0010000000796ae0
- (void)copy:(id)arg1;	// IMP=0x0010000000796880
- (void)willResignCurrentEditor;	// IMP=0x0010000000796850
- (void)didBecomeCurrentEditorForEditorController:(id)arg1;	// IMP=0x0010000000796670
@property(nonatomic) _Bool selectionBeingSetFromGestures; // @synthesize selectionBeingSetFromGestures;
- (void)selectionDidChangeFromSelection:(id)arg1 toSelection:(id)arg2 withFlags:(unsigned long long)arg3;	// IMP=0x00100000007965d0
- (id)selectionWillChangeFromSelection:(id)arg1 toSelection:(id)arg2 withFlags:(unsigned long long)arg3 inSelectionPath:(id)arg4 withNewEditors:(id)arg5;	// IMP=0x0010000000795cc0
- (id)nextEditorForSelection:(id)arg1 withNewEditorStack:(id)arg2 selectionPath:(id)arg3;	// IMP=0x0010000000795b90
- (_Bool)shouldRemainOnEditorStackForSelection:(id)arg1 inSelectionPath:(id)arg2 withNewEditors:(id)arg3;	// IMP=0x0010000000795b10
- (_Bool)shouldSuppressMiniFormatter;	// IMP=0x0010000000795b00
@property(nonatomic, readonly) NSArray *trailingBarButtonGroups;
@property(nonatomic, readonly) NSArray *leadingBarButtonGroups;
@property(nonatomic, readonly) UIInputViewController *inputAccessoryViewController;
@property(nonatomic, retain) CRLEditorController *editorController; // @synthesize editorController;
@property(nonatomic, readonly) id <_TtP8Freeform21CRLTextInputReceiving_> textInputReceiver;
@property(nonatomic, readonly) id <_TtP8Freeform16CRLTextSelecting_> textSelectionDelegate;
@property(nonatomic) _Bool endTextInputWhenKeyboardHides; // @synthesize endTextInputWhenKeyboardHides;
@property(nonatomic) _Bool wantsVisibleKeyboard; // @synthesize wantsVisibleKeyboard;
- (_Bool)wantsToReceiveTextInput;	// IMP=0x00100000007953d0
- (_Bool)shouldBeginTextInputWith:(id)arg1;	// IMP=0x00100000007953c0
- (_Bool)shouldBecomeTextInputEditor;	// IMP=0x00100000007953b0
- (void)endEditing;	// IMP=0x0010000000795360
- (void)selectParent:(id)arg1;	// IMP=0x00100000007952f0
- (void)endEditingAndSelectParent:(id)arg1;	// IMP=0x00100000007952d0
@property(nonatomic, readonly) id <CRLSearchReference> editingSearchReference;
@property(nonatomic, retain) CRLWPSelection *selection;
- (void)documentEditabilityDidChange;	// IMP=0x0010000000794b10
- (id)initWithEditingCoordinator:(id)arg1 enclosingShape:(id)arg2 icc:(id)arg3;	// IMP=0x0010000000794a30
@property(nonatomic, readonly) _TtC8Freeform21CRLEditingCoordinator *editingCoordinator; // @synthesize editingCoordinator;
- (_Bool)wantsDoneButtonWhenEditing;	// IMP=0x0010000000793da0
@property(nonatomic, readonly) CRLInteractiveCanvasController *interactiveCanvasController;
@property(nonatomic) __weak CRLInteractiveCanvasController *icc; // @synthesize icc;
@property(nonatomic, readonly) _TtC8Freeform11CRLWPLayout *layout;
@property(nonatomic, readonly) id <CRLWPTextSource> textSource;
@property(nonatomic, readonly) _TtC8Freeform12CRLWPStorage *storage;
@property(nonatomic, retain) _TtC8Freeform14CRLWPShapeItem *enclosingShape; // @synthesize enclosingShape;
@property(nonatomic, readonly) id <_TtP8Freeform20CRLKeyInputReceiving_> keyInputReceiver;
@property(nonatomic, retain) _TtC8Freeform19CRLWPCharacterStyle *insertionStyle; // @synthesize insertionStyle;
- (void)p_protectedStopKnobTrackingGesture:(id)arg1;	// IMP=0x001000000056fa23
- (void)protectedStopMagnification;	// IMP=0x001000000056f943
- (void)p_beginMagnification:(id)arg1 forRep:(id)arg2 atPoint:(struct CGPoint)arg3 shouldSetSelection:(_Bool)arg4;	// IMP=0x001000000056f89f
- (void)revertLastSelectionChangeIfElapsedTimeIsUnderPinFidgetThreshold;	// IMP=0x001000000056f899
- (void)p_handleKnobDragGestureRecognizer:(id)arg1;	// IMP=0x001000000056f4b2
- (void)p_handleTapWhileMarkedTextGestureRecognizer:(id)arg1;	// IMP=0x001000000056f448
- (void)p_endAutoscroll;	// IMP=0x001000000056f3ee
- (void)p_beginOperationAndTakeControl;	// IMP=0x001000000056ee20
- (void);	// IMP=0x001000000056ee1a
- (_Bool)readyToEndOperation;	// IMP=0x001000000056ee08
@property(readonly, nonatomic) NSObject<CRLCanvasLayoutManipulatingTracker> *tracker;
- (_Bool)allowTrackerManipulatorToTakeControl:(id)arg1;	// IMP=0x001000000056ede4
- (void)gestureSequenceDidEnd;	// IMP=0x001000000056eb58
- (void)gestureSequenceWillBegin;	// IMP=0x001000000056eb38
- (void)p_handleIndirectImmediatePressGesture:(id)arg1;	// IMP=0x001000000056e4f6
- (void)handleGesture:(id)arg1;	// IMP=0x001000000056dd04
- (_Bool)canHandleGesture:(id)arg1;	// IMP=0x001000000056d8f8
- (void)setSelectionControlsForInputType:(long long)arg1;	// IMP=0x001000000056d78d
- (void)p_handleTapGestures:(id)arg1;	// IMP=0x001000000056d066
- (id)p_tappedRubyFieldForNaturalPoint:(struct CGPoint)arg1 textRep:(id)arg2;	// IMP=0x001000000056d05e
- (void)p_handleEditableTextSelectionForceGesture:(id)arg1;	// IMP=0x001000000056cb62
- (void)p_createKnobTracker:(id)arg1 forRep:(id)arg2 tapCount:(unsigned long long)arg3;	// IMP=0x001000000056c69d
- (void)p_beginKnobTrackingSelection:(id)arg1 forRep:(id)arg2 atPoint:(struct CGPoint)arg3;	// IMP=0x001000000056c3f6
- (void)p_cancelTapAndLongPressPreviousSelector;	// IMP=0x001000000056c38f
- (void)p_beginTapAndLongPress;	// IMP=0x001000000056c045
- (void)p_handleTapAndTouchGesture:(id)arg1;	// IMP=0x001000000056b82c
- (id)p_inlineEquationRepInTableCellTextRep:(id)arg1 atUnscaledCanvasPoint:(struct CGPoint)arg2 gesture:(id)arg3;	// IMP=0x001000000056b7ec
- (_Bool)p_shiftKeyIsDownWIthGesture:(id)arg1;	// IMP=0x001000000056b7d0
- (_Bool)p_shouldBeginCaretGrabAtUnscaledCanvasPoint:(struct CGPoint)arg1;	// IMP=0x001000000056b58d
- (id)p_editingRepForCharIndex:(unsigned long long)arg1;	// IMP=0x001000000056b013
- (void)p_handleLongPressTextInteractionWithGestureRecognizer:(id)arg1;	// IMP=0x001000000056a97c
- (void)p_sendHandleTapNotification;	// IMP=0x001000000056a8b5
- (void)p_tappedOnKnob:(id)arg1;	// IMP=0x001000000056a8af
- (_Bool)isACurrentEditor;	// IMP=0x001000000056a814
- (void)tappedInRep:(id)arg1 point:(struct CGPoint)arg2 tapCount:(unsigned long long)arg3 isTapHold:(_Bool)arg4 precise:(_Bool)arg5 alternateClick:(_Bool)arg6;	// IMP=0x001000000056a622
- (void)p_setTappedSelectionPath:(id)arg1;	// IMP=0x001000000056a542
- (void)tappedInRep:(id)arg1 point:(struct CGPoint)arg2 tapCount:(unsigned long long)arg3 isTapHold:(_Bool)arg4 precise:(_Bool)arg5;	// IMP=0x001000000056a520
- (id)p_selectionForRep:(id)arg1 naturalPoint:(struct CGPoint)arg2 textSelectionGranularity:(unsigned long long)arg3 isTapHold:(_Bool)arg4 precise:(_Bool)arg5 includeListLabels:(_Bool)arg6 allowPastBreak:(_Bool)arg7 alternateClick:(_Bool)arg8;	// IMP=0x00100000005692ec
- (unsigned long long)charIndexInRep:(id)arg1 fromPoint:(struct CGPoint)arg2 allowPastBreak:(_Bool)arg3 allowNotFound:(_Bool)arg4 pastCenterGoesToNextChar:(_Bool)arg5 isAtEndOfLine:(_Bool *)arg6;	// IMP=0x0010000000569061
- (unsigned long long)charIndexInRep:(id)arg1 fromPoint:(struct CGPoint)arg2 allowPastBreak:(_Bool)arg3 allowNotFound:(_Bool)arg4 isAtEndOfLine:(_Bool *)arg5;	// IMP=0x0010000000568de0
- (unsigned long long)charIndexInRep:(id)arg1 fromPoint:(struct CGPoint)arg2 allowPastBreak:(_Bool)arg3 isAtEndOfLine:(_Bool *)arg4 leadingEdge:(_Bool *)arg5;	// IMP=0x0010000000568d3b
- (id)p_selectionForRep:(id)arg1 point:(struct CGPoint)arg2 textSelectionGranularity:(unsigned long long)arg3 isTapHold:(_Bool)arg4 precise:(_Bool)arg5 includeListLabels:(_Bool)arg6 allowPastBreak:(_Bool)arg7;	// IMP=0x0010000000568d0f
- (_Bool)isUnscaledPointInTextSelection:(struct CGPoint)arg1;	// IMP=0x0010000000568bbb
- (void)p_handleCaretDragWithImmediatePressGesture:(id)arg1;	// IMP=0x00100000005688c5
- (void)p_clearEditMenuFlags;	// IMP=0x00100000005688bf
- (void)p_handleImmediateAndLongPressGesture:(id)arg1;	// IMP=0x0010000000568601
- (void)p_handleTwoFingerPanGesture:(id)arg1;	// IMP=0x0010000000568131
- (id)p_endingRepForScaledCanvasPoint:(struct CGPoint)arg1;	// IMP=0x0010000000568032
- (id)closestRepToPoint:(struct CGPoint)arg1 forStorage:(id)arg2;	// IMP=0x0010000000567d3a
- (id)p_repsForStorage:(id)arg1;	// IMP=0x0010000000567b56
- (void)p_recursivelyAddRep:(id)arg1 forStorage:(id)arg2 toSet:(id)arg3;	// IMP=0x0010000000567925
- (void)twoFingerPanGestureDidEnd;	// IMP=0x0010000000567911
- (void)twoFingerPanGestureWillBegin;	// IMP=0x00100000005678fa
- (_Bool)isDraggingListItem;	// IMP=0x00100000005678f2
- (id)p_textRepAtGestureLocationForGesture:(id)arg1;	// IMP=0x00100000005677a5
- (id)wpRepFromHitRep:(id)arg1;	// IMP=0x0010000000567758
- (id)selectionFromUnscaledCanvasPoint:(struct CGPoint)arg1 textSelectionGranularity:(unsigned long long)arg2 isTapHold:(_Bool)arg3 allowPastBreak:(_Bool)arg4 isDragging:(_Bool)arg5;	// IMP=0x0010000000567633
- (void)p_setSelectionFromPoint:(struct CGPoint)arg1 textSelectionGranularity:(unsigned long long)arg2 includeListLabels:(_Bool)arg3;	// IMP=0x00100000005674de
- (id)p_editingRepAtPoint:(struct CGPoint)arg1;	// IMP=0x00100000005673ff
- (void)p_adjustSelection:(id)arg1 withUnscaledCanvasPoint:(struct CGPoint)arg2 textSelectionGranularity:(unsigned long long)arg3 isTapHold:(_Bool)arg4 allowPastBreak:(_Bool)arg5 isDragging:(_Bool)arg6;	// IMP=0x0010000000567354
- (void)p_adjustSelection:(id)arg1 withOtherSelection:(id)arg2 textSelectionGranularity:(unsigned long long)arg3;	// IMP=0x0010000000566c53
- (Class)wpSelectionClass;	// IMP=0x0010000000566c42
- (struct _NSRange)nextWordFromIndex:(unsigned long long)arg1 forward:(_Bool)arg2;	// IMP=0x0010000000566949
- (_Bool)blockGesture:(id)arg1;	// IMP=0x00100000005668c8
- (void)arrowKeyReceivedInDirection:(unsigned long long)arg1 withModifierKeys:(id)arg2;	// IMP=0x0010000000a52450
@property(nonatomic, readonly) _Bool wantsRawArrowKeyEvents;
- (void)spacebarTapped:(id)arg1;	// IMP=0x0010000000a51e80
@property(nonatomic, readonly) _Bool handlesSpacebar;
- (void)swapWithMark:(id)arg1;	// IMP=0x0010000000a51e50
- (void)deleteToMark:(id)arg1;	// IMP=0x0010000000a51d60
- (void)selectToMark:(id)arg1;	// IMP=0x0010000000a51d40
- (void)setMark:(id)arg1;	// IMP=0x0010000000a51d20
- (void)selectParagraph:(id)arg1;	// IMP=0x0010000000a51d00
- (void)selectWord:(id)arg1;	// IMP=0x0010000000a51ce0
- (void)selectLine:(id)arg1;	// IMP=0x0010000000a51cc0
- (void)selectAll:(id)arg1;	// IMP=0x0010000000a51c30
- (void)moveWordRightAndModifySelection:(id)arg1;	// IMP=0x0010000000a51aa0
- (void)moveWordLeftAndModifySelection:(id)arg1;	// IMP=0x0010000000a51a80
- (void)moveWordRight:(id)arg1;	// IMP=0x0010000000a51a60
- (void)moveWordLeft:(id)arg1;	// IMP=0x0010000000a51a40
- (void)moveWordBackwardAndModifySelection:(id)arg1;	// IMP=0x0010000000a51a20
- (void)moveWordForwardAndModifySelection:(id)arg1;	// IMP=0x0010000000a51a00
- (void)moveWordBackward:(id)arg1;	// IMP=0x0010000000a519e0
- (void)moveWordForward:(id)arg1;	// IMP=0x0010000000a519c0
- (void)moveToEndOfLineAndModifySelection:(id)arg1;	// IMP=0x0010000000a519a0
- (void)moveToEndOfLine:(id)arg1;	// IMP=0x0010000000a51980
- (void)moveToBeginningOfLineAndModifySelection:(id)arg1;	// IMP=0x0010000000a51960
- (void)moveToBeginningOfLine:(id)arg1;	// IMP=0x0010000000a51940
- (void)moveToRightEndOfLineAndModifySelection:(id)arg1;	// IMP=0x0010000000a51920
- (void)moveToRightEndOfLine:(id)arg1;	// IMP=0x0010000000a51900
- (void)moveToLeftEndOfLineAndModifySelection:(id)arg1;	// IMP=0x0010000000a518e0
- (void)moveToLeftEndOfLine:(id)arg1;	// IMP=0x0010000000a518c0
- (void)moveToEndOfParagraphAndModifySelection:(id)arg1;	// IMP=0x0010000000a518a0
- (void)moveToEndOfParagraph:(id)arg1;	// IMP=0x0010000000a51820
- (void)moveToBeginningOfParagraphAndModifySelection:(id)arg1;	// IMP=0x0010000000a51800
- (void)moveToBeginningOfParagraph:(id)arg1;	// IMP=0x0010000000a517e0
- (void)moveParagraphBackwardAndModifySelection:(id)arg1;	// IMP=0x0010000000a517c0
- (void)moveParagraphBackward:(id)arg1;	// IMP=0x0010000000a517a0
- (void)moveParagraphForwardAndModifySelection:(id)arg1;	// IMP=0x0010000000a51780
- (void)moveParagraphForward:(id)arg1;	// IMP=0x0010000000a51760
- (void)moveToEndOfDocumentAndModifySelection:(id)arg1;	// IMP=0x0010000000a51740
- (void)moveToEndOfDocument:(id)arg1;	// IMP=0x0010000000a514a0
- (void)moveToBeginningOfDocumentAndModifySelection:(id)arg1;	// IMP=0x0010000000a51340
- (void)moveToBeginningOfDocument:(id)arg1;	// IMP=0x0010000000a51320
- (void)uppercaseWord:(id)arg1;	// IMP=0x0010000000a51300
- (void)lowercaseWord:(id)arg1;	// IMP=0x0010000000a512e0
- (void)capitalizeWord:(id)arg1;	// IMP=0x0010000000a512c0
- (void)transposeWords:(id)arg1;	// IMP=0x0010000000a512a0
- (void)transpose:(id)arg1;	// IMP=0x0010000000a51280
- (void)complete:(id)arg1;	// IMP=0x0010000000a511e0
- (void)deleteWordBackward:(id)arg1;	// IMP=0x0010000000a511c0
- (void)deleteWordForward:(id)arg1;	// IMP=0x0010000000a50ef0
- (void)deleteToBeginningOfLine:(id)arg1;	// IMP=0x0010000000a50c70
- (void)escapePressed:(id)arg1;	// IMP=0x0010000000a50ad0
- (void)insertTab:(id)arg1;	// IMP=0x0010000000a50ab0
- (void)insertNewline:(id)arg1;	// IMP=0x0010000000a506d0
- (void)insertLineBreak:(id)arg1;	// IMP=0x0010000000a50630
- (void)insertBacktab:(id)arg1;	// IMP=0x0010000000a505c0

// Remaining properties
@property(readonly, nonatomic) _Bool allowUndoRedoOperations;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

