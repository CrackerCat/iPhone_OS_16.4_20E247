//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CRLCanvasAccessibility, CRLCanvasInteractiveCanvasControllerAccessibility, CRLCanvasLayoutAccessibility, CRLCanvasViewAccessibility, CRLDrawableCommentAccessibility, CRLRepContainerAccessibilityElement, CRLiOSCanvasViewControllerAccessibility, NSArray, NSString, UIFocusEffect, UIView;
@protocol CRLCanvasElementInfo, UIFocusEnvironment, UIFocusItemContainer;

@interface CRLCanvasRepAccessibility
{
    _Bool _crlaxAllowsCaptionEditing;	// 8 = 0x8
    NSString *_crlaxCollaboratorDescription;	// 16 = 0x10
    NSString *_crlaxUploadStatusDescription;	// 24 = 0x18
    CRLDrawableCommentAccessibility *_crlaxComment;	// 32 = 0x20
}

+ (void)crlaxSetCurrentRepDragOffset:(struct CGPoint)arg1;	// IMP=0x00200000001b22e4
+ (struct CGPoint)crlaxCurrentRepDragOffset;	// IMP=0x00100000001b22ce
+ (Class)crlaxBaseSafeCategoryClass;	// IMP=0x001000000053e077
+ (id)crlaxTargetClassName;	// IMP=0x001000000053e06a
+ (id)crlaxCastFrom:(id)arg1;	// IMP=0x001000000053e091
- (void).cxx_destruct;	// IMP=0x0010000000541b50
@property(readonly, nonatomic) CRLDrawableCommentAccessibility *crlaxComment; // @synthesize crlaxComment=_crlaxComment;
@property(readonly, nonatomic) NSString *crlaxUploadStatusDescription; // @synthesize crlaxUploadStatusDescription=_crlaxUploadStatusDescription;
@property(readonly, nonatomic) NSString *crlaxCollaboratorDescription; // @synthesize crlaxCollaboratorDescription=_crlaxCollaboratorDescription;
@property(readonly, nonatomic) _Bool crlaxAllowsCaptionEditing; // @synthesize crlaxAllowsCaptionEditing=_crlaxAllowsCaptionEditing;
- (_Bool)_crlaxKeyCorrespondsToPropertyRequiringAccessToCanvas:(id)arg1;	// IMP=0x0010000000541a0f
- (id)_crlaxOriginDescriptionRelativeToContainer:(struct CGRect)arg1;	// IMP=0x001000000054158b
- (id)_crlaxOriginDescriptionUsingPositionValuesFromInspector;	// IMP=0x00100000005412e3
- (void)_crlaxInvalidateKnobAccessibilityElements:(id)arg1;	// IMP=0x00100000005411bc
@property(readonly, nonatomic) NSString *_crlaxRotationDescription;
@property(readonly, nonatomic) NSString *_crlaxOriginDescription;
@property(readonly, nonatomic) NSString *_crlaxSizeDescription;
- (_Bool)_crlaxShouldShowCollaboratorCursorHighlight;	// IMP=0x0010000000540e17
- (id)crlaxValueForKey:(id)arg1;	// IMP=0x0010000000540d89
- (void)becameNotSelected;	// IMP=0x0010000000540d19
- (void)becameSelected;	// IMP=0x0010000000540c5f
- (void)invalidateKnobs;	// IMP=0x0010000000540c19
- (void)i_willBeRemoved;	// IMP=0x0010000000540b1f
- (_Bool)crlaxFullscreenPreviewFile;	// IMP=0x0010000000540a93
- (_Bool)crlaxOpenURL;	// IMP=0x00100000005409d1
- (_Bool)crlaxShouldCreateAccessibilityElementForKnob:(id)arg1;	// IMP=0x00100000005409b5
- (void)crlaxPerformCleanupTasksPriorToRemovalFromCanvas;	// IMP=0x00100000005409a3
- (void)crlaxClearKnobAccessibilityElementCache;	// IMP=0x0010000000540946
- (struct CGRect)crlaxConvertLayerRelativeRectToNaturalRect:(struct CGRect)arg1;	// IMP=0x00100000005408e0
- (struct CGRect)crlaxConvertNaturalRectToScreenSpace:(struct CGRect)arg1;	// IMP=0x00100000005407a9
- (struct CGPoint)crlaxConvertNaturalPointToScreenSpace:(struct CGPoint)arg1;	// IMP=0x0010000000540751
- (struct CGRect)crlaxConvertNaturalRectToUnscaledCanvas:(struct CGRect)arg1;	// IMP=0x0010000000540618
- (struct CGPoint)crlaxConvertNaturalPointToUnscaledCanvas:(struct CGPoint)arg1;	// IMP=0x00100000005404f8
- (struct CGRect)crlaxConvertNaturalRectFromUnscaledCanvas:(struct CGRect)arg1;	// IMP=0x00100000005403bf
- (struct CGPoint)crlaxConvertNaturalPointFromUnscaledCanvas:(struct CGPoint)arg1;	// IMP=0x001000000054029f
- (id)crlaxNewKnobElementForKnob:(id)arg1;	// IMP=0x0010000000540218
- (_Bool)crlaxMayRotate;	// IMP=0x00100000005401cd
- (void)_crlaxRotateClockwiseByDegrees:(double)arg1;	// IMP=0x001000000053ff5f
- (void)crlaxRotateCounterclockwise;	// IMP=0x001000000053ff45
- (void)crlaxRotateClockwise;	// IMP=0x001000000053ff2b
- (void)crlaxAddToSelection;	// IMP=0x001000000053fedf
- (void)crlaxDeselectRep;	// IMP=0x001000000053fe93
- (void)crlaxDeselectAll;	// IMP=0x001000000053fe56
@property(readonly, nonatomic) NSString *crlaxGroupedStatusString;
@property(readonly, nonatomic) _Bool crlaxIsInGroup;
@property(readonly, nonatomic) struct CGAffineTransform crlaxTransformToConvertNaturalFromLayerRelative;
@property(readonly, nonatomic) _Bool crlaxHasComment;
@property(readonly, nonatomic) _Bool crlaxSupportsChangeTracking;
@property(readonly, nonatomic) NSString *crlaxSummaryDescription;
@property(readonly, nonatomic) _Bool crlaxShouldExposeAsAttachmentToken;
- (id)crlaxKnobElementForTag:(unsigned long long)arg1 index:(unsigned long long)arg2;	// IMP=0x001000000053fa03
- (id)crlaxKnobForTag:(unsigned long long)arg1 index:(unsigned long long)arg2;	// IMP=0x001000000053f815
@property(readonly, nonatomic) NSString *crlaxKnobLabel;
@property(readonly, nonatomic) NSArray *crlaxKnobAccessibilityElements;
@property(readonly, nonatomic) _Bool crlaxInReadOnlyMode;
- (id)_crlaxDrawableInfoAccessibility;	// IMP=0x001000000053f005
- (id)_crlaxDrawableInfo;	// IMP=0x001000000053efa2
@property(readonly, nonatomic) NSString *crlaxItemTypeDescription;
@property(readonly, nonatomic) NSString *crlaxCaptionLabel;
@property(readonly, nonatomic) NSString *crlaxTitleLabel;
@property(readonly, nonatomic) NSString *crlaxCaption;
@property(readonly, nonatomic) NSString *crlaxTitle;
@property(readonly, nonatomic) _Bool crlaxIsCaption;
@property(readonly, nonatomic) _Bool crlaxIsTitle;
@property(readonly, nonatomic) _Bool crlaxContainsCaption;
@property(readonly, nonatomic) _Bool crlaxContainsTitle;
@property(readonly, nonatomic) NSString *crlaxLockedHint;
@property(readonly, nonatomic) NSString *crlaxLockedLabel;
@property(readonly, nonatomic) _Bool crlaxIsLocked;
@property(readonly, nonatomic) NSString *crlaxLayoutDescription;
@property(readonly, nonatomic) struct CGRect crlaxNaturalBounds;
@property(readonly, nonatomic) _Bool crlaxIsDraggable;
@property(readonly, nonatomic) _Bool crlaxShouldCreateKnobs;
@property(readonly, nonatomic) CRLCanvasRepAccessibility *crlaxRepForSelecting;
@property(readonly, nonatomic) _Bool crlaxIsSelectable;
@property(readonly, nonatomic) _Bool crlaxIsSelected;
@property(readonly, nonatomic) _Bool crlaxIsSelectedIgnoringLocking;
@property(readonly, nonatomic) CRLCanvasLayoutAccessibility *crlaxLayout;
@property(readonly, nonatomic) id <CRLCanvasElementInfo> crlaxInfo;
@property(readonly, nonatomic) CRLCanvasRepAccessibility *crlaxParentRep;
@property(readonly, nonatomic) CRLCanvasViewAccessibility *crlaxCanvasView;
@property(readonly, nonatomic) CRLCanvasInteractiveCanvasControllerAccessibility *crlaxInteractiveCanvasController;
@property(readonly, nonatomic) CRLCanvasAccessibility *crlaxCanvas;
@property(readonly, nonatomic) struct CGRect crlaxFrameInScreenSpace;
@property(readonly, nonatomic) struct CGPoint crlaxCenterInUnscaledCanvas;
@property(readonly, nonatomic) struct CGRect crlaxLayerFrameInScaledCanvas;
@property(readonly, nonatomic) struct CGRect crlaxFrameInUnscaledCanvas;
- (id)accessibilityUserInputLabels;	// IMP=0x001000000053e4cc
- (id)accessibilityLabel;	// IMP=0x001000000053e1ff
@property(nonatomic, setter=crlaxSetIsBeingRemoved:) _Bool crlaxIsBeingRemoved;
@property(nonatomic, setter=_crlaxSetKnobElementCacheIsInvalid:) _Bool _crlaxKnobElementCacheIsInvalid;
@property(nonatomic, setter=_crlaxSetShouldPreventAccessToCanvas:) _Bool _crlaxShouldPreventAccessToCanvas;
@property(retain, nonatomic, setter=_crlaxSetKnobAccessibilityElementsCache:) NSArray *_crlaxKnobAccessibilityElementsCache;
@property(nonatomic, setter=crlaxSetWasExplicitlyFocused:) _Bool crlaxWasExplicitlyFocused;
@property(readonly, nonatomic) struct CGRect frame;
@property(readonly, nonatomic) _Bool canBecomeFocused;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;	// IMP=0x00100000001b5b13
- (_Bool)shouldUpdateFocusInContext:(id)arg1;	// IMP=0x00100000001b5a9c
- (void)updateFocusIfNeeded;	// IMP=0x00100000001b5a55
- (void)setNeedsFocusUpdate;	// IMP=0x00100000001b59ff
@property(readonly, nonatomic) id <UIFocusItemContainer> focusItemContainer;
@property(readonly, nonatomic) __weak id <UIFocusEnvironment> parentFocusEnvironment;
@property(readonly, copy, nonatomic) NSArray *preferredFocusEnvironments;
- (_Bool)_crlaxReaderModePerformCopy;	// IMP=0x00100000001b57a9
- (void)_crlaxGoToFormatInspector;	// IMP=0x00100000001b575c
- (_Bool)_crlaxCanBeSelected;	// IMP=0x00100000001b5748
- (_Bool)_crlaxCanBeSelectedWithSelectableRepReference:(id *)arg1;	// IMP=0x00100000001b569a
- (id)_crlaxPrimaryTextEditor;	// IMP=0x00100000001b5592
- (void)crlaxPerformExtraCleanupTasksPriorToRemovalFromCanvas;	// IMP=0x00100000001b549b
- (void)dynamicallyResizingWithTracker:(id)arg1;	// IMP=0x00100000001b5126
- (void)dynamicDragDidBegin;	// IMP=0x00100000001b50cd
- (void)dealloc;	// IMP=0x00100000001b508f
- (_Bool)crlaxSelect;	// IMP=0x00100000001b4e0c
- (_Bool)crlaxShouldSortChildrenUsingStandardAlgorithm;	// IMP=0x00100000001b4e04
- (void)crlaxDidInvalidateChildren;	// IMP=0x00100000001b4df8
- (void)crlaxChildWillBeRemoved:(id)arg1;	// IMP=0x00100000001b4de1
- (void)crlaxLoadChildrenIntoCollection:(id)arg1;	// IMP=0x00100000001b48d0
- (_Bool)crlaxIsReadyToLoadChildren;	// IMP=0x00100000001b48b7
- (id)accessibilityDropPointDescriptors;	// IMP=0x00000000001b4666
- (id)accessibilityDragSourceDescriptors;	// IMP=0x00100000001b42f2
- (id)accessibilityCustomActions;	// IMP=0x00100000001b3ea9
- (_Bool)_accessibilityIsSpeakThisElement;	// IMP=0x00100000001b3ea1
- (id)_accessibilityParentView;	// IMP=0x00100000001b3e44
- (_Bool)accessibilityActivate;	// IMP=0x00100000001b3da7
- (_Bool)_accessibilitySupportsActivateAction;	// IMP=0x00100000001b3d61
- (struct CGPoint)accessibilityActivationPoint;	// IMP=0x00100000001b3c3a
- (id)accessibilityHint;	// IMP=0x00100000001b3982
- (id)accessibilityPath;	// IMP=0x00100000001b3494
- (struct CGRect)accessibilityFrame;	// IMP=0x00100000001b3475
- (id)accessibilityContainer;	// IMP=0x00100000001b33fb
- (id)accessibilityElements;	// IMP=0x00100000001b33b7
- (unsigned long long)accessibilityTraits;	// IMP=0x00100000001b335a
- (_Bool)isAccessibilityElement;	// IMP=0x00100000001b3352
- (_Bool)accessibilityEditOperationAction:(id)arg1;	// IMP=0x00100000001b3340
- (_Bool)_accessibilityTextOperationAction:(id)arg1;	// IMP=0x00100000001b301a
- (id)_adjustActionNamesForSet:(id)arg1;	// IMP=0x00100000001b2df8
- (id)_accessibilityTextOperations;	// IMP=0x00100000001b2840
- (id)hitRep:(struct CGPoint)arg1;	// IMP=0x00100000001b276e
- (id)crlaxReaderModeEditOperations;	// IMP=0x00100000001b26af
- (id)crlaxReaderModeEditOperationTitle;	// IMP=0x00100000001b264c
- (id)crlaxReaderModeCopyOperationTitle;	// IMP=0x00100000001b25e9
- (id)accessibilityCustomRotors;	// IMP=0x00100000001b2575
- (_Bool)crlaxSupportsPublicCustomRotors;	// IMP=0x00100000001b256d
@property(readonly, nonatomic) NSString *crlaxFormatEditOperationTitle;
@property(readonly, nonatomic) _Bool crlaxNeedsFormatEditOperation;
@property(readonly, nonatomic) _Bool crlaxIsInDrawingMode;
@property(readonly, nonatomic) id crlaxFocusedElement;
@property(readonly, nonatomic) CRLiOSCanvasViewControllerAccessibility *crlaxCanvasViewController;
@property(readonly, nonatomic) CRLRepContainerAccessibilityElement *crlaxAccessibilityElement;
@property(readonly, nonatomic) _Bool crlaxNeedsEditRotorMenu;
- (void)_crlaxSetLastBoundsAnnouncementTime:(double)arg1;	// IMP=0x00100000001b22bd
- (double)_crlaxLastBoundsAnnouncementTime;	// IMP=0x00100000001b22ac
- (void)_crlaxSetRepContainerElementCache:(id)arg1;	// IMP=0x00100000001b229b
- (id)_crlaxRepContainerElementCache;	// IMP=0x00100000001b228a
- (id)crlaxTarget;	// IMP=0x001000000053e088

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly, copy, nonatomic) UIFocusEffect *focusEffect;
@property(readonly, copy, nonatomic) NSString *focusGroupIdentifier;
@property(readonly, nonatomic) long long focusGroupPriority;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) _Bool isTransparentFocusItem;
@property(readonly, nonatomic) __weak UIView *preferredFocusedView;
@property(readonly) Class superclass;

@end

