//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CRLBezierNode, NSArray, NSUUID;

@interface CRLEditableBezierPathSource
{
    NSArray *mSubpaths;	// 8 = 0x8
    unsigned long long mActiveSubpath;	// 16 = 0x10
    _Bool mHasLockedFlipTransform;	// 24 = 0x18
    struct CGAffineTransform mLockedFlipTransform;	// 32 = 0x20
    NSUUID *mPersistedUUID;	// 80 = 0x50
}

+ (id)editableBezierPathSourceWithBezierPath:(id)arg1;	// IMP=0x00200000001b9cd3
+ (id)editableBezierPathSourceWithPathSource:(id)arg1;	// IMP=0x00100000001b9c71
+ (id)editableBezierPathSource;	// IMP=0x00100000001b9c58
- (void).cxx_destruct;	// IMP=0x00100000001c1331
@property(nonatomic) unsigned long long activeSubpath; // @synthesize activeSubpath=mActiveSubpath;
@property(copy, nonatomic) NSArray *subpaths; // @synthesize subpaths=mSubpaths;
@property(retain, nonatomic) NSUUID *persistedUUID; // @synthesize persistedUUID=mPersistedUUID;
- (id)inferredAccessibilityDescription;	// IMP=0x00100000001c1278
- (id)inferredAccessibilityDescriptionNoShapeNames;	// IMP=0x00100000001c11e6
- (void)closePath;	// IMP=0x00100000001c0e6a
- (void)smoothCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x00100000001c0da8
- (void)curveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x00100000001c0a8e
- (void)lineToPoint:(struct CGPoint)arg1;	// IMP=0x00100000001c0806
- (void)moveToPoint:(struct CGPoint)arg1;	// IMP=0x00100000001c060e
@property(retain, nonatomic) NSArray *nodeTypes;
@property(readonly, nonatomic) const struct CGPath *subpathForSelection;
- (void)cutAtSelectedNodes;	// IMP=0x00100000001bf783
- (_Bool)canCutAtSelectedNodes;	// IMP=0x00100000001bf513
- (void)splitSelectedNodes;	// IMP=0x00100000001bf14c
- (void)splitSelectedEdges;	// IMP=0x00100000001bef7b
- (id)splitEdge:(long long)arg1 at:(double)arg2 fromSubpath:(long long)arg3;	// IMP=0x00100000001beb51
- (void)deleteSelectedEdges;	// IMP=0x00100000001be36c
- (void)closeSelectedNodes;	// IMP=0x00100000001be064
- (_Bool)canCloseSelectedNodes;	// IMP=0x00100000001bddfd
- (void)connectSelectedNodes;	// IMP=0x00100000001bda1a
- (_Bool)canConnectSelectedNodes;	// IMP=0x00100000001bd9d9
- (id)subpathsForConnectingUsingFirstSubpathFirstNode:(_Bool *)arg1 andSecondPathFirstNode:(_Bool *)arg2;	// IMP=0x00100000001bd67d
- (void)selectSubpathForNode:(id)arg1 toggle:(_Bool)arg2;	// IMP=0x00100000001bd541
@property(nonatomic, getter=isClosed) _Bool closed;
- (_Bool);	// IMP=0x00100000001bd3ee
- (void)smoothAllNodes;	// IMP=0x00100000001bd1ea
- (void)smoothNode:(id)arg1;	// IMP=0x00100000001bd0d4
- (void)sharpenAllNodes;	// IMP=0x00100000001bd090
- (void)toggleSelectedNodesToType:(long long)arg1;	// IMP=0x00100000001bcd1a
- (void)toggleNode:(id)arg1 toType:(long long)arg2 prevNode:(id)arg3 nextNode:(id)arg4;	// IMP=0x00100000001bc967
@property(readonly, nonatomic) struct CGRect nodeBounds;
- (double)distanceToPoint:(struct CGPoint)arg1 subpathIndex:(unsigned long long *)arg2 elementIndex:(unsigned long long *)arg3 tValue:(double *)arg4 threshold:(double)arg5;	// IMP=0x00100000001bc60e
- (id)bezierNodeUnderPoint:(struct CGPoint)arg1 withTransform:(struct CGAffineTransform)arg2 andTolerance:(double)arg3 returningType:(long long *)arg4;	// IMP=0x00100000001bc4fd
- (void)deselectAllNodes;	// IMP=0x00100000001bc4b9
- (void)selectAllNodes;	// IMP=0x00100000001bc475
- (void)deleteSelectedNodes;	// IMP=0x00100000001bc461
- (void)deleteSelectedNodesForced:(_Bool)arg1;	// IMP=0x00100000001bc1d8
@property(readonly, nonatomic) _Bool deletingSelectedNodesWillDeleteShape;
@property(readonly, nonatomic) _Bool canDeleteSelectedNodes;
@property(readonly, nonatomic) _Bool isCompound;
- (void)removeNode:(id)arg1;	// IMP=0x00100000001bbd4b
@property(readonly, nonatomic) _Bool allNodesSelected;
@property(readonly, nonatomic) _Bool hasSelectedNode;
- (void)offsetSelectedEdgesByDelta:(struct CGPoint)arg1;	// IMP=0x00100000001bb98b
- (void)offsetSelectedNodesByDelta:(struct CGPoint)arg1;	// IMP=0x00100000001bb83a
@property(readonly, nonatomic) CRLBezierNode *lastNode;
@property(readonly, nonatomic) CRLBezierNode *firstNode;
- (id)nodeAfterNode:(id)arg1;	// IMP=0x00100000001bb67e
- (id)nodePriorToNode:(id)arg1;	// IMP=0x00100000001bb5d2
- (void)removeLastNode;	// IMP=0x00100000001bb55a
- (void)addNode:(id)arg1;	// IMP=0x00100000001bb4c8
- (void)alignToOrigin;	// IMP=0x00100000001bb1ca
- (void)transformUsingAffineTransform:(struct CGAffineTransform)arg1;	// IMP=0x00100000001bb071
- (void)setNaturalSize:(struct CGSize)arg1;	// IMP=0x00100000001bae46
- (struct CGSize)naturalSize;	// IMP=0x00100000001badd6
- (struct CGAffineTransform)pathFlipTransform;	// IMP=0x00100000001bad6d
- (void)beginNewSubpath;	// IMP=0x00100000001bac9a
- (void)setLockedFlipTransform:(_Bool)arg1;	// IMP=0x00100000001bac22
- (void)reverseDirection;	// IMP=0x00100000001babaa
@property(copy, nonatomic) NSArray *nodes;
- (void)setBezierPath:(id)arg1;	// IMP=0x00100000001ba2da
- (void)convertToHobby;	// IMP=0x00100000001ba296
@property(readonly, nonatomic) const struct CGPath *pathWithoutFlips;
- (id)bezierPathWithoutFlips;	// IMP=0x00100000001ba1b4
- (_Bool)isCircular;	// IMP=0x00100000001ba105
- (_Bool)isRectangular;	// IMP=0x00100000001ba056
@property(readonly, nonatomic) _Bool closeIfEndpointsAreEqual;
- (_Bool)isEqualWithStrictComparison:(id)arg1;	// IMP=0x00100000001b9eb3
- (unsigned long long)hash;	// IMP=0x00100000001b9e28
- (_Bool)isEqual:(id)arg1;	// IMP=0x00100000001b9d45
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00100000001b9b82
- (id)description;	// IMP=0x00100000001b9b06
- (id)init;	// IMP=0x00100000001b9a71
- (void)addTemporarySmoothNodes;	// IMP=0x00100000004f191e
- (void)updateSmoothNodes;	// IMP=0x00100000004f18da
- (void)morphWithMorphInfo:(id)arg1;	// IMP=0x00100000004f177c

// Remaining properties
@property(readonly, nonatomic) _Bool isOpen;

@end

