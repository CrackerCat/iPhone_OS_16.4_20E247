//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CRLColor, CRLImageFillCachedImage, NSObject, _TtC8Freeform8CRLAsset;
@protocol OS_dispatch_queue;

@interface CRLImageFill
{
    _TtC8Freeform8CRLAsset *mImageData;	// 8 = 0x8
    unsigned long long mTechnique;	// 16 = 0x10
    CRLColor *mTintColor;	// 24 = 0x18
    CRLImageFillCachedImage *mStandardSizeTintedImage;	// 32 = 0x20
    CRLImageFillCachedImage *mHalfSizeTintedImage;	// 40 = 0x28
    CRLImageFillCachedImage *mQuarterSizeTintedImage;	// 48 = 0x30
    CRLColor *mReferenceColor;	// 56 = 0x38
    CRLColor *mCachedReferenceColor;	// 64 = 0x40
    _Bool mShouldSkipFurtherAttemptsToCalculateReferenceColor;	// 72 = 0x48
    struct CGSize mFillSize;	// 80 = 0x50
    _Bool mHasIndicatedInterestInProvider;	// 96 = 0x60
    NSObject<OS_dispatch_queue> *mTempRenderLock;	// 104 = 0x68
    struct CGImage *mTempRenderCopy;	// 112 = 0x70
    struct CGImage *mSourceOfTempRenderCopy;	// 120 = 0x78
    long long mTempRenderCount;	// 128 = 0x80
}

- (void).cxx_destruct;	// IMP=0x00200000000cfc61
@property(readonly, copy, nonatomic) CRLColor *tintColor; // @synthesize tintColor=mTintColor;
@property(nonatomic) unsigned long long technique; // @synthesize technique=mTechnique;
@property(readonly, retain, nonatomic) _TtC8Freeform8CRLAsset *imageData; // @synthesize imageData=mImageData;
- (void)p_drawPDFWithProvider:(id)arg1 inContext:(struct CGContext *)arg2 bounds:(struct CGRect)arg3;	// IMP=0x00100000000cf814
- (void)p_drawBitmapImage:(struct CGImage *)arg1 withOrientation:(long long)arg2 inContext:(struct CGContext *)arg3 bounds:(struct CGRect)arg4;	// IMP=0x00100000000cf35a
- (struct CGRect)p_drawnRectForImageSize:(struct CGSize)arg1 destRect:(struct CGRect)arg2 inContext:(struct CGContext *)arg3;	// IMP=0x00100000000cf195
- (id)p_validatedImageProvider;	// IMP=0x00100000000cf097
- (id)p_quarterSizeCachedImage;	// IMP=0x00100000000cf046
- (id)p_halfSizeCachedImage;	// IMP=0x00100000000ceff5
- (id)p_standardSizeCachedImage;	// IMP=0x00100000000cefa4
- (id)p_tintedImageWithScale:(double)arg1;	// IMP=0x00100000000ce6e6
- (void)paintPath:(const struct CGPath *)arg1 naturalBounds:(struct CGRect)arg2 inContext:(struct CGContext *)arg3 isPDF:(_Bool)arg4;	// IMP=0x00100000000ce4d1
- (void)drawFillInContext:(struct CGContext *)arg1 rect:(struct CGRect)arg2 clippingToPath:(const struct CGPath *)arg3;	// IMP=0x00100000000ce08c
- (void)paintPath:(const struct CGPath *)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00100000000ce051
- (void)p_paintPath:(const struct CGPath *)arg1 inContext:(struct CGContext *)arg2 rectForFill:(struct CGRect)arg3;	// IMP=0x00100000000cd505
- (struct CGSize)p_sizeOfFillImageForDestRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00100000000cd483
- (void)drawSwatchInRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00100000000cd254
- (struct CGSize)renderedImageSizeForObjectSize:(struct CGSize)arg1;	// IMP=0x00100000000cd182
- (void)applyToRenderable:(id)arg1 withScale:(double)arg2;	// IMP=0x00100000000cc36f
- (id)p_cachedImageForSize:(struct CGSize)arg1 inContext:(struct CGContext *)arg2 orContentsScaleProvider:(id)arg3;	// IMP=0x00100000000cbfd1
- (_Bool)shouldBeReappliedToRenderable:(id)arg1;	// IMP=0x00100000000cbea0
- (_Bool)p_shouldApplyTintedImage;	// IMP=0x00100000000cbe32
- (long long)fillType;	// IMP=0x00100000000cbe27
- (_Bool)canApplyToRenderableByAddingSubrenderables;	// IMP=0x00100000000cbd85
- (_Bool)canApplyToRenderable;	// IMP=0x00100000000cbce0
- (_Bool)drawsInOneStep;	// IMP=0x00100000000cbc6a
- (_Bool)isEqual:(id)arg1;	// IMP=0x00100000000cba75
- (unsigned long long)hash;	// IMP=0x00100000000cba58
- (void)p_updateCachedReferenceColorIfNeeded;	// IMP=0x00100000000cb9c6
- (void)i_updateStoredReferenceColorIfNeeded;	// IMP=0x00100000000cb982
- (id)p_calculateReferenceColor;	// IMP=0x00100000000cb0ff
@property(readonly, nonatomic) CRLColor *storedReferenceColor;
- (id)referenceColorForFontArchiving;	// IMP=0x00100000000cb0d8
- (id)referenceColor;	// IMP=0x00100000000cb086
- (void)i_setStoredReferenceColor:(id)arg1;	// IMP=0x00100000000cb052
- (_Bool)isOpaque;	// IMP=0x00100000000caf59
@property(readonly, nonatomic) struct CGSize fillSize; // @synthesize fillSize=mFillSize;
@property(readonly, nonatomic) double scale;
- (struct CGSize)p_imageDataNaturalSize;	// IMP=0x00100000000cadda
@property(readonly, nonatomic) _Bool canCopyData;
- (id)copyWithNewImageData:(id)arg1;	// IMP=0x00100000000cac3a
@property(nonatomic, setter=p_setFillSize:) struct CGSize p_fillSize;
@property(retain, nonatomic, setter=p_setTintColor:) CRLColor *p_tintColor;
@property(nonatomic, setter=p_setTechnique:) unsigned long long p_technique;
@property(retain, nonatomic, setter=p_setImageData:) _TtC8Freeform8CRLAsset *p_imageData;
- (void)flushImageCache;	// IMP=0x00100000000ca9ae
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00100000000ca9a3
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;	// IMP=0x00100000000ca915
- (void)p_clearTintedImageCache;	// IMP=0x00100000000ca8bb
- (void)dealloc;	// IMP=0x00100000000ca816
- (void)i_commonInit;	// IMP=0x00100000000ca7e8
- (void)i_commonSetup;	// IMP=0x00100000000ca4ed
- (id)initForUnarchiving;	// IMP=0x00100000000ca4be
- (id)initWithImageData:(id)arg1 technique:(unsigned long long)arg2 tintColor:(id)arg3 size:(struct CGSize)arg4;	// IMP=0x00100000000ca4a6
- (id)initWithImageData:(id)arg1 technique:(unsigned long long)arg2 tintColor:(id)arg3 size:(struct CGSize)arg4 referenceColor:(id)arg5;	// IMP=0x00100000000ca17f

@end

