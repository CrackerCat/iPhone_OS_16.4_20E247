//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <WebKitLegacy/DOMNode.h>

@class NSDictionary, NSIndexSet, NSString, RTIInputSystemSourceSession, UIColor, UIImage, UIInputContextHistory, UIResponder, UITextInputPasswordRules, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, _UISupplementalLexicon;
@protocol UITextInput, UITextInputDelegate, UITextInputPrivate, UITextInputSuggestionDelegate, UITextInputTokenizer;

@interface DOMNode (UIWebFormPeripheral)
- (id)createPeripheral;	// IMP=0x0020000000792ad5
- (id)itemTitle;	// IMP=0x0020000000799c7f
- (void)populateCell:(id)arg1;	// IMP=0x0020000000799c79
- (id)createPickerCell;	// IMP=0x0020000000799c71
- (id)createSelectedItem;	// IMP=0x0020000000799c69
- (id)_responderWindow;	// IMP=0x0020000000d0cd1e
- (id)inputAssistantItem;	// IMP=0x0020000000d0ccce
- (id)_textInteraction;	// IMP=0x0020000000d0cc7e
- (id)_selectableText;	// IMP=0x0020000000d0cc75
- (_Bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(_Bool)arg3;	// IMP=0x0020000000d0cb57
- (void)_unmarkText;	// IMP=0x0020000000d0caeb
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000d0c7b6
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000d0c730
- (_Bool)_hasMarkedText;	// IMP=0x0020000000d0c6ae
- (_Bool)_usesAsynchronousProtocol;	// IMP=0x0020000000d0c663
- (void)_setGestureRecognizers;	// IMP=0x0020000000d0c2f9
- (long long)_selectionAffinity;	// IMP=0x0020000000d0c156
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000d0c0c5
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000d0c037
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0be66
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0bc95
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0b97b
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0b661
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0b47f
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0b31c
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0b0bc
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0ae50
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0ab2c
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0a7fc
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d0a4c0
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000d09ee9
- (id)_setHistory:(id)arg1 withExtending:(_Bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000d09c33
- (id)_setSelectionRangeWithHistory:(id)arg1;	// IMP=0x0020000000d098d4
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000d0985c
- (id)_fontForCaretSelection;	// IMP=0x0020000000d0970e
- (id)_textColorForCaretSelection;	// IMP=0x0020000000d095c0
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange)arg1;	// IMP=0x0020000000d093ba
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;	// IMP=0x0020000000d092d8
- (id)_rangeOfSmartSelectionIncludingRange:(id)arg1;	// IMP=0x0020000000d08ac0
- (id)_findDocumentBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000d089cf
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000d0879c
- (id)_findBoundaryPositionClosestToPosition:(id)arg1 withGranularity:(long long)arg2;	// IMP=0x0020000000d08724
- (_Bool)_range:(id)arg1 isEqualToRange:(id)arg2;	// IMP=0x0020000000d085c0
- (id)_intersectionOfRange:(id)arg1 andRange:(id)arg2;	// IMP=0x0020000000d08409
- (_Bool)_range:(id)arg1 intersectsRange:(id)arg2;	// IMP=0x0020000000d08384
- (_Bool)_range:(id)arg1 containsRange:(id)arg2;	// IMP=0x0020000000d082e4
- (id)_rangeSpanningTextUnit:(long long)arg1 andPosition:(id)arg2;	// IMP=0x0020000000d08078
- (id)_fullRange;	// IMP=0x0020000000d07fd1
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;	// IMP=0x0020000000d07fb7
- (id)_rangeOfSentenceEnclosingPosition:(id)arg1;	// IMP=0x0020000000d07f9d
- (id)_rangeOfLineEnclosingPosition:(id)arg1;	// IMP=0x0020000000d07f83
- (id)_rangeOfEnclosingWord:(id)arg1;	// IMP=0x0020000000d07f69
- (id)_rangeOfTextUnit:(long long)arg1 enclosingPosition:(id)arg2;	// IMP=0x0020000000d07e61
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;	// IMP=0x0020000000d07a58
- (id)_normalizedStringForRangeComparison:(id)arg1;	// IMP=0x0020000000d079b9
- (void)_scrollRectToVisible:(struct CGRect)arg1 animated:(_Bool)arg2;	// IMP=0x0020000000d078b3
- (void)_replaceDocumentWithText:(id)arg1;	// IMP=0x0020000000d077f9
- (void)_replaceCurrentWordWithText:(id)arg1;	// IMP=0x0020000000d0771a
- (void)_transpose;	// IMP=0x0020000000d073be
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000d071a4
- (void)_deleteBackwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000d07167
- (void)_deleteTextRange:(id)arg1;	// IMP=0x0020000000d07028
- (void)_deleteToEndOfParagraph;	// IMP=0x0020000000d06e06
- (void)_deleteToEndOfLine;	// IMP=0x0020000000d06be4
- (void)_deleteToStartOfLine;	// IMP=0x0020000000d069c4
- (void)_deleteForwardByWord;	// IMP=0x0020000000d06699
- (void)_deleteByWord;	// IMP=0x0020000000d06503
- (void)_setCaretSelectionAtEndOfSelection;	// IMP=0x0020000000d0641f
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;	// IMP=0x0020000000d0614a
- (id)_positionFromPosition:(id)arg1 pastTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000000d05f6e
- (long long)_opposingDirectionFromDirection:(long long)arg1;	// IMP=0x0020000000d05f54
- (id)_positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x0020000000d05ea2
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;	// IMP=0x0020000000d05d80
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;	// IMP=0x0020000000d05d69
- (void)_expandSelectionToBackwardDeletionClusterWithReinsertionOut:(id *)arg1;	// IMP=0x0020000000d0597d
- (void)_moveCurrentSelection:(int)arg1;	// IMP=0x0020000000d057cd
- (void)_extendCurrentSelection:(int)arg1;	// IMP=0x0020000000d0563c
- (_Bool)_hasMarkedTextOrRangedSelection;	// IMP=0x0020000000d0556d
- (_Bool)_isEmptySelection;	// IMP=0x0020000000d054b0
- (struct CGRect)_selectionClipRect;	// IMP=0x0020000000d05492
- (_Bool)_selectionAtDocumentEnd;	// IMP=0x0020000000d053d0
- (_Bool)_selectionAtDocumentStart;	// IMP=0x0020000000d0530e
- (_Bool)_selectionAtWordStart;	// IMP=0x0020000000d051c4
- (void)_setSelectionToPosition:(id)arg1;	// IMP=0x0020000000d05123
- (id)_fullText;	// IMP=0x0020000000d05055
- (id)_wordContainingCaretSelection;	// IMP=0x0020000000d04f13
- (unsigned int)_characterInRelationToPosition:(id)arg1 amount:(int)arg2;	// IMP=0x0020000000d04d62
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;	// IMP=0x0020000000d04a71
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000000d049ad
- (unsigned int)_characterBeforeCaretSelection;	// IMP=0x0020000000d04996
- (unsigned int)_characterAfterCaretSelection;	// IMP=0x0020000000d04982
- (id)_textRangeFromNSRange:(struct _NSRange)arg1;	// IMP=0x0020000000d04864
- (struct _NSRange)_nsrangeForTextRange:(id)arg1;	// IMP=0x0020000000d04769
- (int)_indexForTextPosition:(id)arg1;	// IMP=0x0020000000d046d1
- (void)_selectAll;	// IMP=0x0020000000d04664
- (struct _NSRange)_selectedRangeWithinMarkedText;	// IMP=0x0020000000d044b5
- (struct _NSRange)_selectedNSRange;	// IMP=0x0020000000d04413
@property(nonatomic) long long _textInputSource;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
- (id)_keyInput;	// IMP=0x0020000000d041c3
@property(readonly, nonatomic, getter=_proxyTextInput) UIResponder<UITextInput> *__content;
@property(readonly, nonatomic) UIView *textInputView;
- (id)urlScheme;	// IMP=0x00200000014dfc50
- (id)tagName;	// IMP=0x00200000014dfc02
- (id)_realNode;	// IMP=0x00200000014e1ce0
- (id)_textFormElement;	// IMP=0x00200000014e1e59
- (id)_previousAssistedNode;	// IMP=0x00200000014e1dfc
- (id)_nextAssistedNode;	// IMP=0x00200000014e1d9f
- (void)_accessoryClear;	// IMP=0x00200000014e1d99
- (_Bool)_supportsAccessoryClear;	// IMP=0x00200000014e1d91
- (_Bool)_supportsAutoFill;	// IMP=0x00200000014e1d89
- (_Bool)_requiresInputView;	// IMP=0x00200000014e1d77
- (_Bool)_requiresAccessoryView;	// IMP=0x00200000014e1d65
- (void)_stopAssistingDocumentView:(id)arg1;	// IMP=0x00200000014e1d2e
- (void)_startAssistingDocumentView:(id)arg1;	// IMP=0x00200000014e1cf7
- (_Bool)nodeCanBecomeFirstResponder;	// IMP=0x00200000014f34a2
- (_Bool)isLikelyToBeginPageLoad;	// IMP=0x00200000014f349a
- (id)absoluteQuadsAtPoint:(struct CGPoint)arg1;	// IMP=0x00200000014f3488
- (_Bool)touchCalloutEnabled;	// IMP=0x00200000014f3480
- (id)tapHighlightColor;	// IMP=0x00200000014f3451
- (_Bool)alwaysAttemptToShowTapHighlight;	// IMP=0x00200000014f343f
- (_Bool)showsTapHighlight;	// IMP=0x00200000014f3437
@property(nonatomic) long long keyboardType;
- (_Bool)isSecure;	// IMP=0x0020000001503d88
- (_Bool)isTextControl;	// IMP=0x0020000001503d80
- (struct CGRect)convertRect:(struct CGRect)arg1 toView:(id)arg2;	// IMP=0x0020000001503c36
- (id)textDocument;	// IMP=0x0020000001506c7e
@property(nonatomic) long long selectionAffinity;
- (_Bool)editing;	// IMP=0x0020000001506c21
- (_Bool)editable;	// IMP=0x0020000001506c19
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x00200000015069a2
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x002000000150699c
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x0020000001506994
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x0020000001506903
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x002000000150688c
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x00200000015067f7
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x0020000001506774
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x00200000015066fb
@property(copy, nonatomic) NSDictionary *markedTextStyle;
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x002000000150656f
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00200000015063fa
- (_Bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00200000015063b0
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000001506341
- (_Bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00200000015062f7
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x002000000150628e
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x0020000001506211
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00200000015061c5
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000150617a
@property(readonly, nonatomic) _Bool hasText;
- (void)unmarkText;	// IMP=0x00200000015060f5
@property(readonly, nonatomic) UITextRange *markedTextRange;
- (void)moveDown;	// IMP=0x0020000001506015
- (void)moveUp;	// IMP=0x0020000001505fa8
- (void)moveLeft;	// IMP=0x0020000001505f3b
- (void)moveRight;	// IMP=0x0020000001505ece
- (struct CGRect)_lastRectForRange:(id)arg1;	// IMP=0x0020000001505da8
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x0020000001505c8d
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x0020000001505c78
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x0020000001505c60
- (void)replaceRange:(id)arg1 withText:(id)arg2 closeTyping:(_Bool)arg3;	// IMP=0x0020000001505b68
- (id)rangeOfEnclosingWord:(id)arg1;	// IMP=0x0020000001505b14
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x0020000001505a78
- (id)textInRange:(id)arg1;	// IMP=0x00200000015059ff
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
@property(copy) UITextRange *selectedTextRange;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000001505808
@property(readonly, nonatomic) UIView<UITextInputPrivate> *_textSelectingContainer;
- (void)setBecomesEditableWithGestures:(_Bool)arg1;	// IMP=0x0020000001505732
- (_Bool)becomesEditableWithGestures;	// IMP=0x002000000150572a
- (_Bool)isEditing;	// IMP=0x0020000001505722
- (_Bool)isEditable;	// IMP=0x002000000150571a
- (id)content;	// IMP=0x0020000001505712
- (void)updateSelection;	// IMP=0x002000000150570c
- (id)selectionView;	// IMP=0x00200000015056e1
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (_Bool)isAutoFillMode;	// IMP=0x0020000001505643
- (void)acceptedAutoFillWord:(id)arg1;	// IMP=0x00200000015055ef
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1;	// IMP=0x00200000015055d5
- (void)updateAutoscroll:(id)arg1;	// IMP=0x00200000015051f7
- (id)automaticallySelectedOverlay;	// IMP=0x00200000015051b4
- (void)setInitialSelectionBehavior:(int)arg1;	// IMP=0x00200000015051ae
- (int)initialSelectionBehavior;	// IMP=0x00200000015051a6
@property(nonatomic) long long returnKeyType;
@property(nonatomic) int textLoupeVisibility;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(nonatomic) id textSuggestionDelegate;
- (_Bool)isShowingPlaceholder;	// IMP=0x0020000001505166
- (struct CGRect)convertCaretRect:(struct CGRect)arg1;	// IMP=0x00200000015050d8
- (struct CGRect)caretRect;	// IMP=0x0020000001504fc2
- (void)setSelectionWithPoint:(struct CGPoint)arg1;	// IMP=0x0020000001504fa8
- (void)setSelectionWithPoint:(struct CGPoint)arg1 inset:(double)arg2;	// IMP=0x0020000001504f25
- (id)text;	// IMP=0x0020000001504ecf
- (void)setText:(id)arg1;	// IMP=0x0020000001504e38
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1 withInset:(double)arg2;	// IMP=0x0020000001504c51
- (int)selectionState;	// IMP=0x0020000001504c0e
- (void)selectAll;	// IMP=0x0020000001504bb1
- (_Bool)selectionAtWordStart;	// IMP=0x0020000001504b6e
- (_Bool)selectionAtDocumentStart;	// IMP=0x0020000001504b2b
- (_Bool)hasSelection;	// IMP=0x0020000001504ae8
- (void)extendCurrentSelection:(int)arg1;	// IMP=0x0020000001504a61
- (id)rangeByExtendingCurrentSelection:(int)arg1;	// IMP=0x0020000001504a0f
- (id)rangeByMovingCurrentSelection:(int)arg1;	// IMP=0x00200000015049bd
- (struct _NSRange)selectionRange;	// IMP=0x002000000150497a
- (int)wordOffsetInRange:(id)arg1;	// IMP=0x0020000001504928
- (id)textColorForCaretSelection;	// IMP=0x002000000150490f
- (id)fontForCaretSelection;	// IMP=0x0020000001504800
- (unsigned short)characterAfterCaretSelection;	// IMP=0x00200000015047bd
- (void)replaceCurrentWordWithText:(id)arg1;	// IMP=0x00200000015046e6
- (void)clearMarkedText;	// IMP=0x00200000015046c5
- (id)rectsForNSRange:(struct _NSRange)arg1;	// IMP=0x0020000001504649
- (void)confirmMarkedText:(id)arg1;	// IMP=0x002000000150455e
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000001504494
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000001504442
- (void)removeTextPlaceholder:(id)arg1;	// IMP=0x0020000001504411
- (id)insertTextPlaceholderWithSize:(struct CGSize)arg1;	// IMP=0x00200000015043cf
- (struct CGRect)frameForDictationResultPlaceholder:(id)arg1;	// IMP=0x002000000150435d
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(_Bool)arg2;	// IMP=0x002000000150431d
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
- (id)metadataDictionariesForDictationResults;	// IMP=0x00200000015042c7
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;	// IMP=0x0020000001504287
- (void)endFloatingCursor;	// IMP=0x002000000150425c
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1 animated:(_Bool)arg2;	// IMP=0x0020000001504211
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x00200000015041cf
- (void)beginFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x002000000150418d
- (id)uiWebDocumentView;	// IMP=0x002000000150414a
- (void)insertText:(id)arg1;	// IMP=0x00200000015040c9
- (void)deleteBackward;	// IMP=0x002000000150404b
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
- (void)endSelectionChange;	// IMP=0x002000000150400c
- (void)beginSelectionChange;	// IMP=0x0020000001503fdb
- (void)handleKeyWebEvent:(id)arg1;	// IMP=0x0020000001503f89
- (_Bool)requiresKeyEvents;	// IMP=0x0020000001503f81
- (id)delegate;	// IMP=0x0020000001503f79
- (void)setSecure:(_Bool)arg1;	// IMP=0x0020000001503f73
- (id)textInputTraits;	// IMP=0x0020000001503e27
- (void)setupPlaceholderTextIfNeeded;	// IMP=0x0020000001503e21
@property(nonatomic) _Bool isSingleLineDocument;
- (_Bool)hasContent;	// IMP=0x0020000001503dc9
- (void)takeTraitsFrom:(id)arg1;	// IMP=0x0020000001503d98

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(readonly, nonatomic) long long cursorBehavior;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool forceSpellingDictation;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(retain, nonatomic) UIColor *insertionPointColor;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) long long selectionGranularity;
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(readonly, nonatomic) _Bool supportsImagePaste;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;
@end

