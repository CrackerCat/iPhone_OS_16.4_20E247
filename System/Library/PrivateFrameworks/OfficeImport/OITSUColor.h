//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class UIColor;

__attribute__((visibility("hidden")))
@interface OITSUColor : NSObject
{
    struct CGColor *mCGColor;	// 8 = 0x8
    unsigned long long mColorRGBSpace;	// 16 = 0x10
}

+ (id)brownColor;	// IMP=0x00100000002c9252
+ (id)purpleColor;	// IMP=0x00100000002c921a
+ (id)orangeColor;	// IMP=0x00100000002c91e2
+ (id)magentaColor;	// IMP=0x00100000002c91af
+ (id)yellowColor;	// IMP=0x00100000002c917c
+ (id)cyanColor;	// IMP=0x00100000002c9149
+ (id)blueColor;	// IMP=0x00100000002c9116
+ (id)greenColor;	// IMP=0x00100000002c90e3
+ (id)redColor;	// IMP=0x00100000002c90b0
+ (id)lightGrayColor;	// IMP=0x00100000002c907e
+ (id)grayColor;	// IMP=0x00100000002c904c
+ (id)whiteColor;	// IMP=0x00100000002c901f
+ (id)blackColor;	// IMP=0x00100000002c8ff2
+ (id)clearColor;	// IMP=0x00100000002c8fca
+ (id)randomColor;	// IMP=0x00100000002c8f85
+ (id)colorWithUIColor:(id)arg1;	// IMP=0x00100000002c8f3c
+ (id)colorWithHexString:(id)arg1;	// IMP=0x00100000002c8ef3
+ (id)colorWithPatternImage:(id)arg1;	// IMP=0x00100000002c8eaa
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5;	// IMP=0x00100000002c8e50
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002c8dfe
+ (id)colorWithWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002c8dc0
+ (id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002c8d6e
+ (id)colorWithCGColor:(struct CGColor *)arg1;	// IMP=0x00100000002c8d3f
+ (id)stringForColor:(id)arg1;	// IMP=0x00100000002d2bc2
+ (id)stringForSystemColorID:(int)arg1;	// IMP=0x00100000002d2ba1
+ (id)colorWithSystemColorID:(int)arg1;	// IMP=0x00100000002d2b3e
+ (id)colorWithBGR:(unsigned int)arg1;	// IMP=0x00100000002d2aca
+ (id)colorWithCatalogName:(id)arg1 colorName:(id)arg2;	// IMP=0x00100000002d2765
+ (id)colorWithDeviceCyan:(double)arg1 magenta:(double)arg2 yellow:(double)arg3 black:(double)arg4 alpha:(double)arg5;	// IMP=0x00100000002d26da
+ (id)colorWithDeviceRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002d26c1
+ (id)colorWithDeviceHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002d2688
+ (id)colorWithDeviceWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002d266f
+ (id)colorWithCalibratedRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002d2656
+ (id)colorWithCalibratedHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002d261d
+ (id)colorWithCalibratedWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002d2604
+ (id)colorWithBinaryRed:(int)arg1 green:(int)arg2 blue:(int)arg3 alpha:(int)arg4;	// IMP=0x00100000002d25c1
+ (id)colorWithBinaryRed:(int)arg1 green:(int)arg2 blue:(int)arg3;	// IMP=0x00100000002d25a9
+ (id)colorWithEshColor:(const struct EshColor *)arg1;	// IMP=0x0010000000345694
+ (id)colorWithCsColour:(const struct CsColour *)arg1;	// IMP=0x00100000003455e6
+ (id)colorWithRGBBytes:(unsigned char)arg1 green:(unsigned char)arg2 blue:(unsigned char)arg3;	// IMP=0x001000000035cf1e
+ (id)colorWithRGBValue:(long long)arg1;	// IMP=0x001000000039f2ea
+ (id)colorWithBGRValue:(long long)arg1;	// IMP=0x001000000039f273
@property(readonly, nonatomic) unsigned long long colorRGBSpace; // @synthesize colorRGBSpace=mColorRGBSpace;
- (id)hexString;	// IMP=0x00000000002cb34d
- (void)paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000002cb301
- (void)paintRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000002cb2b3
- (id)newBlendedColorWithFraction:(double)arg1 ofColor:(id)arg2;	// IMP=0x00000000002cb167
- (id)blendedColorWithFraction:(double)arg1 ofColor:(id)arg2;	// IMP=0x00000000002cb14d
- (_Bool)wantsHighContrastBackgroundForDarkMode:(id)arg1;	// IMP=0x00000000002cb0c2
- (_Bool)isNearlyWhite;	// IMP=0x00000000002cb008
- (_Bool)isOpaque;	// IMP=0x00000000002cafdc
- (double)luminance;	// IMP=0x00000000002cae7f
- (id)colorWithAlphaComponent:(double)arg1;	// IMP=0x00000000002cae36
- (id)invertedColor;	// IMP=0x00000000002cace7
- (id)grayscaleColor;	// IMP=0x00000000002cac26
@property(readonly, nonatomic) UIColor *UIColor;
- (double)brightnessComponent;	// IMP=0x00000000002cab60
- (double)saturationComponent;	// IMP=0x00000000002caacf
- (double)hueComponent;	// IMP=0x00000000002caa3e
- (void)getRGBAComponents:(double *)arg1;	// IMP=0x00000000002ca91b
@property(readonly, nonatomic) double alphaComponent;
@property(readonly, nonatomic) double blueComponent;
@property(readonly, nonatomic) double greenComponent;
@property(readonly, nonatomic) double redComponent;
- (double)p_rgbComponentWithIndex:(unsigned char)arg1;	// IMP=0x00000000002ca813
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000002ca808
- (_Bool)isEqualWithTolerance:(id)arg1;	// IMP=0x00000000002ca78e
- (_Bool)isAlmostEqualToColor:(id)arg1;	// IMP=0x00000000002ca654
- (_Bool)p_isEqualToColor:(id)arg1 withTolerance:(double)arg2;	// IMP=0x00000000002ca2e2
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000002ca2d0
- (unsigned long long)hash;	// IMP=0x00000000002ca2c5
- (void)dealloc;	// IMP=0x00000000002ca28b
- (id)initWithUIColor:(id)arg1;	// IMP=0x00000000002ca03a
- (id)initWithHexString:(id)arg1;	// IMP=0x00000000002c9cc2
- (id)initWithPatternImage:(id)arg1;	// IMP=0x00000000002c9b27
- (id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5;	// IMP=0x00000000002c9a8d
- (id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002c9a73
- (id)initWithWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00000000002c9a58
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 colorSpace:(unsigned long long)arg5;	// IMP=0x00000000002c9974
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002c995a
- (id)initWithCGColor:(struct CGColor *)arg1;	// IMP=0x00000000002c9943
- (id)initWithCGColor:(struct CGColor *)arg1 colorSpace:(unsigned long long)arg2;	// IMP=0x00000000002c9294
@property(readonly) struct CGColor *CGColor;
- (void)set;	// IMP=0x00000000002d2d5e
- (id)colorWithShadeValue:(double)arg1;	// IMP=0x00000000002d2cdb
- (id)colorWithTintValue:(double)arg1;	// IMP=0x00000000002d2c57
- (unsigned int)toBGR;	// IMP=0x00000000002d2ab2
- (id)copy;	// IMP=0x00000000002d2a66
@property(readonly) int CGColorSpaceModel;
@property(readonly) struct CGColorSpace *CGColorSpace;
- (void)getCyan:(double *)arg1 magenta:(double *)arg2 yellow:(double *)arg3 black:(double *)arg4 alpha:(double *)arg5;	// IMP=0x00000000002d2981
@property(readonly) double blackComponent;
@property(readonly) double yellowComponent;
@property(readonly) double magentaComponent;
@property(readonly) double cyanComponent;
- (double)p_cmykComponentWithIndex:(unsigned char)arg1;	// IMP=0x00000000002d28b4
- (void)getWhite:(double *)arg1 alpha:(double *)arg2;	// IMP=0x00000000002d2863
@property(readonly) double whiteComponent;
- (void)getRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;	// IMP=0x00000000002d276d
- (id)solidColoredPngImage;	// IMP=0x00000000002d25a1
- (id)newSolidColoredBitmap:(struct CGSize)arg1;	// IMP=0x00000000002d2599
- (CDStruct_a06f635e)ttColor;	// IMP=0x00000000002d24ed
- (struct EshColor)eshColor;	// IMP=0x0000000000345734
- (struct CsColour)csColour;	// IMP=0x0000000000345649
- (void)getRGBBytes:(char *)arg1 green:(char *)arg2 blue:(char *)arg3;	// IMP=0x000000000035cf59
- (_Bool)isBlack;	// IMP=0x0000000000474278

@end

