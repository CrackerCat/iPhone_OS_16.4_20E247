//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSMutableDictionary, NSURL, PHASECardioidDirectivityModelParameters, PHASEEngine, PHASENumberMetaParameterDefinition;

__attribute__((visibility("hidden")))
@interface REPHASEContext : NSObject
{
    _Bool _testNilEngine;	// 8 = 0x8
    double _referenceGainDBSPL;	// 16 = 0x10
    PHASEEngine *_engine;	// 24 = 0x18
    int _mixerDefNameCounter;	// 32 = 0x20
    struct atomic<bool> _stoppedAndDestroyed;	// 36 = 0x24
    struct unique_ptr<re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> _scenes;	// 48 = 0x30
    struct unique_ptr<re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> _shapes;	// 112 = 0x70
    struct unique_ptr<re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> _soundEvents;	// 176 = 0xb0
    struct UnfairLock _soundEventsMutex;	// 240 = 0xf0
    struct unique_ptr<re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> _soundEventsPreparing;	// 256 = 0x100
    struct UnfairLock _soundEventsPreparingMutex;	// 320 = 0x140
    struct unique_ptr<re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> _audioAssets;	// 336 = 0x150
    struct UnfairLock _audioAssetsMutex;	// 400 = 0x190
    struct UnfairLock _audioEngineMutex;	// 404 = 0x194
    _Bool _shouldPostNotificationWhenPHASESoundEventCreated;	// 408 = 0x198
    _Bool _automaticUpdate;	// 409 = 0x199
    _Bool _engineIsConfiguredForAutomaticUpdate;	// 410 = 0x19a
    unsigned int _maxBufferSize;	// 412 = 0x19c
    double _sampleRate;	// 416 = 0x1a0
    PHASENumberMetaParameterDefinition *_gainLinearParamDefinition;	// 424 = 0x1a8
    PHASENumberMetaParameterDefinition *_rateParamDefinition;	// 432 = 0x1b0
    PHASENumberMetaParameterDefinition *_reverbSendParamDefinition;	// 440 = 0x1b8
    PHASENumberMetaParameterDefinition *_directSendParamDefinition;	// 448 = 0x1c0
    PHASECardioidDirectivityModelParameters *_humanDirectivity;	// 456 = 0x1c8
    NSMutableDictionary *_mixGroups;	// 464 = 0x1d0
    long long _reverbPreset;	// 472 = 0x1d8
    long long _spaceBlendTargetReverbPreset;	// 480 = 0x1e0
    NSURL *_customHRIRURL;	// 488 = 0x1e8
}

- (id).cxx_construct;	// IMP=0x0000000000322ed9
- (void).cxx_destruct;	// IMP=0x0000000000322e24
@property(readonly, nonatomic) _Bool engineIsConfiguredForAutomaticUpdate; // @synthesize engineIsConfiguredForAutomaticUpdate=_engineIsConfiguredForAutomaticUpdate;
@property(nonatomic) _Bool automaticUpdate; // @synthesize automaticUpdate=_automaticUpdate;
@property(nonatomic) _Bool shouldPostNotificationWhenPHASESoundEventCreated; // @synthesize shouldPostNotificationWhenPHASESoundEventCreated=_shouldPostNotificationWhenPHASESoundEventCreated;
@property(retain, nonatomic) NSURL *customHRIRURL; // @synthesize customHRIRURL=_customHRIRURL;
@property(nonatomic) long long spaceBlendTargetReverbPreset; // @synthesize spaceBlendTargetReverbPreset=_spaceBlendTargetReverbPreset;
@property(nonatomic) long long reverbPreset; // @synthesize reverbPreset=_reverbPreset;
@property(readonly, nonatomic) NSMutableDictionary *mixGroups; // @synthesize mixGroups=_mixGroups;
@property(readonly, nonatomic) PHASECardioidDirectivityModelParameters *humanDirectivity; // @synthesize humanDirectivity=_humanDirectivity;
@property(readonly, nonatomic) PHASENumberMetaParameterDefinition *directSendParamDefinition; // @synthesize directSendParamDefinition=_directSendParamDefinition;
@property(readonly, nonatomic) PHASENumberMetaParameterDefinition *reverbSendParamDefinition; // @synthesize reverbSendParamDefinition=_reverbSendParamDefinition;
@property(readonly, nonatomic) PHASENumberMetaParameterDefinition *rateParamDefinition; // @synthesize rateParamDefinition=_rateParamDefinition;
@property(readonly, nonatomic) PHASENumberMetaParameterDefinition *gainLinearParamDefinition; // @synthesize gainLinearParamDefinition=_gainLinearParamDefinition;
@property(readonly, nonatomic) unsigned int maxBufferSize; // @synthesize maxBufferSize=_maxBufferSize;
@property(readonly, nonatomic) double sampleRate; // @synthesize sampleRate=_sampleRate;
- (void)testNilEngine;	// IMP=0x0000000000322d4e
- (_Bool)engineShouldBeRunning;	// IMP=0x0000000000322cb7
- (void)removeEntity:(unsigned long long)arg1;	// IMP=0x0000000000322c28
- (id)phaseGroupWithSceneID:(unsigned long long)arg1 playbackHostConnectionIdentifier:(unsigned long long)arg2 groupID:(unsigned long long)arg3;	// IMP=0x0000000000322b65
- (void)createPendingListenersIfReady;	// IMP=0x0000000000322aba
- (double)doubleFromPlistValue:(id)arg1 defaultValue:(double)arg2;	// IMP=0x0000000000322a43
- (void)loadHumanDirectivityPlistFromURL:(id)arg1;	// IMP=0x000000000032249a
- (void)applyCustomHRIR;	// IMP=0x00000000003223b5
- (id)spatialMixerDefinition:(id)arg1;	// IMP=0x00000000003212e4
- (void)postDidCreateSoundEventNotificationWithSource:(id)arg1 mixGroupID:(unsigned long long)arg2;	// IMP=0x000000000032116a
- (void)setPreparing:(_Bool)arg1 forToken:(unsigned long long)arg2;	// IMP=0x000000000032100f
- (void)addEvent:(id)arg1 forToken:(unsigned long long)arg2;	// IMP=0x0000000000320e01
- (void)removeEventFor:(unsigned long long)arg1;	// IMP=0x0000000000320b5b
- (_Bool)eventBeingPrepared:(unsigned long long)arg1;	// IMP=0x00000000003209c2
- (id)eventFor:(unsigned long long)arg1;	// IMP=0x000000000032089b
- (void)prepare:(id)arg1;	// IMP=0x000000000031df8a
- (id)mixerParametersForPrepareState:(id)arg1 source:(id)arg2 listener:(id)arg3 mixerIdentifiers:(id)arg4;	// IMP=0x000000000031dc4b
- (id)samplerDefForFileAsset:(unsigned long long)arg1 with:(id)arg2;	// IMP=0x000000000031d968
- (id)createSamplerDefinitionForToken:(unsigned long long)arg1;	// IMP=0x000000000031d76f
- (id)baseMixerDefinitionWith:(id)arg1;	// IMP=0x000000000031d0d0
- (void)applyReverbPreset;	// IMP=0x000000000031cd71
- (float)allowableUpwardGainForAudioAssetID:(unsigned long long)arg1;	// IMP=0x000000000031ccee
- (void)removeAudioAssetID:(unsigned long long)arg1;	// IMP=0x000000000031cb9a
- (_Bool)getConfigurationForAudioAssetID:(unsigned long long)arg1 configuration:(struct AudioAssetConfiguration *)arg2;	// IMP=0x000000000031ca43
- (void)addAudioAssetID:(unsigned long long)arg1 asset:(id)arg2 configuration:(const struct AudioAssetConfiguration *)arg3;	// IMP=0x000000000031c81a
- (id)phaseIDForAssetID:(unsigned long long)arg1;	// IMP=0x000000000031c7f5
- (id)groupUDIDWithSceneID:(unsigned long long)arg1 playbackHostConnectionIdentifier:(unsigned long long)arg2 groupID:(unsigned long long)arg3;	// IMP=0x000000000031c6e9
- (id)sceneForID:(unsigned long long)arg1;	// IMP=0x000000000031c3a9
- (void)stopAllAndReset;	// IMP=0x000000000031c0b0
- (void)update;	// IMP=0x000000000031bf75
@property(readonly) PHASEEngine *engine;
@property(readonly) PHASEEngine *maybeEngine;
- (void *)soundEventsPreparing;	// IMP=0x000000000031bc3f
- (void *)soundEvents;	// IMP=0x000000000031bc32
- (void *)shapes;	// IMP=0x000000000031bc28
- (void *)scenes;	// IMP=0x000000000031bc1e
- (id)initWithSampleRate:(double)arg1 maxBufferSize:(unsigned int)arg2 referenceGain:(double)arg3 automaticUpdate:(_Bool)arg4;	// IMP=0x000000000031b438

@end

