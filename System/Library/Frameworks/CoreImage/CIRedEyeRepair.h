//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray;

__attribute__((visibility("hidden")))
@interface CIRedEyeRepair : NSObject
{
    _Bool ownLF;	// 8 = 0x8
    CDStruct_79f2618e *lf;	// 16 = 0x10
    int imageSourceType;	// 24 = 0x18
    struct CGImageBlockSet *blockSet;	// 32 = 0x20
    void *releaseMe;	// 40 = 0x28
    struct __CFData *dataRef;	// 48 = 0x30
    NSArray *faces;	// 56 = 0x38
    int nRepairs;	// 64 = 0x40
    int nextRepairTag;	// 68 = 0x44
    CDStruct_8d997f87 repairs[32];	// 72 = 0x48
    int lastRepairTag;	// 12872 = 0x3248
    float lastRepairIOD;	// 12876 = 0x324c
    CDStruct_6ca1d5c6 standardTemplate;	// 12880 = 0x3250
    int iFaceIndex;	// 12896 = 0x3260
    _Bool iLeft;	// 12900 = 0x3264
    _Bool debugRedEye;	// 12901 = 0x3265
    _Bool logRepairs;	// 12902 = 0x3266
    int redEyeThresholdKind;	// 12904 = 0x3268
    _Bool renderAlpha;	// 12908 = 0x326c
    _Bool infillBackground;	// 12909 = 0x326d
    _Bool renderSpecularShine;	// 12910 = 0x326e
    float specularSize;	// 12912 = 0x3270
    float specularSoftness;	// 12916 = 0x3274
    _Bool pupilShadeAlignment;	// 12920 = 0x3278
    _Bool autoPupilTonality;	// 12921 = 0x3279
    _Bool forceLoValue;	// 12922 = 0x327a
    int loValue;	// 12924 = 0x327c
    CDStruct_c3faddef lastClickYBitmap;	// 12928 = 0x3280
    CDStruct_c3faddef lastClickCbCrBitmap;	// 12968 = 0x32a8
    int lastClickBitmapMinX;	// 13008 = 0x32d0
    int lastClickBitmapMaxX;	// 13012 = 0x32d4
    int lastClickBitmapMinY;	// 13016 = 0x32d8
    int lastClickBitmapMaxY;	// 13020 = 0x32dc
    CDStruct_c3faddef lastClickYBitmaps[3];	// 13024 = 0x32e0
    CDStruct_c3faddef lastClickCbCrBitmaps[3];	// 13144 = 0x3358
    CDStruct_5973fb4f lastClickBitmapRects[3];	// 13264 = 0x33d0
    CDStruct_c3faddef lastSearchYBitmap;	// 13312 = 0x3400
    CDStruct_c3faddef lastSearchCbCrBitmap;	// 13352 = 0x3428
    int lastSearchBitmapMinX;	// 13392 = 0x3450
    int lastSearchBitmapMaxX;	// 13396 = 0x3454
    int lastSearchBitmapMinY;	// 13400 = 0x3458
    int lastSearchBitmapMaxY;	// 13404 = 0x345c
    int nPolyPoints;	// 13408 = 0x3460
    _Bool polyClosed;	// 13412 = 0x3464
    struct CGPoint polyPoints[20];	// 13416 = 0x3468
    CDStruct_12b04d25 polyLines[20];	// 13736 = 0x35a8
    _Bool polyPointConcave[20];	// 13976 = 0x3698
    unsigned char CbCrDistanceTable[65536];	// 13996 = 0x36ac
    int nLinears;	// 79532 = 0x136ac
    int linearCoefficients[8][3];	// 79536 = 0x136b0
}

+ (struct CGRect)supportRectangleWithFaceArray:(id)arg1 imageSize:(struct CGSize)arg2;	// IMP=0x00600000001edf6e
+ (struct CGRect)supportRectangleWithRepair:(id)arg1 imageSize:(struct CGSize)arg2;	// IMP=0x00600000001ede2d
+ (struct CGRect)supportRectangleWithPoint:(struct CGPoint)arg1 imageSize:(struct CGSize)arg2 IOD:(float)arg3;	// IMP=0x00600000001edd44
+ (float)upperRepairDistance:(float)arg1;	// IMP=0x00600000001edc84
+ (float)upperRepairDistanceFraction:(float)arg1;	// IMP=0x00600000001edc16
- (void)setLeft:(_Bool)arg1;	// IMP=0x00000000001f5f34
- (void)setFaceIndex:(int)arg1;	// IMP=0x00000000001f5f28
- (void)executeRepairArray:(id)arg1;	// IMP=0x00000000001f5eb8
- (void)executeRepair:(id)arg1;	// IMP=0x00000000001f501f
- (void)orientPointX:(float *)arg1 Y:(float *)arg2;	// IMP=0x00000000001f4ff4
- (void)orientRectangleMinX:(float *)arg1 maxX:(float *)arg2 minY:(float *)arg3 maxY:(float *)arg4;	// IMP=0x00000000001f4fb2
- (_Bool)getBool:(_Bool *)arg1 d:(id)arg2 s:(id)arg3;	// IMP=0x00000000001f4f6f
- (_Bool)getInt:(int *)arg1 d:(id)arg2 s:(id)arg3;	// IMP=0x00000000001f4f2c
- (_Bool)getFloat:(float *)arg1 d:(id)arg2 s:(id)arg3;	// IMP=0x00000000001f4ee6
- (id)repairArray;	// IMP=0x00000000001f44f0
- (void)autoRepairWithFaceArray:(id)arg1;	// IMP=0x00000000001f399c
- (int)redEyeRemovalWithData:(CDStruct_1c31e7e7)arg1;	// IMP=0x00000000001f2f45
- (void)skinInit;	// IMP=0x00000000001f2eea
- (void)prepareLineFunctions;	// IMP=0x00000000001f2a8a
- (int)distanceMaskFromPolyToCb:(int)arg1 Cr:(int)arg2;	// IMP=0x00000000001f2a0c
- (void)autoRepairExtractAndSearchLeft:(CDStruct_a734b2e2)arg1 right:(CDStruct_a734b2e2)arg2 data:(CDStruct_935079c3 *)arg3 repairSize:(float)arg4 autoPupilTonality:(_Bool)arg5 faceIndex:(int)arg6;	// IMP=0x00000000001f2310
- (int)applyEyeRepairWithEye:(CDStruct_3edab2bb *)arg1 left:(_Bool)arg2 IOD:(float)arg3 autoPupilTonality:(_Bool)arg4 match:(CDStruct_a734b2e2 *)arg5 faceIndex:(int)arg6 whiteHopper:(CDStruct_08ff8b76 *)arg7;	// IMP=0x00000000001f20b1
- (CDStruct_3edab2bb)repairDecisionWithFaceRecord:(CDStruct_935079c3 *)arg1 left:(_Bool)arg2 redHopper:(CDStruct_08ff8b76 *)arg3 whiteHopper:(CDStruct_08ff8b76 *)arg4;	// IMP=0x00000000001f1ff8
- (_Bool)extractAndGatherProminencesWithRect:(CDStruct_a734b2e2)arg1 face:(CDStruct_935079c3 *)arg2 faceIndex:(int)arg3 left:(_Bool)arg4 maxwindowsize:(float)arg5 repairsize:(float)arg6 returningRedHopper:(CDStruct_08ff8b76 *)arg7 whiteHopper:(CDStruct_08ff8b76 *)arg8 redChannel:(CDStruct_c3faddef *)arg9 redChannelMask:(CDStruct_c3faddef *)arg10;	// IMP=0x00000000001f1c09
- (_Bool)gatherProminencesWithC:(CDStruct_c3faddef *)arg1 MC:(CDStruct_c3faddef *)arg2 altC:(CDStruct_c3faddef *)arg3 altMC:(CDStruct_c3faddef *)arg4 maxwindowsize:(int)arg5 repairsize:(int)arg6 IR:(CDStruct_a734b2e2)arg7 fr:(CDStruct_935079c3 *)arg8 intoHopper:(CDStruct_08ff8b76 *)arg9 faceIndex:(int)arg10 left:(_Bool)arg11;	// IMP=0x00000000001f1865
- (_Bool)gatherProminencesWithC:(CDStruct_c3faddef *)arg1 MC:(CDStruct_c3faddef *)arg2 maxwindowsize:(int)arg3 repairsize:(int)arg4 IR:(CDStruct_a734b2e2)arg5 fr:(CDStruct_935079c3 *)arg6 intoHopper:(CDStruct_08ff8b76 *)arg7 faceIndex:(int)arg8 left:(_Bool)arg9 coss:(float [10])arg10 sins:(float [10])arg11 bitmapName:(char *)arg12;	// IMP=0x00000000001f10c4
- (void)insertIntoProminenceVettingHopper:(CDStruct_08ff8b76 *)arg1 max:(int)arg2 outside:(int)arg3 confidence:(float)arg4 distance:(float)arg5 row:(int)arg6 column:(int)arg7 IOD:(float)arg8;	// IMP=0x00000000001f0f43
- (float)confidenceWithIOD:(float)arg1 repair:(int)arg2 andProminenceDifference:(int)arg3;	// IMP=0x00000000001f0dba
- (float)extractAverageFaceY:(CDStruct_935079c3 *)arg1 contrast:(float *)arg2 faceIndex:(int)arg3;	// IMP=0x00000000001f0a8c
- (void)redoLastRepair;	// IMP=0x00000000001f0a5b
- (int)redoRepairWithTag:(int)arg1 IOD:(float)arg2;	// IMP=0x00000000001f0990
- (CDStruct_8d997f87 *)repairWithTag:(int)arg1;	// IMP=0x00000000001f095f
- (int)redEyeRemovalWithPoint:(struct CGPoint)arg1 alignPupilShades:(_Bool)arg2 matching:(CDStruct_a734b2e2)arg3 force:(int)arg4 IOD:(float)arg5 tap:(_Bool)arg6;	// IMP=0x00000000001ef1b7
- (_Bool)extractReusableAlignedBitmapsAroundPoint:(CDStruct_c3faddef *)arg1 YR:(CDStruct_a734b2e2)arg2 subYBitmap:(CDStruct_c3faddef *)arg3 subCbCrBitmap:(CDStruct_c3faddef *)arg4;	// IMP=0x00000000001eee8b
- (_Bool)computeTrimmedBitmaps:(CDStruct_c3faddef *)arg1 newY:(CDStruct_c3faddef *)arg2 newCbCr:(CDStruct_c3faddef *)arg3 IR:(CDStruct_a734b2e2)arg4 newTrimY:(CDStruct_c3faddef *)arg5 newTrimCbCr:(CDStruct_c3faddef *)arg6 returningYR:(CDStruct_a734b2e2 *)arg7 andCbCrR:(CDStruct_a734b2e2 *)arg8;	// IMP=0x00000000001ee9d0
- (float)lowerRepairSize:(float)arg1;	// IMP=0x00000000001edd1f
- (float)upperRepairSize:(float)arg1;	// IMP=0x00000000001edcfa
- (float)lowerRepairSizeFraction:(float)arg1;	// IMP=0x00000000001edbd2
- (float)upperRepairSizeFraction:(float)arg1;	// IMP=0x00000000001edb8e
- (int)averageValueFromY:(CDStruct_c3faddef *)arg1 withinSkinMask:(CDStruct_c3faddef *)arg2 butOutsideAlpha:(CDStruct_c3faddef *)arg3;	// IMP=0x00000000001edac2
- (void)undoRepair:(int)arg1;	// IMP=0x00000000001ed9fc
- (int)format;	// IMP=0x00000000001ed9ec
- (int)lastRepairTag;	// IMP=0x00000000001ed9e0
- (int)nRepairs;	// IMP=0x00000000001ed9d7
- (CDStruct_8d997f87 *)repairs;	// IMP=0x00000000001ed9cd
- (id)faces;	// IMP=0x00000000001ed9c3
- (CDStruct_a734b2e2)standardTemplate;	// IMP=0x00000000001ed9af
- (void)setLoValue:(int)arg1;	// IMP=0x00000000001ed9a3
- (int)loValue;	// IMP=0x00000000001ed997
- (void)setForceLoValue:(_Bool)arg1;	// IMP=0x00000000001ed98b
- (_Bool)forceLoValue;	// IMP=0x00000000001ed97f
- (void)setAutoPupilTonality:(_Bool)arg1;	// IMP=0x00000000001ed973
- (_Bool)autoPupilTonality;	// IMP=0x00000000001ed967
- (void)setPupilShadeAlignment:(_Bool)arg1;	// IMP=0x00000000001ed95b
- (_Bool)pupilShadeAlignment;	// IMP=0x00000000001ed94f
- (void)setSpecularSoftness:(float)arg1;	// IMP=0x00000000001ed941
- (float)specularSoftness;	// IMP=0x00000000001ed933
- (void)setSpecularSize:(float)arg1;	// IMP=0x00000000001ed925
- (float)specularSize;	// IMP=0x00000000001ed917
- (void)setRenderSpecularShine:(_Bool)arg1;	// IMP=0x00000000001ed90b
- (_Bool)renderSpecularShine;	// IMP=0x00000000001ed8ff
- (void)setInfillBackground:(_Bool)arg1;	// IMP=0x00000000001ed8f3
- (_Bool)infillBackground;	// IMP=0x00000000001ed8e7
- (void)setRenderAlpha:(_Bool)arg1;	// IMP=0x00000000001ed8db
- (_Bool)renderAlpha;	// IMP=0x00000000001ed8cf
- (void)setRedEyeThresholdKind:(int)arg1;	// IMP=0x00000000001ed8c3
- (int)redEyeThresholdKind;	// IMP=0x00000000001ed8b7
- (void)setLogRepairs:(_Bool)arg1;	// IMP=0x00000000001ed8ab
- (_Bool)logRepairs;	// IMP=0x00000000001ed89f
- (void)setDebug:(_Bool)arg1;	// IMP=0x00000000001ed893
- (_Bool)debug;	// IMP=0x00000000001ed887
- (void)dealloc;	// IMP=0x00000000001ed76f
- (id)initWithExternalBuffer:(char *)arg1 subRectangle:(struct CGRect)arg2 fullSize:(struct CGSize)arg3 rowBytes:(unsigned long long)arg4 cameraModel:(id)arg5;	// IMP=0x00000000001ed60a
- (id)initWithExternalBuffer:(char *)arg1 size:(struct CGSize)arg2 rowBytes:(unsigned long long)arg3;	// IMP=0x00000000001ed513
- (id)initWithFrameExternalBuffer:(CDStruct_79f2618e *)arg1;	// IMP=0x00000000001ed4c6
- (id)initWithDeskView:(id)arg1 andFrame:(CDStruct_79f2618e *)arg2;	// IMP=0x00000000001ed480
- (void)initializeNonDebugVariables;	// IMP=0x00000000001ed3f4
- (void)repairExternalBuffer;	// IMP=0x00000000001ed39d
- (struct CGImage *)createRepairedImage;	// IMP=0x00000000001ed214
- (id)initWithCGImage:(struct CGImage *)arg1 cameraModel:(id)arg2;	// IMP=0x00000000001ecfe3
- (void)setColorSpace:(struct CGColorSpace *)arg1;	// IMP=0x00000000001ecfae
- (_Bool)getDataProviderCopyWithImage:(struct CGImage *)arg1 into:(CDStruct_c3faddef *)arg2;	// IMP=0x00000000001ecf0f
- (_Bool)getDataProviderBytePtrWithImage:(struct CGImage *)arg1 into:(CDStruct_c3faddef *)arg2 width:(unsigned long long)arg3 height:(unsigned long long)arg4;	// IMP=0x00000000001ece73
- (_Bool)getBlockSetWithImage:(struct CGImage *)arg1 into:(CDStruct_c3faddef *)arg2 width:(unsigned long long)arg3 height:(unsigned long long)arg4;	// IMP=0x00000000001ecca4

@end

