//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray, NSCountedSet, NSError, NSFileAccessProcessManager, NSMutableArray, NSMutableDictionary, NSMutableOrderedSet, NSMutableSet, NSString, NSXPCConnection;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

__attribute__((visibility("hidden")))
@interface NSFileAccessClaim : NSObject
{
    NSXPCConnection *_client;	// 8 = 0x8
    NSString *_claimID;	// 16 = 0x10
    NSString *_purposeIDOrNil;	// 24 = 0x18
    _Bool _cameFromSuperarbiter;	// 32 = 0x20
    unsigned long long _blockageCount;	// 40 = 0x28
    _Bool _didWait;	// 48 = 0x30
    _Bool _isRevoked;	// 49 = 0x31
    NSMutableArray *_claimerBlockageReasons;	// 56 = 0x38
    NSError *_claimerError;	// 64 = 0x40
    NSMutableOrderedSet *_pendingClaims;	// 72 = 0x48
    NSMutableSet *_blockingClaims;	// 80 = 0x50
    NSCountedSet *_blockingReactorIDs;	// 88 = 0x58
    NSMutableArray *_providerCancellationProcedures;	// 96 = 0x60
    NSMutableDictionary *_reacquisitionProceduresByPresenterID;	// 104 = 0x68
    NSMutableArray *_revocationProcedures;	// 112 = 0x70
    NSMutableArray *_devaluationProcedures;	// 120 = 0x78
    NSMutableArray *_finishingProcedures;	// 128 = 0x80
    NSFileAccessProcessManager *_processManager;	// 136 = 0x88
    NSObject<OS_dispatch_semaphore> *_claimerWaiter;	// 144 = 0x90
    _Bool _hasInvokedClaimer;	// 152 = 0x98
    _Bool _shouldEnableMaterializationDuringAccessorBlock;	// 153 = 0x99
    id _claimerOrNil;	// 160 = 0xa0
    CDUnknownBlockType _serverClaimerOrNil;	// 168 = 0xa8
    NSMutableArray *_sandboxTokens;	// 176 = 0xb0
    NSObject<OS_dispatch_queue> *_arbiterQueue;	// 184 = 0xb8
    id _originatingReactorQueueID;	// 192 = 0xc0
    NSMutableDictionary *_fileHandlesForEvictionProtection;	// 200 = 0xc8
}

+ (_Bool)supportsSecureCoding;	// IMP=0x001000000059b922
+ (_Bool)canNewWriteOfItemAtLocation:(id)arg1 options:(unsigned long long)arg2 safelyOverlapExistingWriteOfItemAtLocation:(id)arg3 options:(unsigned long long)arg4;	// IMP=0x001000000059b3b2
+ (_Bool)canReadingItemAtLocation:(id)arg1 options:(unsigned long long)arg2 safelyOverlapNewWriting:(_Bool)arg3 ofItemAtLocation:(id)arg4 options:(unsigned long long)arg5;	// IMP=0x001000000059b349
@property _Bool shouldEnableMaterializationDuringAccessorBlock; // @synthesize shouldEnableMaterializationDuringAccessorBlock=_shouldEnableMaterializationDuringAccessorBlock;
@property(readonly) NSObject<OS_dispatch_semaphore> *claimerWaiter; // @synthesize claimerWaiter=_claimerWaiter;
- (void)_protectIfNecessaryFileAtURL:(id)arg1 withOptions:(unsigned long long)arg2 forReading:(_Bool)arg3;	// IMP=0x00000000005a270c
- (void)protectFilesAgainstEviction;	// IMP=0x00000000005a2706
- (_Bool)shouldCancelInsteadOfWaiting;	// IMP=0x00000000005a26fe
@property(readonly, copy) NSArray *allURLs;
- (void)disavowed;	// IMP=0x00000000005a25dd
- (void)finished;	// IMP=0x00000000005a23d9
- (_Bool)shouldBeRevokedPriorToInvokingAccessor;	// IMP=0x00000000005a23d1
- (id)purposeIDOfClaimOnItemAtLocation:(id)arg1 forMessagingPresenter:(id)arg2;	// IMP=0x00000000005a2210
- (_Bool)checkIfSymbolicLinkAtURL:(id)arg1 withResolutionCount:(long long *)arg2 andIfSoThenReevaluateSelf:(CDUnknownBlockType)arg3;	// IMP=0x00000000005a1f39
- (id)description;	// IMP=0x00000000005a1f20
- (id)descriptionWithIndenting:(id)arg1;	// IMP=0x00000000005a1acc
- (void)itemAtLocation:(id)arg1 wasReplacedByItemAtLocation:(id)arg2;	// IMP=0x00000000005a1ac6
- (_Bool)isRevoked;	// IMP=0x00000000005a1abd
- (_Bool)isGranted;	// IMP=0x00000000005a1aa5
- (void)devalueOldClaim:(id)arg1;	// IMP=0x00000000005a1a9f
- (void)cancelled;	// IMP=0x00000000005a18e0
- (void)devalueSelf;	// IMP=0x00000000005a15fd
- (void)revoked;	// IMP=0x00000000005a12e8
- (void)invokeClaimer;	// IMP=0x00000000005a12b7
- (void)prepareItemForUploadingFromURL:(id)arg1 thenContinue:(CDUnknownBlockType)arg2;	// IMP=0x00000000005a0214
- (_Bool)_writeArchiveOfDirectoryAtURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;	// IMP=0x000000000059fb5a
- (_Bool)canAccessLocations:(id)arg1 forReading:(_Bool)arg2 error:(id *)arg3;	// IMP=0x000000000059f85b
- (void)makePresentersOfItemAtLocation:(id)arg1 orContainedItem:(_Bool)arg2 relinquishUsingProcedureGetter:(CDUnknownBlockType)arg3;	// IMP=0x000000000059ed33
- (void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 writingOptions:(unsigned long long)arg3 thenContinue:(CDUnknownBlockType)arg4;	// IMP=0x000000000059ebbc
- (void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 readingOptions:(unsigned long long)arg3 thenContinue:(CDUnknownBlockType)arg4;	// IMP=0x000000000059ea4a
- (void)makeProviderOfItemAtLocation:(id)arg1 providePhysicalURLThenContinue:(CDUnknownBlockType)arg2;	// IMP=0x000000000059e77b
- (void)makeProvidersProvideItemsForReadingLocations:(id)arg1 options:(unsigned long long *)arg2 andWritingLocationsIfNecessary:(id)arg3 options:(unsigned long long *)arg4 thenContinue:(CDUnknownBlockType)arg5;	// IMP=0x000000000059dd2e
- (void)_checkIfMovingRequiresProvidingAmongWritingLocations:(id)arg1 options:(unsigned long long *)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x000000000059d184
- (void)makeProviderOfItemAtLocation:(id)arg1 provideIfNecessaryWithOptions:(unsigned long long)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x000000000059cc88
- (_Bool)shouldMakeProviderProvideItemAtLocation:(id)arg1 withOptions:(unsigned long long)arg2;	// IMP=0x000000000059cc1b
- (void)ensureProvidersOfItemsAtReadingLocations:(id)arg1 writingLocations:(id)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x000000000059cb33
- (void)granted;	// IMP=0x000000000059cb2d
- (_Bool)isBlockedByWritingItemAtLocation:(id)arg1 options:(unsigned long long)arg2;	// IMP=0x000000000059cb25
- (_Bool)isBlockedByReadingItemAtLocation:(id)arg1 options:(unsigned long long)arg2;	// IMP=0x000000000059cb1d
- (void)removePendingClaims:(id)arg1;	// IMP=0x000000000059c9a3
- (id)pendingClaims;	// IMP=0x000000000059c981
- (void)addPendingClaim:(id)arg1;	// IMP=0x000000000059c8e3
- (void)evaluateNewClaim:(id)arg1;	// IMP=0x000000000059c7a0
- (void)scheduleBlockedClaim:(id)arg1;	// IMP=0x000000000059c516
- (void)givePriorityToClaim:(id)arg1;	// IMP=0x000000000059c360
- (_Bool)isBlockedByClaimWithPurposeID:(id)arg1;	// IMP=0x000000000059c225
- (_Bool)claimerInvokingIsBlockedByReactorWithID:(id)arg1;	// IMP=0x000000000059c0eb
- (void)removeBlockingReactorID:(id)arg1;	// IMP=0x000000000059c0d5
- (void)addBlockingReactorID:(id)arg1;	// IMP=0x000000000059c098
- (void)whenFinishedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x000000000059c02e
- (void)whenDevaluedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x000000000059bfcd
- (void)whenRevokedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x000000000059bf6c
- (_Bool)evaluateSelfWithRootNode:(id)arg1 checkSubarbitrability:(_Bool)arg2;	// IMP=0x000000000059bf64
- (id)claimerError;	// IMP=0x000000000059bf4d
- (void)setClaimerError:(id)arg1;	// IMP=0x000000000059bf18
- (void)unblockClaimerForReason:(id)arg1;	// IMP=0x000000000059bea8
- (void)blockClaimerForReason:(id)arg1;	// IMP=0x000000000059be5c
- (_Bool)didWait;	// IMP=0x000000000059be53
- (void)unblock;	// IMP=0x000000000059bdaa
- (void)block;	// IMP=0x000000000059bd78
- (void)startObservingClientState;	// IMP=0x000000000059bb30
- (_Bool)cameFromSuperarbiter;	// IMP=0x000000000059bb27
- (void)setCameFromSuperarbiter;	// IMP=0x000000000059bb1d
- (void)acceptClaimFromClient:(id)arg1 arbiterQueue:(id)arg2 grantHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000059ba69
- (void)prepareClaimForGrantingWithArbiterQueue:(id)arg1;	// IMP=0x000000000059b996
- (void)forwardUsingConnection:(id)arg1 crashHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000059b990
- (int)clientProcessIdentifier;	// IMP=0x000000000059b96f
- (id)purposeID;	// IMP=0x000000000059b958
- (id)claimID;	// IMP=0x000000000059b941
- (id)client;	// IMP=0x000000000059b92a
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000059b81f
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000000059b774
- (void)dealloc;	// IMP=0x000000000059b637
- (id)initWithClient:(id)arg1 claimID:(id)arg2 purposeID:(id)arg3;	// IMP=0x000000000059b58f
- (void)_setupWithClaimID:(id)arg1 purposeID:(id)arg2 originatingReactorQueueID:(id)arg3;	// IMP=0x000000000059b4f9
- (_Bool)shouldInformProvidersAboutEndOfWriteWithOptions:(unsigned long long)arg1;	// IMP=0x000000000059b4cf
- (_Bool)shouldWritingWithOptions:(unsigned long long)arg1 causePresenterToRelinquish:(id)arg2;	// IMP=0x000000000059b4c2
- (_Bool)shouldReadingWithOptions:(unsigned long long)arg1 causePresenterToRelinquish:(id)arg2;	// IMP=0x000000000059b443

@end

