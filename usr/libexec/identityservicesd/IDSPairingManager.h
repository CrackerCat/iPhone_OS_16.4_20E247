//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class IDSCountdown, IDSNRDeviceManager, IDSPairedDeviceRepository, MISSING_TYPE, NSData, NSDictionary, NSHashTable, NSMutableArray, NSMutableDictionary, NSSet, NSString;

@interface IDSPairingManager : NSObject
{
    NSHashTable *_delegateMap;	// 8 = 0x8
    _Bool _hasLoadedPairedDevices;	// 16 = 0x10
    int _pairingStateToken;	// 20 = 0x14
    CDUnknownBlockType _block;	// 24 = 0x18
    _Bool _isPendingResetOfKeyRegenerationFlag;	// 32 = 0x20
    IDSCountdown *_pairedDeviceInfoRequestCountdown;	// 40 = 0x28
    NSMutableDictionary *_cbuuidToBTOutOfBandKeyDictionary;	// 48 = 0x30
    _Bool _shouldQuickSwitchAfterIPSecConnected;	// 56 = 0x38
    IDSNRDeviceManager *_nrDeviceManager;	// 64 = 0x40
    IDSPairedDeviceRepository *_pairedDeviceRepository;	// 72 = 0x48
    NSMutableArray *_registeredPairedDeviceDidConnectBlockPairs;	// 80 = 0x50
}

+ (void)devicePairingProtocolVersion:(unsigned int *)arg1 minCompatibilityVersion:(unsigned int *)arg2 maxCompatibilityVersion:(unsigned int *)arg3;	// IMP=0x00200000002a2c00
+ (_Bool)_isTinkerPairedInCapabilityFlags:(unsigned long long)arg1;	// IMP=0x0010000000298b40
+ (_Bool)_isIPsecSupportedByCapabilityFlags:(unsigned long long)arg1;	// IMP=0x0010000000298b10
+ (_Bool)_isEncryptionKeyRegenerationSupportedByCapabilityFlags:(unsigned long long)arg1;	// IMP=0x0010000000298ae0
+ (id)sharedInstance;	// IMP=0x0010000000297170
- (void).cxx_destruct;	// IMP=0x00200000002a38d0
@property(nonatomic) _Bool shouldQuickSwitchAfterIPSecConnected; // @synthesize shouldQuickSwitchAfterIPSecConnected=_shouldQuickSwitchAfterIPSecConnected;
@property(readonly, nonatomic) NSMutableArray *registeredPairedDeviceDidConnectBlockPairs; // @synthesize registeredPairedDeviceDidConnectBlockPairs=_registeredPairedDeviceDidConnectBlockPairs;
@property(readonly, nonatomic) IDSPairedDeviceRepository *pairedDeviceRepository; // @synthesize pairedDeviceRepository=_pairedDeviceRepository;
@property(readonly, nonatomic) IDSNRDeviceManager *nrDeviceManager; // @synthesize nrDeviceManager=_nrDeviceManager;
- (id)_nrDeviceIdentifierWithCBUUID:(id)arg1;	// IMP=0x00100000002a35e0
- (void)deliveryController:(id)arg1 foundNearbyIPsecCapableDeviceWithUniqueID:(id)arg2;	// IMP=0x00100000002a2d90
- (void)refreshPairedDeviceEncryptionKeys;	// IMP=0x00100000002a2820
- (_Bool)updatePairedDeviceiCloudURIs:(id)arg1 pushToken:(id)arg2;	// IMP=0x00100000002a2310
- (_Bool)updatePairedDeviceBuildVersion:(id)arg1 productVersion:(id)arg2 productName:(id)arg3 pairingProtocolVersion:(unsigned int)arg4 minCompatibilityVersion:(unsigned int)arg5 maxCompatibilityVersion:(unsigned int)arg6 serviceMinCompatibilityVersion:(unsigned short)arg7 capabilityFlags:(unsigned long long)arg8 deviceUniqueID:(id)arg9;	// IMP=0x00100000002a2040
- (_Bool)_isIPSecLinkEnabled;	// IMP=0x00100000002a2020
- (void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 properties:(id)arg2 shouldPairDirectlyOverIPsec:(_Bool)arg3;	// IMP=0x00100000002a1810
- (void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 wasInitiallySetupUsingIDSPairing:(_Bool)arg2 maxCompatibilityVersion:(id)arg3 BTOutOfBandKey:(id)arg4 supportsIPsecWithSPPLink:(_Bool)arg5 bluetoothMACAddress:(id)arg6;	// IMP=0x00100000002a16c0
- (id)_createRegistrationProperties:(_Bool)arg1 maxCompatibilityVersion:(id)arg2 BTOutOfBandKey:(id)arg3 supportsIPsecWithSPPLink:(_Bool)arg4 bluetoothMACAddress:(id)arg5;	// IMP=0x00100000002a1510
- (_Bool)isMissingAnyPublicKeyForPairedDeviceWithCBUUID:(id)arg1;	// IMP=0x00100000002a1440
- (_Bool)setPairedDeviceInfo:(id)arg1;	// IMP=0x00100000002a0fb0
- (_Bool)updateLocalPairedDevice:(id)arg1 pairingType:(long long)arg2;	// IMP=0x00100000002a0d80
- (MISSING_TYPE *)updatePairedDeviceWithCBUUID:supportIPsec: /* Error: Ran out of types for this method. */;	// IMP=0x00100000002a0cb0
- (void)_clearPairedDeviceDidConnectBlocksForUniqueID:(id)arg1;	// IMP=0x00100000002a0890
- (void)_callPairedDeviceDidConnectBlocksForUniqueID:(id)arg1 withError:(id)arg2;	// IMP=0x00100000002a0460
- (void)registerPairedDeviceWithUniqueID:(id)arg1 didConnectBlock:(CDUnknownBlockType)arg2;	// IMP=0x00100000002a0270
- (_Bool)shouldUseIPsecLinkForDefaultPairedDeviceAndLogQuery:(_Bool)arg1;	// IMP=0x00100000002a00b0
- (_Bool)shouldUseIPsecLinkForDefaultPairedDevice;	// IMP=0x00100000002a0080
- (id)_cbuuidsWithIsPairingValue:(_Bool)arg1;	// IMP=0x001000000029fd00
- (id)pairedDeviceRecords;	// IMP=0x001000000029f700
- (id)localDeviceRecord;	// IMP=0x001000000029f5c0
- (id)_identityDataErrorPairForDataProtectionClass:(unsigned int)arg1;	// IMP=0x001000000029f450
- (id)uniqueIDToCbuuidsOfPairingDevicesDictionary;	// IMP=0x001000000029f050
- (id)cbuuidsOfPairedDevices;	// IMP=0x001000000029f020
- (id)cbuuidsOfPairingDevices;	// IMP=0x001000000029eff0
- (_Bool)isTraditionalDevicePairedOrPairing;	// IMP=0x001000000029ef50
- (_Bool)isCurrentDevicePairedOrPairing;	// IMP=0x001000000029eeb0
- (void)ensureCommunicationWithActivePairedDeviceIsPossible;	// IMP=0x001000000029eae0
- (void)updateNetworkRelayStateForAllPairedDevices;	// IMP=0x001000000029e140
- (void)deactivatePairedDevices;	// IMP=0x001000000029db30
- (long long)activatePairedDeviceWithCBUUID:(id)arg1;	// IMP=0x001000000029d5b0
- (void)disconnectActivePairedDevice;	// IMP=0x001000000029d4d0
- (_Bool)removeLocalPairedDevice:(id)arg1;	// IMP=0x001000000029d3b0
- (_Bool)addLocalPairedDevice:(id)arg1 BTOutOfBandKey:(id)arg2 shouldPairDirectlyOverIPsec:(_Bool)arg3 pairingType:(long long)arg4 bluetoothMACAddress:(id)arg5;	// IMP=0x001000000029d200
- (void)removeDelegate:(id)arg1;	// IMP=0x001000000029d170
- (void)addDelegate:(id)arg1;	// IMP=0x001000000029d0b0
- (void)_updateActiveStateForAllPairedDevices:(_Bool)arg1;	// IMP=0x001000000029c9f0
- (void)_updateActiveStateForAllPairedDevices;	// IMP=0x001000000029c9c0
- (void)_updatePairedState:(_Bool)arg1;	// IMP=0x001000000029c870
- (_Bool)_hasAllEncryptionKeys;	// IMP=0x001000000029c6d0
- (id)pairedDeviceForUniqueID:(id)arg1;	// IMP=0x001000000029c350
@property(readonly, nonatomic) NSSet *allTraditionallyPairedUniqueIDs;
@property(readonly, nonatomic) NSSet *allPairedUniqueIDs;
- (_Bool)_isPairedToDevice:(id)arg1;	// IMP=0x001000000029bbe0
@property(readonly, nonatomic) _Bool isPaired;
@property(readonly, nonatomic) NSDictionary *pairedDevicePrivateData;
- (long long)pairedDevicePairingType;	// IMP=0x001000000029ba30
- (id)pairedDeviceiCloudURIs;	// IMP=0x001000000029b990
@property(readonly, nonatomic) NSData *pairedDevicePushToken;
@property(readonly, nonatomic) NSData *pairedDevicePublicClassCKey;
@property(readonly, nonatomic) NSData *pairedDevicePublicClassAKey;
@property(readonly, nonatomic) NSData *pairedDevicePublicKey;
@property(readonly, nonatomic) NSDictionary *pairedDevice;
- (id)pairedDeviceHandlesWithPairingType:(long long)arg1;	// IMP=0x001000000029b2f0
- (id)allPairedDevicesWithType:(long long)arg1;	// IMP=0x001000000029b270
@property(readonly, nonatomic) NSSet *allPairedDevices;
@property(readonly, nonatomic) _Bool isCurrentDeviceTinkerConfiguredWatch;
- (_Bool)activePairedDeviceHasPairingType:(long long)arg1;	// IMP=0x001000000029b150
@property(readonly, nonatomic) unsigned short pairedDeviceServiceMinCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDeviceMaxCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDeviceMinCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDevicePairingProtocolVersion;
- (id)pairedDeviceProductName;	// IMP=0x001000000029aeb0
- (id)pairedDeviceProductVersion;	// IMP=0x001000000029ae10
- (id)pairedDeviceBuildVersion;	// IMP=0x001000000029ad70
@property(readonly, nonatomic) NSString *pairedDeviceUniqueID;
@property(readonly, nonatomic) NSString *pairedDeviceUUIDString;
- (id)_activePairedDeviceCBUUID;	// IMP=0x001000000029ac00
- (void)gatherLocalDeviceInfoWithCompletionBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000299fc0
- (id)_localDevicePrivateData;	// IMP=0x0010000000299850
@property(readonly, nonatomic) NSDictionary *localDevice;
- (_Bool)_purgeSecuredEncryptionKeysForAllPairedDevices;	// IMP=0x0010000000299280
- (void)_suspendOTRSessionsWithProtectionClass:(unsigned int)arg1;	// IMP=0x0010000000298d30
- (void)_regenerateSecuredEncryptionKeys;	// IMP=0x0010000000298b70
- (_Bool)_markSecuredEncryptionKeysAsRegenerated:(_Bool)arg1;	// IMP=0x00100000002986b0
- (unsigned long long)_hasRegeneratedSecuredEncryptionKeys;	// IMP=0x0010000000298150
- (long long)_migrateSecuredEncryptionKeys;	// IMP=0x0010000000298120
- (void)_loadPairedDevicePropertiesIfNeeded;	// IMP=0x0010000000298110
- (void)systemDidLeaveFirstDataProtectionLock;	// IMP=0x00100000002980e0
- (id)init;	// IMP=0x0010000000298000
- (id)initWithNRDeviceManager:(id)arg1 pairedDeviceRepository:(id)arg2;	// IMP=0x0010000000297f30
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x0010000000297e50
- (void)_requestPairedDeviceInfo;	// IMP=0x0010000000297d70
- (void)_requestPairedDeviceInfoAfterDelay:(double)arg1;	// IMP=0x0010000000297bb0
- (void)_notifyDelegatesDeviceUnpairedFromDevice:(id)arg1;	// IMP=0x0010000000297890
- (void)_notifyDelegatesDevicePairedToDevice:(id)arg1;	// IMP=0x0010000000297570
- (void)_notifyDelegatesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000297230

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

