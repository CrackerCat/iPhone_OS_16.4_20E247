//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CKAccountInfo, CKKSCondition, CKKSKeychainView, CKKSLaunchSequence, CKKSLockStateTracker, CKKSNearFutureScheduler, CuttlefishXPCWrapper, NSData, NSOperationQueue, NSString, OTAccountSettings, OTCustodianRecoveryKey, OTCuttlefishAccountStateHolder, OTFollowup, OTInheritanceKey, OctagonAPSReceiver, OctagonStateMachine, TPPolicyVersion, TPSpecificUser;
@protocol CKKSCloudKitAccountStateTrackingProvider><CKKSOctagonStatusMemoizer, CKKSPeerProvider, OS_dispatch_queue, OTAccountsAdapter, OTAuthKitAdapter, OTDeviceInformationAdapter, OTPersonaAdapter, OTSOSAdapter, OTTooManyPeersAdapter;

@interface OTCuttlefishContext : NSObject
{
    NSString *_bottleID;	// 8 = 0x8
    NSString *_bottleSalt;	// 16 = 0x10
    NSData *_entropy;	// 24 = 0x18
    long long _resetReason;	// 32 = 0x20
    NSString *_idmsTargetContext;	// 40 = 0x28
    NSString *_idmsCuttlefishPassword;	// 48 = 0x30
    _Bool _notifyIdMS;	// 56 = 0x38
    OTAccountSettings *_accountSettings;	// 64 = 0x40
    _Bool _skipRateLimitingCheck;	// 72 = 0x48
    _Bool _initialBecomeUntrustedPosted;	// 73 = 0x49
    CuttlefishXPCWrapper *_cuttlefishXPCWrapper;	// 80 = 0x50
    OTFollowup *_followupHandler;	// 88 = 0x58
    NSString *_containerName;	// 96 = 0x60
    NSString *_contextID;	// 104 = 0x68
    TPSpecificUser *_activeAccount;	// 112 = 0x70
    NSString *_pairingUUID;	// 120 = 0x78
    CKKSLockStateTracker *_lockStateTracker;	// 128 = 0x80
    OTCuttlefishAccountStateHolder *_accountMetadataStore;	// 136 = 0x88
    OctagonStateMachine *_stateMachine;	// 144 = 0x90
    CKKSNearFutureScheduler *_apsRateLimiter;	// 152 = 0x98
    CKKSNearFutureScheduler *_sosConsistencyRateLimiter;	// 160 = 0xa0
    CKKSKeychainView *_ckks;	// 168 = 0xa8
    id <CKKSCloudKitAccountStateTrackingProvider><CKKSOctagonStatusMemoizer> _accountStateTracker;	// 176 = 0xb0
    id <OTDeviceInformationAdapter> _deviceAdapter;	// 184 = 0xb8
    id <OTAccountsAdapter> _accountsAdapter;	// 192 = 0xc0
    id <OTAuthKitAdapter> _authKitAdapter;	// 200 = 0xc8
    id <OTPersonaAdapter> _personaAdapter;	// 208 = 0xd0
    id <OTSOSAdapter> _sosAdapter;	// 216 = 0xd8
    id <OTTooManyPeersAdapter> _tooManyPeersAdapter;	// 224 = 0xe0
    CKKSCondition *_pendingEscrowCacheWarmup;	// 232 = 0xe8
    NSObject<OS_dispatch_queue> *_queue;	// 240 = 0xf0
    TPPolicyVersion *_policyOverride;	// 248 = 0xf8
    CKKSLaunchSequence *_launchSequence;	// 256 = 0x100
    NSOperationQueue *_operationQueue;	// 264 = 0x108
    CKAccountInfo *_cloudKitAccountInfo;	// 272 = 0x110
    CKKSCondition *_cloudKitAccountStateKnown;	// 280 = 0x118
    CKKSNearFutureScheduler *_suggestTLKUploadNotifier;	// 288 = 0x120
    CKKSNearFutureScheduler *_requestPolicyCheckNotifier;	// 296 = 0x128
    CKKSNearFutureScheduler *_upgradeUserControllableViewsRateLimiter;	// 304 = 0x130
    CKKSNearFutureScheduler *_fixupRetryScheduler;	// 312 = 0x138
    NSString *_recoveryKey;	// 320 = 0x140
    OTCustodianRecoveryKey *_custodianRecoveryKey;	// 328 = 0x148
    OTInheritanceKey *_inheritanceKey;	// 336 = 0x150
    OctagonAPSReceiver *_apsReceiver;	// 344 = 0x158
    id <CKKSPeerProvider> _octagonAdapter;	// 352 = 0x160
    Class _escrowRequestClass;	// 360 = 0x168
    Class _notifierClass;	// 368 = 0x170
    NSString *_machineID;	// 376 = 0x178
}

- (void).cxx_destruct;	// IMP=0x00200000000e6926
@property(retain, nonatomic) NSString *machineID; // @synthesize machineID=_machineID;
@property(nonatomic) _Bool initialBecomeUntrustedPosted; // @synthesize initialBecomeUntrustedPosted=_initialBecomeUntrustedPosted;
@property(readonly) Class notifierClass; // @synthesize notifierClass=_notifierClass;
@property(readonly) Class escrowRequestClass; // @synthesize escrowRequestClass=_escrowRequestClass;
@property(retain) id <CKKSPeerProvider> octagonAdapter; // @synthesize octagonAdapter=_octagonAdapter;
@property(retain) OctagonAPSReceiver *apsReceiver; // @synthesize apsReceiver=_apsReceiver;
@property(retain, nonatomic) OTInheritanceKey *inheritanceKey; // @synthesize inheritanceKey=_inheritanceKey;
@property(retain, nonatomic) OTCustodianRecoveryKey *custodianRecoveryKey; // @synthesize custodianRecoveryKey=_custodianRecoveryKey;
@property(retain, nonatomic) NSString *recoveryKey; // @synthesize recoveryKey=_recoveryKey;
@property(retain) CKKSNearFutureScheduler *fixupRetryScheduler; // @synthesize fixupRetryScheduler=_fixupRetryScheduler;
@property(retain) CKKSNearFutureScheduler *upgradeUserControllableViewsRateLimiter; // @synthesize upgradeUserControllableViewsRateLimiter=_upgradeUserControllableViewsRateLimiter;
@property(retain) CKKSNearFutureScheduler *requestPolicyCheckNotifier; // @synthesize requestPolicyCheckNotifier=_requestPolicyCheckNotifier;
@property(retain) CKKSNearFutureScheduler *suggestTLKUploadNotifier; // @synthesize suggestTLKUploadNotifier=_suggestTLKUploadNotifier;
@property(retain) CKKSCondition *cloudKitAccountStateKnown; // @synthesize cloudKitAccountStateKnown=_cloudKitAccountStateKnown;
@property(retain) CKAccountInfo *cloudKitAccountInfo; // @synthesize cloudKitAccountInfo=_cloudKitAccountInfo;
@property(retain) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(retain) CKKSLaunchSequence *launchSequence; // @synthesize launchSequence=_launchSequence;
@property(retain) TPPolicyVersion *policyOverride; // @synthesize policyOverride=_policyOverride;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain) CKKSCondition *pendingEscrowCacheWarmup; // @synthesize pendingEscrowCacheWarmup=_pendingEscrowCacheWarmup;
@property(readonly) id <OTTooManyPeersAdapter> tooManyPeersAdapter; // @synthesize tooManyPeersAdapter=_tooManyPeersAdapter;
@property(readonly) id <OTSOSAdapter> sosAdapter; // @synthesize sosAdapter=_sosAdapter;
@property(readonly) id <OTPersonaAdapter> personaAdapter; // @synthesize personaAdapter=_personaAdapter;
@property(readonly) id <OTAuthKitAdapter> authKitAdapter; // @synthesize authKitAdapter=_authKitAdapter;
@property(readonly) id <OTAccountsAdapter> accountsAdapter; // @synthesize accountsAdapter=_accountsAdapter;
@property(readonly) id <OTDeviceInformationAdapter> deviceAdapter; // @synthesize deviceAdapter=_deviceAdapter;
@property(readonly) id <CKKSCloudKitAccountStateTrackingProvider><CKKSOctagonStatusMemoizer> accountStateTracker; // @synthesize accountStateTracker=_accountStateTracker;
@property(retain) CKKSKeychainView *ckks; // @synthesize ckks=_ckks;
@property(retain, nonatomic) CKKSNearFutureScheduler *sosConsistencyRateLimiter; // @synthesize sosConsistencyRateLimiter=_sosConsistencyRateLimiter;
@property(retain, nonatomic) CKKSNearFutureScheduler *apsRateLimiter; // @synthesize apsRateLimiter=_apsRateLimiter;
@property(readonly) OctagonStateMachine *stateMachine; // @synthesize stateMachine=_stateMachine;
@property(retain, nonatomic) OTCuttlefishAccountStateHolder *accountMetadataStore; // @synthesize accountMetadataStore=_accountMetadataStore;
@property(readonly, nonatomic) CKKSLockStateTracker *lockStateTracker; // @synthesize lockStateTracker=_lockStateTracker;
@property(retain, nonatomic) NSString *pairingUUID; // @synthesize pairingUUID=_pairingUUID;
@property(retain) TPSpecificUser *activeAccount; // @synthesize activeAccount=_activeAccount;
@property(readonly) NSString *contextID; // @synthesize contextID=_contextID;
@property(readonly) NSString *containerName; // @synthesize containerName=_containerName;
@property(retain) OTFollowup *followupHandler; // @synthesize followupHandler=_followupHandler;
@property(readonly) CuttlefishXPCWrapper *cuttlefishXPCWrapper; // @synthesize cuttlefishXPCWrapper=_cuttlefishXPCWrapper;
- (void)setAccountSettings:(id)arg1;	// IMP=0x00100000000e64c0
- (_Bool)checkAllStateCleared;	// IMP=0x00100000000e63ea
- (void)clearContextState;	// IMP=0x00100000000e634a
- (void)getAccountMetadataWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e620a
- (void)rpcResetAccountCDPContentsWithIdmsTargetContext:(id)arg1 idmsCuttlefishPassword:(id)arg2 notifyIdMS:(_Bool)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x00100000000e6028
- (id)egoPeerStatus:(id *)arg1;	// IMP=0x00100000000e5e83
- (_Bool)machineIDOnMemoizedList:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000e5cba
- (void)waitForOctagonUpgrade:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e5497
- (void)checkOctagonHealth:(_Bool)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e4d23
- (_Bool)processMoveRequest:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000e4595
- (_Bool)postConfirmPasscodeCFU:(id *)arg1;	// IMP=0x00100000000e4450
- (_Bool)leaveTrust:(id *)arg1;	// IMP=0x00100000000e42e5
- (_Bool)shouldPostConfirmPasscodeCFU:(id *)arg1;	// IMP=0x00100000000e407f
- (_Bool)postRepairCFU:(id *)arg1;	// IMP=0x00100000000e3ee7
- (void)rpcTlkRecoverabilityForEscrowRecordData:(id)arg1 source:(long long)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000e3d74
- (void)tlkRecoverabilityInOctagon:(id)arg1 source:(long long)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000e3cae
- (void)octagonPeerIDGivenBottleID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e3c20
- (void)rpcWaitForPriorityViewKeychainDataRecovery:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e3a7a
- (void)rpcAccountWideSettingsWithForceFetch:(_Bool)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e38e2
- (void)rpcFetchAccountSettings:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e3760
- (void)rpcFetchTrustedSecureElementIdentities:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e3480
- (void)rpcRemoveLocalSecureElementIdentityPeerID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e32dc
- (void)rpcSetLocalSecureElementIdentity:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e30cf
- (void)rpcSetAccountSetting:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e2d40
- (void)rpcSetUserControllableViewsSyncingStatus:(_Bool)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e2848
- (void)rpcFetchUserControllableViewsSyncingStatus:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e22c3
- (void)rpcRefetchCKKSPolicy:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e2084
- (void)fetchEscrowContents:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e1fae
- (void)rpcInvalidateEscrowCache:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e1e19
- (void)rpcFetchAllViableEscrowRecordsFromSource:(long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e1c74
- (void)rpcFetchAllViableBottlesFromSource:(long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e1acd
- (void)rpcTrustStatus:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e1421
- (void)rpcTrustStatusCachedStatus:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e12a3
- (void)rpcRemoveInheritanceKeyWithUUID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e10eb
- (void)rpcStoreInheritanceKeyWithIK:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e0f33
- (void)rpcGenerateInheritanceKeyWithUUID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e0de7
- (void)rpcCreateInheritanceKeyWithUUID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e0c2f
- (void)rpcRemoveCustodianRecoveryKeyWithUUID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e0a77
- (void)rpcCreateCustodianRecoveryKeyWithUUID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e08bf
- (void)rpcRemoveRecoveryKey:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e07e9
- (void)rpcIsRecoveryKeySet:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e0713
- (void)rpcSetRecoveryKey:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000e04f9
- (void)rpcFetchPeerIDByBottleID:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e04d8
- (void)rpcFetchDeviceNamesByPeerID:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e03d2
- (void)rpcFetchPeerAttributes:(id)arg1 includeSelf:(_Bool)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000e02c9
- (void)rpcFetchEgoPeerID:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e0177
- (void)rpcStatus:(CDUnknownBlockType)arg1;	// IMP=0x00100000000df563
- (id)sosSelvesStatus;	// IMP=0x00100000000df189
- (id)sosTrustedPeersStatus;	// IMP=0x00100000000deee4
- (id)ckksPeerStatus:(id)arg1;	// IMP=0x00100000000ded5a
- (void)rpcJoin:(id)arg1 vouchSig:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000de9fb
- (id)joinStatePathDictionary;	// IMP=0x00100000000de390
- (void)preflightRecoverOctagonUsingRecoveryKey:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000de09b
- (void)preflightJoinWithInheritanceKey:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000ddc95
- (void)joinWithInheritanceKey:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000dd9b7
- (void)preflightJoinWithCustodianRecoveryKey:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000dd5da
- (void)joinWithCustodianRecoveryKey:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000dd36c
- (void)joinWithRecoveryKey:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000dd092
- (void)joinWithBottle:(id)arg1 entropy:(id)arg2 bottleSalt:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x00100000000dcd3b
- (void)rpcPrepareIdentityAsApplicantWithConfiguration:(id)arg1 epoch:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000dc823
- (id)errorIfNoCKAccount:(id)arg1;	// IMP=0x00100000000dc7a8
- (long long)checkForCKAccount:(id)arg1;	// IMP=0x00100000000dc30b
- (void)trustedPeerSetChanged:(id)arg1;	// IMP=0x00100000000dbfcf
- (void)selfPeerChanged:(id)arg1;	// IMP=0x00100000000dbfc9
- (void)deviceNameUpdated;	// IMP=0x00100000000dbe9d
- (void)requestTrustedDeviceListRefresh;	// IMP=0x00100000000dbe59
- (id)currentMemoizedLastHealthCheck;	// IMP=0x00100000000dbcda
- (int)currentMemoizedAccountState;	// IMP=0x00100000000dbbc1
- (int)currentMemoizedTrustState;	// IMP=0x00100000000dbaa8
- (void)setMachineIDOverride:(id)arg1;	// IMP=0x00100000000dba36
- (void)popTooManyPeersDialogWithEgoPeerStatus:(id)arg1 accountMeta:(id)arg2;	// IMP=0x00100000000db4fd
- (_Bool)waitForReady:(long long)arg1;	// IMP=0x00100000000db475
- (void)notifyContainerChangeWithUserInfo:(id)arg1;	// IMP=0x00100000000db031
- (void)notifyContainerChange:(id)arg1;	// IMP=0x00100000000dafe2
- (void)handleTTRRequest:(id)arg1;	// IMP=0x00100000000dab88
- (void)handleHealthRequest;	// IMP=0x00100000000daa5b
- (id)extractStringKey:(id)arg1 fromDictionary:(id)arg2;	// IMP=0x00100000000da9f8
- (id)becomeReadyOperation;	// IMP=0x00100000000da91c
- (id)becomeInheritedOperation;	// IMP=0x00100000000da840
- (id)becomeUntrustedOperation:(id)arg1;	// IMP=0x00100000000da74c
- (void)checkTrustStatusAndPostRepairCFUIfNecessary:(CDUnknownBlockType)arg1;	// IMP=0x00100000000da64c
- (_Bool)checkForPhonePeerPresence:(id)arg1;	// IMP=0x00100000000da3da
- (id)repairAccountIfTrustedByTPHWithIntendedState:(id)arg1;	// IMP=0x00100000000da249
- (id)cloudKitAccountNewlyAvailableOperation:(id)arg1;	// IMP=0x00100000000da155
- (id)postRepairCFUAndBecomeUntrusted;	// IMP=0x00100000000da0db
- (id)cuttlefishTrustEvaluation;	// IMP=0x00100000000d9f60
- (id)evaluateTPHOctagonTrust;	// IMP=0x00100000000d9ee6
- (id)evaluateSecdOctagonTrust;	// IMP=0x00100000000d9e6c
- (id)checkForAccountFixupsOperation:(id)arg1;	// IMP=0x00100000000d9d59
- (id)initializingOperation;	// IMP=0x00100000000d9c7d
- (id)_onqueueNextStateMachineTransition:(id)arg1 flags:(id)arg2 pendingFlags:(id)arg3;	// IMP=0x00100000000d6522
- (void)clearPairingUUID;	// IMP=0x00100000000d650e
- (void)handlePairingRestart:(id)arg1;	// IMP=0x00100000000d61b4
- (void)startOctagonStateMachine;	// IMP=0x00100000000d6177
- (id)operationDependencies;	// IMP=0x00100000000d5f03
- (id)prepareInformation;	// IMP=0x00100000000d5bd1
- (void)rpcRemoveFriendsInClique:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000d5ab1
- (void)rpcLeaveClique:(CDUnknownBlockType)arg1;	// IMP=0x00100000000d5811
- (void)rpcResetAndEstablish:(long long)arg1 idmsTargetContext:(id)arg2 idmsCuttlefishPassword:(id)arg3 notifyIdMS:(_Bool)arg4 accountSettings:(id)arg5 reply:(CDUnknownBlockType)arg6;	// IMP=0x00100000000d55a5
- (void)rpcResetAndEstablish:(long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000d5580
- (void)rpcEstablish:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000d548c
- (id)establishStatePathDictionary;	// IMP=0x00100000000d5087
- (void)localReset:(CDUnknownBlockType)arg1;	// IMP=0x00100000000d4e4f
- (void)resetOctagonStateMachine;	// IMP=0x00100000000d4c85
- (_Bool)setCDPEnabled:(id *)arg1;	// IMP=0x00100000000d4ad5
- (long long)getCDPStatus:(id *)arg1;	// IMP=0x00100000000d490e
- (_Bool)accountNoLongerAvailable:(id *)arg1;	// IMP=0x00100000000d470b
- (_Bool)idmsTrustLevelChanged:(id *)arg1;	// IMP=0x00100000000d46c4
- (void)moveToCheckTrustedState;	// IMP=0x00100000000d44ac
- (_Bool)accountAvailable:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000d3c9d
- (void)cloudkitAccountStateChange:(id)arg1 to:(id)arg2;	// IMP=0x00100000000d3ab8
- (void)incompleteNotificationOfMachineIDListChange;	// IMP=0x00100000000d3a3b
- (void)machinesRemoved:(id)arg1 altDSID:(id)arg2;	// IMP=0x00100000000d369e
- (void)machinesAdded:(id)arg1 altDSID:(id)arg2;	// IMP=0x00100000000d3301
@property(readonly, copy) NSString *description;
- (void)accountStateUpdated:(id)arg1 from:(id)arg2;	// IMP=0x00100000000d2f78
- (void)notifyTrustChanged:(int)arg1;	// IMP=0x00100000000d2dc8
- (void)dealloc;	// IMP=0x00100000000d2d99
- (void)resetCKKS:(id)arg1;	// IMP=0x00100000000d2d87
- (void)clearCKKS;	// IMP=0x00100000000d2d73
- (id)initWithContainerName:(id)arg1 contextID:(id)arg2 activeAccount:(id)arg3 cuttlefish:(id)arg4 ckksAccountSync:(id)arg5 sosAdapter:(id)arg6 accountsAdapter:(id)arg7 authKitAdapter:(id)arg8 personaAdapter:(id)arg9 tooManyPeersAdapter:(id)arg10 lockStateTracker:(id)arg11 reachabilityTracker:(id)arg12 accountStateTracker:(id)arg13 deviceInformationAdapter:(id)arg14 apsConnectionClass:(Class)arg15 escrowRequestClass:(Class)arg16 notifierClass:(Class)arg17 cdpd:(id)arg18;	// IMP=0x00100000000d2489

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

