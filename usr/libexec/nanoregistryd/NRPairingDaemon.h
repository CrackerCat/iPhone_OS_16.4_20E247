//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE, NRLocalPropertyMonitor, NRMutableDevice, NRRemoteObjectClassC, NSError, NSLock, NSMutableArray, NSNumber, NSObject, NSString, NSUUID, NSXPCConnection, NSXPCListener;
@protocol OS_dispatch_queue;

@interface NRPairingDaemon
{
    _Bool _initRemoteProperties;	// 8 = 0x8
    _Bool _isPairingOrUnpairing;	// 9 = 0x9
    _Bool _mirrorOfIsPaired;	// 10 = 0xa
    unsigned int _xpcTransactionHasBegun;	// 12 = 0xc
    int _idsSwitchRetryCounter;	// 16 = 0x10
    int _syncAdviceNotifyToken;	// 20 = 0x14
    NSMutableArray *_xpcClients;	// 24 = 0x18
    NSXPCListener *_xpcListener;	// 32 = 0x20
    NSXPCConnection *_xpcLaunchDConnection;	// 40 = 0x28
    NRLocalPropertyMonitor *_localProperties;	// 48 = 0x30
    NSLock *_xpcTransactionTimerLock;	// 56 = 0x38
    NRRemoteObjectClassC *_idsServiceClassC;	// 64 = 0x40
    long long _maxPairingCompatibilityVersion;	// 72 = 0x48
    long long _minPairingCompatibilityVersion;	// 80 = 0x50
    NSError *_switchCompletionBlockError;	// 88 = 0x58
    NSNumber *_lastDaemonState;	// 96 = 0x60
    NRMutableDevice *;	// 104 = 0x68
    NSUUID *_mirrorOfActiveDeviceID;	// 112 = 0x70
}

+ (id)sharedInstance;	// IMP=0x002000000000edb2
+ (void)updateActiveFlag:(_Bool)arg1;	// IMP=0x0010000000008e5b
+ (Class)proxyClass;	// IMP=0x0010000000008c3a
- (void).cxx_destruct;	// IMP=0x0020000000012e22
@property(nonatomic) _Bool mirrorOfIsPaired; // @synthesize mirrorOfIsPaired=_mirrorOfIsPaired;
@property(retain, nonatomic) NSUUID *mirrorOfActiveDeviceID; // @synthesize mirrorOfActiveDeviceID=_mirrorOfActiveDeviceID;
@property(retain, nonatomic) NRMutableDevice *mirrorOfActiveDevice; // @synthesize mirrorOfActiveDevice=_mirrorOfActiveDevice;
@property(nonatomic) int syncAdviceNotifyToken; // @synthesize syncAdviceNotifyToken=_syncAdviceNotifyToken;
@property(nonatomic) _Bool isPairingOrUnpairing; // @synthesize isPairingOrUnpairing=_isPairingOrUnpairing;
@property(retain, nonatomic) NSNumber *lastDaemonState; // @synthesize lastDaemonState=_lastDaemonState;
@property(nonatomic) int idsSwitchRetryCounter; // @synthesize idsSwitchRetryCounter=_idsSwitchRetryCounter;
@property(retain, nonatomic) NSError *switchCompletionBlockError; // @synthesize switchCompletionBlockError=_switchCompletionBlockError;
@property(nonatomic) long long minPairingCompatibilityVersion; // @synthesize minPairingCompatibilityVersion=_minPairingCompatibilityVersion;
@property(nonatomic) long long maxPairingCompatibilityVersion; // @synthesize maxPairingCompatibilityVersion=_maxPairingCompatibilityVersion;
@property(nonatomic) _Bool initRemoteProperties; // @synthesize initRemoteProperties=_initRemoteProperties;
@property(retain, nonatomic) NRRemoteObjectClassC *idsServiceClassC; // @synthesize idsServiceClassC=_idsServiceClassC;
@property(nonatomic) unsigned int xpcTransactionHasBegun; // @synthesize xpcTransactionHasBegun=_xpcTransactionHasBegun;
@property(retain, nonatomic) NSLock *xpcTransactionTimerLock; // @synthesize xpcTransactionTimerLock=_xpcTransactionTimerLock;
@property(retain, nonatomic) NRLocalPropertyMonitor *localProperties; // @synthesize localProperties=_localProperties;
@property(retain, nonatomic) NSXPCConnection *xpcLaunchDConnection; // @synthesize xpcLaunchDConnection=_xpcLaunchDConnection;
@property(retain, nonatomic) NSXPCListener *xpcListener; // @synthesize xpcListener=_xpcListener;
@property(retain, nonatomic) NSMutableArray *xpcClients; // @synthesize xpcClients=_xpcClients;
- (void)xpcWatchNeedsGraduation:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012ba6
- (void)xpcSetWatchNeedsGraduation:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012ba0
- (void)xpcClearWatchNeedsGraduation:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012b9a
- (void)xpcSwitchIndex:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012b6b
- (void)xpcWatchBuddyCompletedSetupSteps:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012b55
- (void)xpcPairingClientSetPairingParentName:(id)arg1 pairingParentAltDSID:(id)arg2 forPairingID:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x0010000000012b3f
- (void)xpcPairingClientSetAltAccountName:(id)arg1 altDSID:(id)arg2 forPairingID:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x0010000000012b29
- (void)xpcIsAssertionActive:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000012b11
- (void)xpcGetInitialSyncCompletedForPairingID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000012af9
- (void)xpcGetMigrationCountForPairingID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000012ae1
- (void)xpcGetLastSwitchIndex:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012ac9
- (void)xpcIsPhoneReadyToMigrateDevice:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000012ab7
- (void)xpcClearRecoveryFlagWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012a64
- (void)xpcFakePairedSyncIsCompleteWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012a11
- (void)xpcCheckIfFlaggedForRecoveryWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00100000000129f9
- (void)xpcSetMigrationConsented:(_Bool)arg1 forDeviceID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x00100000000129ca
- (void)xpcRetrieveSecureProperties:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x001000000001299b
- (void)xpcGetDiffSinceTokenValue:(unsigned long long)arg1 getSecureProperties:(_Bool)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000001296c
- (void)xpcGetDeviceCollectionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000001293d
- (void)xpcGetChangeHistoryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000001290e
- (void)xpcDeviceIDAtSwitchIndex:(unsigned int)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x00100000000128df
- (void)xpcClientInfo:(CDUnknownBlockType)arg1;	// IMP=0x00100000000128b0
- (void)xpcApplyDiff:(id)arg1 withSecureProperties:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000012881
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *pairingQueue;
- (void)child:(id)arg1 didApplyDiff:(id)arg2;	// IMP=0x0010000000012824
- (_Bool)setPairingClientCrashMonitoringCache:(_Bool)arg1 proxy:(id)arg2;	// IMP=0x001000000001281c
- (void)proxyWillInvalidateSwitchAssertion:(id)arg1;	// IMP=0x0010000000012816
- (void)proxyWillTakeSwitchAssertion:(id)arg1;	// IMP=0x0010000000012810
- (void)proxyWillEndPushing:(id)arg1;	// IMP=0x001000000001280a
- (void)proxyWillEndDiscovering:(id)arg1;	// IMP=0x0010000000012804
- (void)proxyWillEndAdvertising:(id)arg1;	// IMP=0x00100000000127fe
- (void)proxyWillBeginUnpairing:(id)arg1;	// IMP=0x00100000000127f8
- (void)proxyWillBeginPushing:(id)arg1;	// IMP=0x00100000000127f2
- (void)proxyWillBeginPairing:(id)arg1;	// IMP=0x00100000000127ec
- (void)proxyWillBeginDiscovering:(id)arg1;	// IMP=0x00100000000127e6
- (void)proxyWillBeginAdvertising:(id)arg1;	// IMP=0x00100000000127e0
- (void)proxyWillAbortPairing:(id)arg1;	// IMP=0x00100000000127da
- (void)proxyRequestsSuspensionOfCrashMonitoring:(id)arg1;	// IMP=0x00100000000127d4
- (void)proxyRequestsResumptionOfCrashMonitoring:(id)arg1;	// IMP=0x00100000000127ce
- (void)remoteObject:(id)arg1 receivedCheckTermsEvent:(id)arg2 fromIDSBTUUID:(id)arg3 responseBlock:(CDUnknownBlockType)arg4;	// IMP=0x00100000000127b6
- (void)remoteObject:(id)arg1 receivedAddTermsEvent:(id)arg2 fromIDSBTUUID:(id)arg3 responseBlock:(CDUnknownBlockType)arg4;	// IMP=0x00100000000127a0
- (void)remoteObject:(id)arg1 receivedPropertyRequestWithRequestIdentifier:(id)arg2 fromIDSBTUUID:(id)arg3;	// IMP=0x0010000000012714
- (void)remoteObject:(id)arg1 receivedPropertyChanges:(id)arg2 isAllProperties:(_Bool)arg3 fromIDSBTUUID:(id)arg4;	// IMP=0x00100000000120d9
- (void)remoteObjectIDSServiceUnavailable:(id)arg1;	// IMP=0x00100000000120d3
- (void)remoteObjectIDSServiceAvailable:(id)arg1 withIDSDevice:(id)arg2;	// IMP=0x00100000000120cd
- (void)remoteObjectAllowedTrafficClassifiersDidReset:(id)arg1;	// IMP=0x00100000000120c7
- (void)initIDSAsyncWithBlock:(CDUnknownBlockType)arg1 shouldConnect:(_Bool)arg2;	// IMP=0x0010000000011c9a
- (void)connectIDSDuringPairing;	// IMP=0x0010000000011bbc
- (_Bool)_xpcConnectToNanoRegistryLaunchDService;	// IMP=0x0010000000011a46
- (void)notifyStateChangedWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000011308
- (void)setActiveDeviceWithPairingID:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x0010000000011118
- (void)setIsPairedAndIsSetup:(_Bool)arg1 withPairingID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0010000000010ae5
- (void)sendPropertyRequestWithTimeout:(id)arg1 toDeviceID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000001059e
- (void)_updateDeviceID:(id)arg1 withProperties:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000000ff06
- (void)idsSendProperties:(id)arg1 thisIsAllOfThem:(_Bool)arg2;	// IMP=0x001000000000fcf8
- (void)localMonitor:(id)arg1 propertiesDidChange:(id)arg2 thisIsAllOfThem:(_Bool)arg3;	// IMP=0x001000000000fce0
- (void)deleteLocalPairingStore:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000f8c0
- (void)createLocalPairingStore:(id)arg1 andNotifyPairingBeginning:(_Bool)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000000f43a
- (void)createLocalPairingStore:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000f423
- (void)enableDaemonsWithBool:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000f16e
- (void)pollProperties;	// IMP=0x001000000000f15c
- (void)refreshPropertyCache;	// IMP=0x001000000000f048
- (id)makeLocalPairingStorePairingID:(id)arg1;	// IMP=0x001000000000ef20
- (id)getLocalPairingStorePairingID:(id)arg1;	// IMP=0x001000000000ee37
- (_Bool)isInternalInstall;	// IMP=0x001000000000eda8
- (void)normalizeDaemonStateWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000e9d6
- (void)normalizeDaemonState;	// IMP=0x001000000000e878
- (unsigned long long)readNotifyToken:(int)arg1;	// IMP=0x001000000000e847
- (void)updateNotifyToken:(int)arg1 withValue:(unsigned long long)arg2 withNotificationName:(id)arg3;	// IMP=0x001000000000e6d6
- (int)getNotifyTokenWithName:(id)arg1;	// IMP=0x001000000000e5d1
- (void)initLocalProperties;	// IMP=0x001000000000e555
- (void)ackXPCEvents;	// IMP=0x001000000000e318
- (id)init;	// IMP=0x001000000000e035
- (void)xpcWaitForWatchPairingExtendedMetadataForAdvertisedName:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000e023
- (void)xpcUnpairWithDeviceID:(id)arg1 withOptions:(id)arg2 operationHasBegun:(CDUnknownBlockType)arg3;	// IMP=0x001000000000e013
- (void)xpcTriggerVersion4Workaround;	// IMP=0x001000000000e00d
- (void)xpcSwitchActiveDeviceWithDeviceID:(id)arg1 withAssertionHandler:(CDUnknownBlockType)arg2;	// IMP=0x001000000000dffb
- (void)xpcSwitchActiveDeviceWithDeviceID:(id)arg1 isMagicSwitch:(_Bool)arg2 operationHasCompleted:(CDUnknownBlockType)arg3;	// IMP=0x001000000000dfeb
- (void)xpcSuspendPairingClientCrashMonitoring:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dfe0
- (void)xpcSubmitServerRequestReportWithRequestType:(id)arg1 duration:(double)arg2 errorCode:(unsigned int)arg3 block:(CDUnknownBlockType)arg4;	// IMP=0x001000000000dfd5
- (void)xpcSubmitRTCPairingMetricForMetricID:(id)arg1 withSuccess:(CDUnknownBlockType)arg2;	// IMP=0x001000000000def4
- (void)xpcSubmitAlbertPairingReport:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dee9
- (void)xpcStopWatchSetupPushWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dede
- (void)xpcStartWatchSetupPushWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000ded3
- (void)xpcScanForMigratableWatchesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dec8
- (void)xpcRetriggerUnpairInfoDialogWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000debd
- (void)xpcResumePairingClientCrashMonitoring:(CDUnknownBlockType)arg1;	// IMP=0x001000000000deb2
- (void)xpcPutMigrationChallengeCharacteristicWriteData:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000dea2
- (void)xpcPingActiveGizmoWithPriority:(int)arg1 withMessageSize:(unsigned long long)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000000de8c
- (void)xpcPairingShouldContinue;	// IMP=0x001000000000de86
- (void)xpcPairingClientDidEnterPhase:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000de7b
- (void)xpcNotifyPasscode:(id)arg1 withDeviceID:(id)arg2;	// IMP=0x001000000000de75
- (void)xpcNotifyActivationCompleted:(id)arg1 withSuccess:(_Bool)arg2;	// IMP=0x001000000000de6f
- (void)xpcKeepPhoneUnlockedInternalTestSPI:(CDUnknownBlockType)arg1;	// IMP=0x001000000000de64
- (void)xpcInvalidateSwitchAssertionWithIdentifier:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x001000000000de54
- (void)xpcGizmoPasscodeAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;	// IMP=0x001000000000de44
- (void)xpcGizmoOOBAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;	// IMP=0x001000000000de34
- (void)xpcGetMigrationPairingCharacteristicReadDataWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000000de24
- (void)xpcGetLastMigrationRequestPhoneNameWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000000de14
- (void)xpcEnterCompatibilityState:(unsigned short)arg1 withDeviceID:(id)arg2;	// IMP=0x001000000000de0e
- (void)xpcEndDiscoveryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000de03
- (void)xpcCompanionPasscodePairWithDeviceID:(id)arg1 withOptions:(id)arg2 operationHasBegun:(CDUnknownBlockType)arg3;	// IMP=0x001000000000ddf3
- (void)xpcCompanionOOBDiscoverAndPairWithName:(id)arg1 withOutOfBandPairingKey:(id)arg2 withOptions:(id)arg3 operationHasBegun:(CDUnknownBlockType)arg4;	// IMP=0x001000000000dde3
- (void)xpcBeginMigrationWithDeviceID:(id)arg1 passcode:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000000ddd8
- (void)xpcBeginMigrationWithDeviceID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000ddc8
- (void)xpcBeginMigrationWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000000ddb8
- (void)xpcBeginDiscoveryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000ddad
- (void)xpcActiveDeviceAssertions:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dd9d
- (void)xpcAbortPairingReason:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000dd92
- (void)xpcSwitchToSimulator:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000d2dd
- (void)xpcUnpairWithSimulator:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000c6c5
- (MISSING_TYPE *)xpcPairWithSimulator:withCompletion: /* Error: Ran out of types for this method. */;	// IMP=0x001000000000a966
- (id)__idsBTUUIDForDevice:(id)arg1;	// IMP=0x001000000000a909
- (id)_idsBTUUIDForDevice:(id)arg1;	// IMP=0x001000000000a8f7
- (id)_activeDeviceBTIDSUUID;	// IMP=0x001000000000a86a
- (void)cleanUpDevicesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000a3db
- (void)deleteDevice:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000a186
- (void)newDeviceForSimulator:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x0010000000009b0b
- (void)setUpHistoryCompletionBlocks;	// IMP=0x0010000000008fc2
- (void)_updateActiveFlag:(id)arg1;	// IMP=0x0010000000008c4b

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

