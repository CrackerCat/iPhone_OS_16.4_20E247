//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreData/NSManagedObject.h>

@class CKRecord, CKShare, NSData, NSString, NSUUID, RDStoreControllerManagedObjectContext, REMCDAccount, REMCKCloudState, REMObjectID, REMResolutionTokenMap;

@interface REMCDObject : NSManagedObject
{
    CKRecord *_ckServerRecord;	// 8 = 0x8
    CKShare *_ckServerShare;	// 16 = 0x10
    _Bool _mergeDataRefusedToMergeMarkedForDeletion;	// 24 = 0x18
    _Bool _mergeDataRevertedLocallyMarkedForDeletion;	// 25 = 0x19
    _Bool _shouldPerformCloudSchemaCatchUpSync;	// 26 = 0x1a
    _Bool hack_willSaveHandled;	// 27 = 0x1b
    _Bool hack_didHandleShouldSyncUpDelete;	// 28 = 0x1c
    _Bool spotlightIndexCountUpdated;	// 29 = 0x1d
    _Bool validateForInsertion_handledJournalEntries;	// 30 = 0x1e
    _Bool validateForUpdate_handledJournalEntries;	// 31 = 0x1f
    REMCDAccount *previousAccount;	// 32 = 0x20
    REMResolutionTokenMap *hack_resolutionTokenMapCopy;	// 40 = 0x28
    REMResolutionTokenMap *cached_CDResolutionMap;	// 48 = 0x30
}

+ (_Bool)conformsToREMChangeTrackingIdentifiable;	// IMP=0x0020000000059387
+ (id)cdEntityName;	// IMP=0x0010000000059330
+ (id)objectIDWithUUID:(id)arg1;	// IMP=0x00100000000592a3
+ (id)newObjectID;	// IMP=0x0010000000059241
+ (id)relationshipsEligibleForEffectiveMinimumSupportedVersionPropagationWithEntity:(id)arg1;	// IMP=0x0010000000058c95
+ (id)keyPathsForValuesAffectingEffectiveMinimumSupportedVersion;	// IMP=0x0010000000058a78
+ (_Bool)isAbstract;	// IMP=0x0010000000055871
+ (id)ic_resultsMatchingPredicate:(id)arg1 sortDescriptors:(id)arg2 resultType:(unsigned long long)arg3 fetchBatchSize:(unsigned long long)arg4 propertiesToFetch:(id)arg5 relationshipKeyPathsForPrefetching:(id)arg6 context:(id)arg7;	// IMP=0x001000000000474b
+ (id)ic_objectsFromObjectIDs:(id)arg1 propertiesToFetch:(id)arg2 relationshipKeyPathsForPrefetching:(id)arg3 context:(id)arg4;	// IMP=0x0010000000004260
+ (_Bool)shouldAttemptLocalObjectMerge;	// IMP=0x0010000000067b48
+ (id)getResolutionTokenMapFromRecord:(id)arg1;	// IMP=0x0010000000067903
+ (id)objectCkZoneOwnerNameFromCKRecordZoneID:(id)arg1;	// IMP=0x00100000000670b5
+ (id)shareSystemFieldsTransformer;	// IMP=0x0010000000066628
+ (id)recordSystemFieldsTransformer;	// IMP=0x00100000000665d3
+ (void)resetAllDeletedByThisDeviceProperties;	// IMP=0x0010000000066482
+ (id)deletedByThisDeviceSet;	// IMP=0x0010000000066191
+ (id)deletedByThisDeviceOperationQueue;	// IMP=0x0010000000066110
+ (id)versionsByRecordIDByOperation;	// IMP=0x00100000000659fa
+ (id)versionsByOperationQueue;	// IMP=0x0010000000065979
+ (id)keyPathsForValuesAffectingServerShareCheckingParent;	// IMP=0x0010000000065011
+ (id)keyPathsForValuesAffectingIsSharedReadOnly;	// IMP=0x0010000000064f71
+ (id)keyPathsForValuesAffectingIsSharedViaICloud;	// IMP=0x0010000000064cfe
+ (id)keyPathsForValuesAffectingCanBeSharedViaICloud;	// IMP=0x0010000000064c64
+ (id)keyPathsForValuesAffectingNeedsToBeDeletedFromCloud;	// IMP=0x0010000000063e7b
+ (void)deleteAllTemporaryAssetFilesForAllObjects;	// IMP=0x0010000000063892
+ (void)deleteTemporaryFilesForAsset:(id)arg1;	// IMP=0x00100000000636d9
+ (void)deleteTemporaryAssetFilesForOperation:(id)arg1;	// IMP=0x00100000000631f9
+ (id)temporaryAssetDirectoryURL;	// IMP=0x0010000000063023
+ (id)assetForData:(id)arg1;	// IMP=0x0010000000062df7
+ (id)temporaryAssets;	// IMP=0x0010000000062d92
+ (_Bool)needsToReFetchServerRecordValue:(id)arg1;	// IMP=0x001000000006157c
+ (id)keyPathsForValuesAffectingNeedsToBePushedToCloud;	// IMP=0x00100000000612fc
+ (_Bool)shouldSyncToCloud;	// IMP=0x0010000000060ffe
+ (id)allDirtyCloudObjectIDsInContext:(id)arg1;	// IMP=0x001000000005ff87
+ (id)allDirtyCloudObjectsPredicate;	// IMP=0x001000000005ff65
+ (id)allCloudObjectIDsInContext:(id)arg1;	// IMP=0x001000000005fee8
+ (id)allCloudObjectsInContext:(id)arg1;	// IMP=0x001000000005fde2
+ (id)allCloudObjectsPredicate;	// IMP=0x001000000005fcd3
+ (id)newPlaceholderObjectForRecordID:(id)arg1 account:(id)arg2 context:(id)arg3;	// IMP=0x001000000005fb60
+ (id)newObjectWithCKIdentifier:(id)arg1 context:(id)arg2 account:(id)arg3;	// IMP=0x001000000005f15d
+ (id)newObjectWithCKRecordName:(id)arg1 context:(id)arg2 account:(id)arg3;	// IMP=0x001000000005f0c7
+ (id)newCloudObjectForRecord:(id)arg1 account:(id)arg2 context:(id)arg3;	// IMP=0x001000000005f0bf
+ (id)newCloudObjectForRecord:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x001000000005eee1
+ (id)existingCloudObjectForRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x001000000005eed9
+ (id)numberOfPushAttemptsToWaitByCKIdentifier;	// IMP=0x001000000005db3f
+ (id)failedToSyncCountsByCKIdentifier;	// IMP=0x001000000005d772
+ (id)failureCountQueue;	// IMP=0x001000000005d6f1
+ (id)objectWithRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x001000000005cf9c
+ (id)ckIdentifierFromRecordName:(id)arg1;	// IMP=0x001000000005cec8
+ (id)recordTypes;	// IMP=0x001000000005c2a8
+ (id)ckRecordKeyForMinimumSupportedVersion;	// IMP=0x001000000005c29b
+ (_Bool)conformsToICCloudObject;	// IMP=0x001000000005c293
+ (id)subclassNamesOfREMCDObjectRepresentingRootCoreDataEntities;	// IMP=0x0010000000072df3
+ (id)subclassesOfREMCDObjectRepresentingRootCoreDataEntities;	// IMP=0x0010000000072d05
+ (id)fetchRequest;	// IMP=0x0010000000072bf4
+ (id)entity;	// IMP=0x0010000000072b26
+ (void)mergeSystemPropertiesIntoCDObject:(id)arg1 fromCKRecord:(id)arg2;	// IMP=0x00100000004b0fb0
- (void).cxx_destruct;	// IMP=0x00100000000594b0
@property(nonatomic) _Bool validateForUpdate_handledJournalEntries; // @synthesize validateForUpdate_handledJournalEntries;
@property(nonatomic) _Bool validateForInsertion_handledJournalEntries; // @synthesize validateForInsertion_handledJournalEntries;
@property(nonatomic) _Bool spotlightIndexCountUpdated; // @synthesize spotlightIndexCountUpdated;
@property(retain, nonatomic) REMResolutionTokenMap *cached_CDResolutionMap; // @synthesize cached_CDResolutionMap;
@property(nonatomic) _Bool hack_didHandleShouldSyncUpDelete; // @synthesize hack_didHandleShouldSyncUpDelete;
@property(nonatomic) _Bool hack_willSaveHandled; // @synthesize hack_willSaveHandled;
@property(retain, nonatomic) REMResolutionTokenMap *hack_resolutionTokenMapCopy; // @synthesize hack_resolutionTokenMapCopy;
@property(retain, nonatomic) REMCDAccount *previousAccount; // @synthesize previousAccount;
- (id)remChangedObjectID;	// IMP=0x001000000005938f
- (id)remObjectIDWithError:(id *)arg1;	// IMP=0x00100000000591db
@property(readonly, nonatomic) REMObjectID *remObjectID;
- (_Bool)validateEffectiveMinimumSupportedVersionApplyingChange:(_Bool)arg1;	// IMP=0x0010000000058f5c
- (void)_markDirtyForEffectiveMinimumSupportedVersionValidation;	// IMP=0x0010000000058af0
- (long long)parentEffectiveMinimumSupportedVersion;	// IMP=0x0010000000058a19
@property(nonatomic) long long effectiveMinimumSupportedVersion;
- (void)setMinimumSupportedVersion:(long long)arg1;	// IMP=0x0010000000058712
@property(readonly, nonatomic) long long minimumSupportedVersion;
- (_Bool)isUnsupported;	// IMP=0x00100000000586e6
- (_Bool)_allowsObjectSupportedVersion;	// IMP=0x001000000005864f
- (void)fixValueBeforeUnmarkingForDeletionForKey:(id)arg1;	// IMP=0x0010000000058596
- (void)fixValueBeforeMarkingForDeletionForKey:(id)arg1;	// IMP=0x00100000000583c7
- (id)allChildObjects;	// IMP=0x00100000000582c4
- (void)deleteAllChildrenFromLocalDatabase;	// IMP=0x001000000005816a
- (void)recursiveMarkForDeletion:(_Bool)arg1 usingVisitedMap:(id)arg2;	// IMP=0x0010000000057ffd
- (void)traverseObjectTreeUsingVisitedMap:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00100000000577d1
- (void)updateDeletedFlagAccordingToOrphanState:(id)arg1;	// IMP=0x00100000000572c9
- (_Bool)shouldMarkAsDeletedInsteadOfDeletingImmediately;	// IMP=0x00100000000572c1
- (_Bool)_validateZoneOwnerNamesWithLogPrefix:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000056eff
@property(readonly, nonatomic) NSString *_parentZoneMismatchErrorDebugDescription;
- (_Bool)validateForUpdate:(id *)arg1;	// IMP=0x0010000000056ac5
- (_Bool)validateForInsert:(id *)arg1;	// IMP=0x00100000000568ac
- (void)didSave;	// IMP=0x00100000000567ff
- (void)willSave;	// IMP=0x0010000000056422
@property(retain, nonatomic) REMCDAccount *account; // @dynamic account;
- (id)createResolutionTokenMapIfNecessary;	// IMP=0x00100000000562d1
- (id)resolutionTokenMapFromJsonData:(id)arg1;	// IMP=0x001000000005622a
- (id)jsonDataFromResolutionTokenMap:(id)arg1;	// IMP=0x00100000000561c9
@property(retain, nonatomic) NSData *resolutionTokenMapData;
@property(retain, nonatomic) REMResolutionTokenMap *resolutionTokenMap;
- (void)didChangeValueForKey:(id)arg1;	// IMP=0x0010000000055a8f
- (void)didTurnIntoFault;	// IMP=0x0010000000055a4e
- (void)awakeFromFetch;	// IMP=0x00100000000559f1
- (void)awakeFromInsert;	// IMP=0x0010000000055994
@property(readonly, nonatomic) _Bool isPlaceholder;
@property(readonly, nonatomic) _Bool isConcealed;
@property(readonly, nonatomic) RDStoreControllerManagedObjectContext *storeControllerManagedObjectContext;
@property(readonly, nonatomic) _Bool shouldPerformCloudSchemaCatchUpSync;
@property(readonly, nonatomic) _Bool mergeDataRevertedLocallyMarkedForDeletion;
@property(readonly, nonatomic) _Bool mergeDataRefusedToMergeMarkedForDeletion;
- (void)cleanUpAfterLocalObjectMerge;	// IMP=0x0010000000067c31
- (_Bool)mergeWithLocalObject:(id)arg1;	// IMP=0x0010000000067c29
- (id)existingLocalObjectToMergeWithPredicate:(id)arg1;	// IMP=0x0010000000067c21
- (_Bool)isMergeableWithLocalObject;	// IMP=0x0010000000067b50
- (void)generateReolutionTokenMapForTestingWithKeys:(id)arg1;	// IMP=0x00100000000679df
- (id)getResolutionTokenMapFromRecord:(id)arg1;	// IMP=0x00100000000679c6
- (id)cloudKitReferenceWithRecordIDAndValidateAction:(id)arg1;	// IMP=0x00100000000678a3
- (id)ic_loggingValues;	// IMP=0x00100000000671fb
- (id)ic_loggingIdentifier;	// IMP=0x00100000000671e9
- (id)shortLoggingDescription;	// IMP=0x001000000006716d
- (id)loggingDescription;	// IMP=0x001000000006715b
- (_Bool)hasAllMandatoryFields;	// IMP=0x0010000000067113
@property(retain, nonatomic) CKShare *ckServerShare;
- (void)updateSharedObjectOwnerName:(id)arg1;	// IMP=0x0010000000066963
@property(retain, nonatomic) CKRecord *ckServerRecord;
@property(nonatomic, getter=isInCloud) _Bool inCloud;
@property(nonatomic) _Bool deletedByThisDevice;
- (long long)isPushingSameOrLaterThanVersion:(long long)arg1;	// IMP=0x0010000000065e1c
- (void)setVersion:(long long)arg1 forOperation:(id)arg2;	// IMP=0x0010000000065c48
- (long long)versionForOperation:(id)arg1;	// IMP=0x0010000000065a5f
- (void)restoreParentReferenceAfterUnmarkingForDeletion;	// IMP=0x0010000000065973
- (void)didAcceptShare:(id)arg1;	// IMP=0x001000000006575b
- (void)setServerShareIfNewer:(id)arg1;	// IMP=0x00100000000651db
- (void)updateObjectWithShare:(id)arg1;	// IMP=0x0010000000065186
- (id)currentUserShareParticipantID;	// IMP=0x00100000000650e5
- (id)shareType;	// IMP=0x00100000000650d3
- (id)shareTitle;	// IMP=0x00100000000650c1
- (id)serverShareCheckingParent;	// IMP=0x0010000000065031
- (_Bool)isSharedReadOnly;	// IMP=0x0010000000064f91
- (_Bool)isSharedRootObject;	// IMP=0x0010000000064ee2
- (_Bool)isOwnedByCurrentUser;	// IMP=0x0010000000064e9e
- (_Bool)canBeRootShareObject;	// IMP=0x0010000000064e96
- (_Bool)isSharedViaICloud;	// IMP=0x0010000000064d46
- (_Bool)canBeSharedViaICloud;	// IMP=0x0010000000064c90
@property(readonly) _Bool needsToDeleteShare;
- (void)updateParentReferenceIfNecessary;	// IMP=0x0010000000064711
- (id)parentCloudObject;	// IMP=0x0010000000064709
- (void)debug_lowLevelRemoveFromParent;	// IMP=0x001000000006469c
- (void)debug_markObjectDirtyAfterUnmarkedForDeletion;	// IMP=0x001000000006468a
- (void)debug_lowLevelUnmarkForDeletion;	// IMP=0x0010000000064678
- (void)debug_markObjectDirtyAfterMarkedForDeletion;	// IMP=0x0010000000064666
- (void)debug_lowLevelMarkForDeletion;	// IMP=0x0010000000064654
- (void)debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:(_Bool)arg1;	// IMP=0x0010000000064642
- (_Bool)supportsDeletionByTTL;	// IMP=0x001000000006463a
@property(nonatomic) _Bool markedForDeletion; // @dynamic markedForDeletion;
- (void)__lowLevelMarkForDeletion;	// IMP=0x00100000000644aa
- (void)markObjectDirtyAfterUnmarkedForDeletion;	// IMP=0x0010000000064498
- (void)lowLevelUnmarkForDeletion;	// IMP=0x0010000000064466
- (void)unmarkForDeletion;	// IMP=0x001000000006435c
- (void)markObjectDirtyAfterMarkedForDeletion;	// IMP=0x00100000000642be
- (void)lowLevelMarkForDeletion;	// IMP=0x0010000000064286
- (void)markForDeletion;	// IMP=0x0010000000064179
- (void)fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:(_Bool)arg1;	// IMP=0x0010000000063e9f
- (void)fixBrokenReferences;	// IMP=0x0010000000063e75
- (id)objectsToBeDeletedBeforeThisObject;	// IMP=0x0010000000063e68
- (void)deleteFromLocalDatabase;	// IMP=0x0010000000063d8c
- (_Bool)shouldBeDeletedFromLocalDatabaseUnlessByThisDevice:(_Bool)arg1;	// IMP=0x0010000000063bb9
- (_Bool)isDeletable;	// IMP=0x0010000000063bb1
- (void)sortChildrenObjects;	// IMP=0x0010000000062d8c
- (void)objectWasFetchedButDoesNotExistInCloud;	// IMP=0x0010000000062c15
- (void)objectWasFetchedFromCloudWithRecord:(id)arg1 accountID:(id)arg2;	// IMP=0x0010000000062614
- (void)objectWasPushedToCloudWithOperation:(id)arg1 serverRecord:(id)arg2;	// IMP=0x00100000000623d0
- (void)objectFailedToBePushedToCloudWithOperation:(id)arg1 recordID:(id)arg2 error:(id)arg3;	// IMP=0x0010000000061a13
- (void)objectWillBePushedToCloudWithOperation:(id)arg1;	// IMP=0x0010000000061991
- (void)objectWasDeletedFromCloudByAnotherDevice;	// IMP=0x0010000000061797
- (void)objectWasDeletedFromCloud;	// IMP=0x0010000000061783
- (_Bool)needsToFetchAfterServerRecordChanged:(id)arg1;	// IMP=0x00100000000613b5
- (_Bool)hasSuccessfullyPushedLatestVersionToCloud;	// IMP=0x0010000000061328
- (void)forcePushToCloud;	// IMP=0x00100000000611d2
@property(readonly) _Bool needsToBePushedToCloud;
- (void)mergeDataFromRecord:(id)arg1 accountID:(id)arg2;	// IMP=0x0010000000060a28
- (id)newlyCreatedRecord;	// IMP=0x00100000000603ae
- (void)recursivelyFixCrossZoneRelationshipWithVisitedMap:(id)arg1 perObjectHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000060004
- (_Bool)isValidObject;	// IMP=0x001000000005edd9
- (_Bool)isInICloudAccount;	// IMP=0x001000000005ecdb
- (_Bool)_isInICloudAccount;	// IMP=0x001000000005ebcc
@property(readonly) _Bool needsToBeDeletedFromCloud;
- (id)recordType;	// IMP=0x001000000005eafb
- (long long)rd_ckDatabaseScope;	// IMP=0x001000000005eab7
- (id)recordID;	// IMP=0x001000000005e7c3
@property(copy, nonatomic) NSString *ckZoneOwnerName; // @dynamic ckZoneOwnerName;
- (id)recordZoneName;	// IMP=0x001000000005e698
- (id)recordName;	// IMP=0x001000000005e57b
@property(readonly, nonatomic) _Bool shouldBeIgnoredForSync;
- (void)resetFailureCounts;	// IMP=0x001000000005e3c5
- (void)deleteChangeTokensAndReSync;	// IMP=0x001000000005e22a
- (void)decrementFailureCounts;	// IMP=0x001000000005e0d8
- (void)incrementFailureCounts;	// IMP=0x001000000005df0c
- (void)setNumberOfPushAttemptsToWaitCount:(long long)arg1;	// IMP=0x001000000005dd6d
- (long long)numberOfPushAttemptsToWaitCount;	// IMP=0x001000000005dba4
- (void)setFailedToSyncCount:(long long)arg1;	// IMP=0x001000000005d9a0
- (long long)failedToSyncCount;	// IMP=0x001000000005d7d7
- (id)ckIdentifierFromRecordName:(id)arg1;	// IMP=0x001000000005cf4b
- (void)clearServerRecord;	// IMP=0x001000000005ceb4
- (void)clearChangeCount;	// IMP=0x001000000005ce06
- (void)updateChangeCount;	// IMP=0x001000000005cbcb
- (void)setShouldSyncUpDeleteIfNeeded;	// IMP=0x001000000005cace
- (_Bool)shouldSyncUpDelete;	// IMP=0x001000000005cab5
- (void)_setCKIdentifierIfNecessary;	// IMP=0x000000000005c946
@property(nonatomic) _Bool ckNeedsToBeFetchedFromCloud; // @dynamic ckNeedsToBeFetchedFromCloud;
@property(readonly, nonatomic) NSString *accountCKIdentifier;
- (id)cloudAccount;	// IMP=0x001000000005c63c
- (void)insertCloudStateIfNeededOnAwakeFromFetch;	// IMP=0x001000000005c464
- (void)insertCloudStateOnAwakeFromInsert;	// IMP=0x001000000005c365
- (void)clearTransformedCKServerValueCachesOnDidTurnIntoFault;	// IMP=0x001000000005c318
- (_Bool)shouldCascadeMarkAsDeleteInto:(id)arg1 forRelationship:(id)arg2;	// IMP=0x0010000000068f96
- (_Bool)isConnectedToAccountObject:(id)arg1;	// IMP=0x0010000000068ed3

// Remaining properties
@property(retain, nonatomic) REMCKCloudState *ckCloudState; // @dynamic ckCloudState;
@property(nonatomic) short ckDirtyFlags; // @dynamic ckDirtyFlags;
@property(copy, nonatomic) NSString *ckIdentifier; // @dynamic ckIdentifier;
@property(nonatomic) _Bool ckNeedsInitialFetchFromCloud; // @dynamic ckNeedsInitialFetchFromCloud;
@property(retain, nonatomic) NSData *ckServerRecordData; // @dynamic ckServerRecordData;
@property(retain, nonatomic) NSData *ckServerShareData; // @dynamic ckServerShareData;
@property(copy, nonatomic) NSString *daPushKey; // @dynamic daPushKey;
@property(copy, nonatomic) NSString *daSyncToken; // @dynamic daSyncToken;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(nonatomic) long long effectiveMinimumSupportedAppVersion; // @dynamic effectiveMinimumSupportedAppVersion;
@property(copy, nonatomic) NSString *externalIdentifier; // @dynamic externalIdentifier;
@property(copy, nonatomic) NSString *externalModificationTag; // @dynamic externalModificationTag;
@property(readonly) unsigned long long hash;
@property(copy, nonatomic) NSUUID *identifier; // @dynamic identifier;
@property(retain, nonatomic) NSString *primitiveCkZoneOwnerName; // @dynamic primitiveCkZoneOwnerName;
@property(retain, nonatomic) REMResolutionTokenMap *resolutionTokenMap_v2_JSON; // @dynamic resolutionTokenMap_v2_JSON;
@property(retain, nonatomic) NSData *resolutionTokenMap_v3_JSONData; // @dynamic resolutionTokenMap_v3_JSONData;
@property(readonly) Class superclass;

@end

