//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class ADDictationSessionTracker, AFDictationOptions, CoreEmbeddedSpeechRecognizer, MISSING_TYPE, NSMutableArray, NSString, NSXPCConnection, NSXPCListener;
@protocol AFDictationServiceDelegate, OS_dispatch_queue;

@interface ADDictationConnection : NSObject
{
    CoreEmbeddedSpeechRecognizer *_localSpeechRecognizer;	// 8 = 0x8
    _Bool _usingLocalSpeechRecognizer;	// 16 = 0x10
    id <AFDictationServiceDelegate> _serviceDelegate;	// 24 = 0x18
    AFDictationOptions *_dictationOptions;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *_queue;	// 40 = 0x28
    _Bool _waitingForSpeechRecognition;	// 48 = 0x30
    _Bool _waitingForStructuredResultsOrVoiceSearch;	// 49 = 0x31
    _Bool _waitingForAudioFile;	// 50 = 0x32
    _Bool _waitingForKeyboardVisibleCheck;	// 51 = 0x33
    ADDictationSessionTracker *_sessionTracker;	// 56 = 0x38
    NSXPCListener *_pendingSpeechRequestListener;	// 64 = 0x40
    NSXPCConnection *_pendingSpeechRequestConnection;	// 72 = 0x48
    MISSING_TYPE *_pendingSpeechRequestContinue;	// 80 = 0x50
    _Bool _disconnected;	// 88 = 0x58
    CDUnknownBlockType _requestCompletion;	// 96 = 0x60
    _Bool _isDetectingUtterances;	// 104 = 0x68
    _Bool _shouldFinalizeRequestOnNextFinalResult;	// 105 = 0x69
    _Bool _didFinalizeUtteranceDetectionRequest;	// 106 = 0x6a
    NSMutableArray *_audioSessionAssertions;	// 112 = 0x70
    _Bool adSpeechSessionEnded;	// 120 = 0x78
}

- (void).cxx_destruct;	// IMP=0x0020000000284ad0
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(nonatomic) _Bool adSpeechSessionEnded; // @synthesize adSpeechSessionEnded;
- (void)_continuePendingSpeechRequestFromTimestamp:(double)arg1;	// IMP=0x001000000028499a
- (oneway void)continuePendingSpeechRequestFromTimestamp:(double)arg1;	// IMP=0x001000000028492c
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;	// IMP=0x001000000028482f
- (void)localSpeechRecognizer:(id)arg1 didCompletionRecognitionWithStatistics:(id)arg2 error:(id)arg3;	// IMP=0x0010000000284707
- (void)localSpeechRecognizer:(id)arg1 didRecognizePackage:(id)arg2;	// IMP=0x001000000028465e
- (void)localSpeechRecognizer:(id)arg1 didRecognizeRawEagerRecognitionCandidate:(id)arg2;	// IMP=0x00100000002845f1
- (void)localSpeechRecognizer:(id)arg1 didProcessAudioDuration:(double)arg2;	// IMP=0x001000000028457f
- (void)localSpeechRecognizer:(id)arg1 didRecognizeTokens:(id)arg2;	// IMP=0x00100000002844cd
- (id)_localSpeechRecognizerSupportingBackground:(_Bool)arg1;	// IMP=0x0010000000284347
- (id)_updateDictationOptionsForOnDeviceDictation:(id)arg1 language:(id)arg2;	// IMP=0x0010000000283bf6
- (oneway void)reportIssueForError:(id)arg1 eventType:(long long)arg2 subtype:(id)arg3 context:(id)arg4;	// IMP=0x00100000002839d3
- (oneway void)reportIssueForError:(id)arg1 eventType:(long long)arg2 context:(id)arg3;	// IMP=0x00100000002837d3
- (oneway void)resumeRecognitionWithPrefixText:(id)arg1 postfixText:(id)arg2 selectedText:(id)arg3;	// IMP=0x001000000028364d
- (oneway void)pauseRecognition;	// IMP=0x001000000028351b
- (oneway void)suppressLowStorageNotificationForLanguage:(id)arg1 suppress:(_Bool)arg2;	// IMP=0x0010000000283431
- (oneway void)requestOfflineDictationSupportForLanguage:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000028331a
- (oneway void)requestOfflineAssistantSupportForLanguage:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000283203
- (oneway void)getInstalledOfflineLanguagesWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000028302b
- (oneway void)_sendEngagementFeedback:(long long)arg1 voiceQueryIdentifier:(id)arg2;	// IMP=0x0010000000282fb2
- (oneway void)_startDictationWithURL:(id)arg1 isNarrowBand:(_Bool)arg2 language:(id)arg3 options:(id)arg4;	// IMP=0x0010000000282d4c
- (oneway void)addRecordedSpeechSampleData:(id)arg1;	// IMP=0x0010000000282cbd
- (oneway void)startRecordedAudioDictationWithOptions:(id)arg1 language:(id)arg2 narrowband:(_Bool)arg3 forceSampling:(_Bool)arg4;	// IMP=0x001000000028257a
- (oneway void)recordAWDSuccessMetrics;	// IMP=0x0010000000282536
- (oneway void)recordFailureMetricsForError:(id)arg1;	// IMP=0x00100000002824c0
- (oneway void)endSession;	// IMP=0x00100000002823bb
- (oneway void)preheatWithRecordDeviceIdentifier:(id)arg1;	// IMP=0x00100000002822c4
- (oneway void)preheatTestWithLanguage:(id)arg1 options:(id)arg2;	// IMP=0x0010000000282131
- (oneway void)preheat;	// IMP=0x00100000002820bb
- (oneway void)preheatForLanguageCode:(id)arg1;	// IMP=0x0010000000281f50
- (oneway void)sendUserSelectedAlternativeDictationLanguageCode:(id)arg1;	// IMP=0x0010000000281e02
- (oneway void)sendSpeechCorrectionInfo:(id)arg1 interactionIdentifier:(id)arg2;	// IMP=0x0010000000281d76
- (oneway void)sendSpeechCorrectionInfo:(id)arg1 forCorrectionContext:(id)arg2;	// IMP=0x0010000000281ce2
- (oneway void)updateSpeechOptions:(id)arg1;	// IMP=0x0010000000281bb6
- (oneway void)stopSpeechWithOptions:(id)arg1;	// IMP=0x0010000000281938
- (oneway void)cancelSpeech;	// IMP=0x00100000002817ea
- (oneway void)startDictationWithLanguageCode:(id)arg1 options:(id)arg2 speechOptions:(id)arg3;	// IMP=0x00100000002812cf
- (oneway void)startRecordingForPendingDictationWithLanguageCode:(id)arg1 options:(id)arg2 speechOptions:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x0010000000280e35
- (void)_invokeRequestCompletion;	// IMP=0x0010000000280ddc
- (oneway void)startRequestActivityWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0010000000280cee
- (void)_startDictationWithLanguageCode:(id)arg1 options:(id)arg2 speechOptions:(id)arg3 xpcconnection:(id)arg4;	// IMP=0x0010000000280c08
- (id)_dictationWillStartWithLanguageCode:(id)arg1 options:(id)arg2 speechOptions:(id)arg3 xpcconnection:(id)arg4;	// IMP=0x0010000000280173
- (void)adSpeechDidPauseRecognition;	// IMP=0x001000000028010e
- (void)adSpeechDidBeginLocalRecognitionWithModelInfo:(id)arg1 sessionUUID:(id)arg2;	// IMP=0x0010000000280065
- (void)adSpeechMultilingualSpeechRecognized:(id)arg1 sessionUUID:(id)arg2;	// IMP=0x001000000027ff99
- (void)adSpeechLanguageDetectorFailedWithError:(id)arg1;	// IMP=0x001000000027fef0
- (void)adSpeechRecordingDidDetectLanguage:(id)arg1 confidenceScores:(id)arg2 isConfident:(_Bool)arg3;	// IMP=0x001000000027fe03
- (_Bool)adWaitingForAudioFile;	// IMP=0x001000000027fd5a
- (void)adAudioFileFinishedWriting:(id)arg1 error:(id)arg2 context:(id)arg3;	// IMP=0x001000000027fbbf
- (void)adPronunciationRecognized:(id)arg1 usingSpeechModel:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x001000000027f891
- (void)adSpeechLocalRecognitionDidSucceedWithSessionUUID:(id)arg1;	// IMP=0x001000000027f69f
- (void)adSpeechRecognitionDidFail:(id)arg1 sessionUUID:(id)arg2;	// IMP=0x001000000027f4f0
- (void)adSpeechRecognizedStructuredResult:(id)arg1 usingSpeechModel:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x001000000027f150
- (void)adSpeechRecordingDidRecognizePhrases:(id)arg1 rawPhrases:(id)arg2 utterances:(id)arg3 rawUtterances:(id)arg4 nluResult:(id)arg5 sessionUUID:(id)arg6 refId:(id)arg7;	// IMP=0x001000000027ec8c
- (void)adSpeechRecordingDidRecognizeFinalResultCandidatePackage:(id)arg1 sessionUUID:(id)arg2;	// IMP=0x001000000027ec76
- (void)adSpeechRecordingDidRecognizeTokens:(id)arg1 nluResult:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x001000000027ec59
- (void)adSpeechDidFindVoiceSearchFinalResult:(id)arg1;	// IMP=0x001000000027eabb
- (void)adSpeechDidFindVoiceSearchPartialResult:(id)arg1;	// IMP=0x001000000027e994
- (void)adSpeechRecognizedPartialResult:(id)arg1;	// IMP=0x001000000027e70a
- (void)adSpeechRecognized:(id)arg1 usingSpeechModel:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x001000000027e3bb
- (void)adSpeechRecordingDidFail:(id)arg1 context:(id)arg2;	// IMP=0x001000000027e145
- (void)adSpeechRecordingDidCancelWithContext:(id)arg1;	// IMP=0x001000000027debe
- (void)adSpeechRecordingDidEndWithContext:(id)arg1;	// IMP=0x001000000027dded
- (void)adSpeechRecordingDidChangeAVRecordRoute:(id)arg1 bluetoothDevice:(id)arg2 isDucking:(_Bool)arg3 isTwoShot:(_Bool)arg4 speechEndHostTime:(unsigned long long)arg5 context:(id)arg6;	// IMP=0x001000000027dde7
- (void)adSpeechRecordingDidBeginOnAVRecordRoute:(id)arg1 audioSessionID:(unsigned int)arg2 bluetoothDevice:(id)arg3 sessionRequestUUID:(id)arg4 dictationOptions:(id)arg5 context:(id)arg6;	// IMP=0x001000000027dc9b
- (void)adSpeechRecordingWillBeginWithInputAudioPowerXPCWrapper:(id)arg1 context:(id)arg2;	// IMP=0x001000000027dc85
- (void)_removeAllAudioSessionAssertionsForReason:(id)arg1;	// IMP=0x001000000027d8ce
- (void)_addAudioSessionAssertion:(id)arg1;	// IMP=0x001000000027d874
- (void)_speechRecordingDidFinish;	// IMP=0x001000000027d78e
- (void)_updateDictationOptions:(id)arg1;	// IMP=0x001000000027d761
- (void)connectionDisconnected;	// IMP=0x001000000027d69b
- (void)dealloc;	// IMP=0x001000000027d62b
- (id)initWithServiceDelegate:(id)arg1;	// IMP=0x001000000027d498

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

